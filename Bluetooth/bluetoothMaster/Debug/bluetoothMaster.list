
bluetoothMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003084  08003084  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003084  08003084  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003084  08003084  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003088  08003088  00013088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800308c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  08003098  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003098  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca53  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d29  00000000  00000000  0002ca87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd0  00000000  00000000  0002e7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  0002f380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f0bd  00000000  00000000  0002fe58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ad8  00000000  00000000  0003ef15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000571d2  00000000  00000000  000489ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009fbbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  0009fc3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003034 	.word	0x08003034

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003034 	.word	0x08003034

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb10 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f812 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f91e 	bl	800046c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000230:	f000 f870 	bl	8000314 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f8ea 	bl	800040c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  txbuffer = 1;
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <main+0x28>)
 800023a:	2201      	movs	r2, #1
 800023c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);//start timer
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <main+0x2c>)
 8000240:	0018      	movs	r0, r3
 8000242:	f001 fb8f 	bl	8001964 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000246:	e7fe      	b.n	8000246 <main+0x26>
 8000248:	200000e8 	.word	0x200000e8
 800024c:	200000a8 	.word	0x200000a8

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b097      	sub	sp, #92	; 0x5c
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	2428      	movs	r4, #40	; 0x28
 8000258:	193b      	adds	r3, r7, r4
 800025a:	0018      	movs	r0, r3
 800025c:	2330      	movs	r3, #48	; 0x30
 800025e:	001a      	movs	r2, r3
 8000260:	2100      	movs	r1, #0
 8000262:	f002 fedf 	bl	8003024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000266:	2318      	movs	r3, #24
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	0018      	movs	r0, r3
 800026c:	2310      	movs	r3, #16
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 fed7 	bl	8003024 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	0018      	movs	r0, r3
 800027a:	2314      	movs	r3, #20
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f002 fed0 	bl	8003024 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	0021      	movs	r1, r4
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2202      	movs	r2, #2
 800028a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2201      	movs	r2, #1
 8000290:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2210      	movs	r2, #16
 8000296:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2202      	movs	r2, #2
 800029c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2200      	movs	r2, #0
 80002a2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	22a0      	movs	r2, #160	; 0xa0
 80002a8:	0392      	lsls	r2, r2, #14
 80002aa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2200      	movs	r2, #0
 80002b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	0018      	movs	r0, r3
 80002b6:	f000 fddd 	bl	8000e74 <HAL_RCC_OscConfig>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002be:	f000 f95b 	bl	8000578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	2118      	movs	r1, #24
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2207      	movs	r2, #7
 80002c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2202      	movs	r2, #2
 80002ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2101      	movs	r1, #1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f001 f8e3 	bl	80014ac <HAL_RCC_ClockConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002ea:	f000 f945 	bl	8000578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2201      	movs	r2, #1
 80002f2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 fa27 	bl	8001750 <HAL_RCCEx_PeriphCLKConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000306:	f000 f937 	bl	8000578 <Error_Handler>
  }
}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b017      	add	sp, #92	; 0x5c
 8000310:	bd90      	pop	{r4, r7, pc}
	...

08000314 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08a      	sub	sp, #40	; 0x28
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031a:	2318      	movs	r3, #24
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	0018      	movs	r0, r3
 8000320:	2310      	movs	r3, #16
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f002 fe7d 	bl	8003024 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032a:	2310      	movs	r3, #16
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	0018      	movs	r0, r3
 8000330:	2308      	movs	r3, #8
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f002 fe75 	bl	8003024 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800033a:	003b      	movs	r3, r7
 800033c:	0018      	movs	r0, r3
 800033e:	2310      	movs	r3, #16
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f002 fe6e 	bl	8003024 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <MX_TIM2_Init+0xf0>)
 800034a:	2280      	movs	r2, #128	; 0x80
 800034c:	05d2      	lsls	r2, r2, #23
 800034e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8000350:	4b2c      	ldr	r3, [pc, #176]	; (8000404 <MX_TIM2_Init+0xf0>)
 8000352:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <MX_TIM2_Init+0xf4>)
 8000354:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000356:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <MX_TIM2_Init+0xf0>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800035c:	4b29      	ldr	r3, [pc, #164]	; (8000404 <MX_TIM2_Init+0xf0>)
 800035e:	2263      	movs	r2, #99	; 0x63
 8000360:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000362:	4b28      	ldr	r3, [pc, #160]	; (8000404 <MX_TIM2_Init+0xf0>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000368:	4b26      	ldr	r3, [pc, #152]	; (8000404 <MX_TIM2_Init+0xf0>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800036e:	4b25      	ldr	r3, [pc, #148]	; (8000404 <MX_TIM2_Init+0xf0>)
 8000370:	0018      	movs	r0, r3
 8000372:	f001 facb 	bl	800190c <HAL_TIM_Base_Init>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800037a:	f000 f8fd 	bl	8000578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037e:	2118      	movs	r1, #24
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2280      	movs	r2, #128	; 0x80
 8000384:	0152      	lsls	r2, r2, #5
 8000386:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000388:	187a      	adds	r2, r7, r1
 800038a:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <MX_TIM2_Init+0xf0>)
 800038c:	0011      	movs	r1, r2
 800038e:	0018      	movs	r0, r3
 8000390:	f001 fcf2 	bl	8001d78 <HAL_TIM_ConfigClockSource>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000398:	f000 f8ee 	bl	8000578 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <MX_TIM2_Init+0xf0>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f001 fb02 	bl	80019a8 <HAL_TIM_IC_Init>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003a8:	f000 f8e6 	bl	8000578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ac:	2110      	movs	r1, #16
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ba:	187a      	adds	r2, r7, r1
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_TIM2_Init+0xf0>)
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 fffd 	bl	80023c0 <HAL_TIMEx_MasterConfigSynchronization>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80003ca:	f000 f8d5 	bl	8000578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80003ce:	003b      	movs	r3, r7
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80003d4:	003b      	movs	r3, r7
 80003d6:	2201      	movs	r2, #1
 80003d8:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80003da:	003b      	movs	r3, r7
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80003e0:	003b      	movs	r3, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80003e6:	0039      	movs	r1, r7
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_TIM2_Init+0xf0>)
 80003ea:	2204      	movs	r2, #4
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fc25 	bl	8001c3c <HAL_TIM_IC_ConfigChannel>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80003f6:	f000 f8bf 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b00a      	add	sp, #40	; 0x28
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	200000a8 	.word	0x200000a8
 8000408:	0000bb80 	.word	0x0000bb80

0800040c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000410:	4b14      	ldr	r3, [pc, #80]	; (8000464 <MX_USART1_UART_Init+0x58>)
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <MX_USART1_UART_Init+0x5c>)
 8000414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000416:	4b13      	ldr	r3, [pc, #76]	; (8000464 <MX_USART1_UART_Init+0x58>)
 8000418:	2296      	movs	r2, #150	; 0x96
 800041a:	0192      	lsls	r2, r2, #6
 800041c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_USART1_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_USART1_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_USART1_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_USART1_UART_Init+0x58>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_USART1_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_USART1_UART_Init+0x58>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_USART1_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_USART1_UART_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <MX_USART1_UART_Init+0x58>)
 8000450:	0018      	movs	r0, r3
 8000452:	f002 f823 	bl	800249c <HAL_UART_Init>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800045a:	f000 f88d 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000028 	.word	0x20000028
 8000468:	40013800 	.word	0x40013800

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b089      	sub	sp, #36	; 0x24
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	240c      	movs	r4, #12
 8000474:	193b      	adds	r3, r7, r4
 8000476:	0018      	movs	r0, r3
 8000478:	2314      	movs	r3, #20
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f002 fdd1 	bl	8003024 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000482:	4b3a      	ldr	r3, [pc, #232]	; (800056c <MX_GPIO_Init+0x100>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4b39      	ldr	r3, [pc, #228]	; (800056c <MX_GPIO_Init+0x100>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	03c9      	lsls	r1, r1, #15
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	4b36      	ldr	r3, [pc, #216]	; (800056c <MX_GPIO_Init+0x100>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	03db      	lsls	r3, r3, #15
 8000498:	4013      	ands	r3, r2
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b33      	ldr	r3, [pc, #204]	; (800056c <MX_GPIO_Init+0x100>)
 80004a0:	695a      	ldr	r2, [r3, #20]
 80004a2:	4b32      	ldr	r3, [pc, #200]	; (800056c <MX_GPIO_Init+0x100>)
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	0289      	lsls	r1, r1, #10
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	4b2f      	ldr	r3, [pc, #188]	; (800056c <MX_GPIO_Init+0x100>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	029b      	lsls	r3, r3, #10
 80004b4:	4013      	ands	r3, r2
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ba:	4b2c      	ldr	r3, [pc, #176]	; (800056c <MX_GPIO_Init+0x100>)
 80004bc:	695a      	ldr	r2, [r3, #20]
 80004be:	4b2b      	ldr	r3, [pc, #172]	; (800056c <MX_GPIO_Init+0x100>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0309      	lsls	r1, r1, #12
 80004c4:	430a      	orrs	r2, r1
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	4b28      	ldr	r3, [pc, #160]	; (800056c <MX_GPIO_Init+0x100>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	031b      	lsls	r3, r3, #12
 80004d0:	4013      	ands	r3, r2
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80004d6:	2390      	movs	r3, #144	; 0x90
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	2200      	movs	r2, #0
 80004dc:	2160      	movs	r1, #96	; 0x60
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fcaa 	bl	8000e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80004e4:	23c0      	movs	r3, #192	; 0xc0
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	4821      	ldr	r0, [pc, #132]	; (8000570 <MX_GPIO_Init+0x104>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	0019      	movs	r1, r3
 80004ee:	f000 fca3 	bl	8000e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	2201      	movs	r2, #1
 80004f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	4a1e      	ldr	r2, [pc, #120]	; (8000574 <MX_GPIO_Init+0x108>)
 80004fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000504:	193a      	adds	r2, r7, r4
 8000506:	2390      	movs	r3, #144	; 0x90
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fb23 	bl	8000b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2260      	movs	r2, #96	; 0x60
 8000518:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	000c      	movs	r4, r1
 800052e:	187a      	adds	r2, r7, r1
 8000530:	2390      	movs	r3, #144	; 0x90
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fb0e 	bl	8000b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800053c:	0021      	movs	r1, r4
 800053e:	187b      	adds	r3, r7, r1
 8000540:	22c0      	movs	r2, #192	; 0xc0
 8000542:	0092      	lsls	r2, r2, #2
 8000544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000558:	187b      	adds	r3, r7, r1
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <MX_GPIO_Init+0x104>)
 800055c:	0019      	movs	r1, r3
 800055e:	0010      	movs	r0, r2
 8000560:	f000 fafa 	bl	8000b58 <HAL_GPIO_Init>

}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b009      	add	sp, #36	; 0x24
 800056a:	bd90      	pop	{r4, r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	48000800 	.word	0x48000800
 8000574:	10120000 	.word	0x10120000

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <Message_handler>:
#include "mylibrary.h"

uint8_t txbuffer;

void Message_handler()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	  if(txbuffer == 1) {
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <Message_handler+0x38>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d109      	bne.n	80005a4 <Message_handler+0x20>
		  txbuffer = 2;
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <Message_handler+0x38>)
 8000592:	2202      	movs	r2, #2
 8000594:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t *)&txbuffer, 1, 100);
 8000596:	4909      	ldr	r1, [pc, #36]	; (80005bc <Message_handler+0x38>)
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <Message_handler+0x3c>)
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	2201      	movs	r2, #1
 800059e:	f001 ffd1 	bl	8002544 <HAL_UART_Transmit>
	  }
	  else {
		  txbuffer = 1;
		  HAL_UART_Transmit(&huart1, (uint8_t *)&txbuffer, 1, 100);
	  }
}
 80005a2:	e008      	b.n	80005b6 <Message_handler+0x32>
		  txbuffer = 1;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <Message_handler+0x38>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t *)&txbuffer, 1, 100);
 80005aa:	4904      	ldr	r1, [pc, #16]	; (80005bc <Message_handler+0x38>)
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <Message_handler+0x3c>)
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	2201      	movs	r2, #1
 80005b2:	f001 ffc7 	bl	8002544 <HAL_UART_Transmit>
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000e8 	.word	0x200000e8
 80005c0:	20000028 	.word	0x20000028

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <HAL_MspInit+0x44>)
 80005cc:	699a      	ldr	r2, [r3, #24]
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <HAL_MspInit+0x44>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	619a      	str	r2, [r3, #24]
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <HAL_MspInit+0x44>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <HAL_MspInit+0x44>)
 80005e4:	69da      	ldr	r2, [r3, #28]
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <HAL_MspInit+0x44>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0549      	lsls	r1, r1, #21
 80005ec:	430a      	orrs	r2, r1
 80005ee:	61da      	str	r2, [r3, #28]
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_MspInit+0x44>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	055b      	lsls	r3, r3, #21
 80005f8:	4013      	ands	r3, r2
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b002      	add	sp, #8
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	40021000 	.word	0x40021000

0800060c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	2314      	movs	r3, #20
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	0018      	movs	r0, r3
 800061a:	2314      	movs	r3, #20
 800061c:	001a      	movs	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f002 fd00 	bl	8003024 <memset>
  if(htim_base->Instance==TIM2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	429a      	cmp	r2, r3
 800062e:	d138      	bne.n	80006a2 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <HAL_TIM_Base_MspInit+0xa0>)
 8000632:	69da      	ldr	r2, [r3, #28]
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <HAL_TIM_Base_MspInit+0xa0>)
 8000636:	2101      	movs	r1, #1
 8000638:	430a      	orrs	r2, r1
 800063a:	61da      	str	r2, [r3, #28]
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <HAL_TIM_Base_MspInit+0xa0>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	2201      	movs	r2, #1
 8000642:	4013      	ands	r3, r2
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <HAL_TIM_Base_MspInit+0xa0>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_TIM_Base_MspInit+0xa0>)
 800064e:	2180      	movs	r1, #128	; 0x80
 8000650:	0289      	lsls	r1, r1, #10
 8000652:	430a      	orrs	r2, r1
 8000654:	615a      	str	r2, [r3, #20]
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_TIM_Base_MspInit+0xa0>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	029b      	lsls	r3, r3, #10
 800065e:	4013      	ands	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000664:	2114      	movs	r1, #20
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2202      	movs	r2, #2
 800066a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2202      	movs	r2, #2
 8000670:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2202      	movs	r2, #2
 8000682:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	187a      	adds	r2, r7, r1
 8000686:	2390      	movs	r3, #144	; 0x90
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fa63 	bl	8000b58 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	200f      	movs	r0, #15
 8000698:	f000 f9e6 	bl	8000a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800069c:	200f      	movs	r0, #15
 800069e:	f000 f9f8 	bl	8000a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b00a      	add	sp, #40	; 0x28
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	2314      	movs	r3, #20
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	0018      	movs	r0, r3
 80006be:	2314      	movs	r3, #20
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f002 fcae 	bl	8003024 <memset>
  if(huart->Instance==USART1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <HAL_UART_MspInit+0xa4>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d13b      	bne.n	800074a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <HAL_UART_MspInit+0xa8>)
 80006d4:	699a      	ldr	r2, [r3, #24]
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <HAL_UART_MspInit+0xa8>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	01c9      	lsls	r1, r1, #7
 80006dc:	430a      	orrs	r2, r1
 80006de:	619a      	str	r2, [r3, #24]
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <HAL_UART_MspInit+0xa8>)
 80006e2:	699a      	ldr	r2, [r3, #24]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	01db      	lsls	r3, r3, #7
 80006e8:	4013      	ands	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <HAL_UART_MspInit+0xa8>)
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_UART_MspInit+0xa8>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	0289      	lsls	r1, r1, #10
 80006f8:	430a      	orrs	r2, r1
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_UART_MspInit+0xa8>)
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	029b      	lsls	r3, r3, #10
 8000704:	4013      	ands	r3, r2
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800070a:	2114      	movs	r1, #20
 800070c:	187b      	adds	r3, r7, r1
 800070e:	22c0      	movs	r2, #192	; 0xc0
 8000710:	00d2      	lsls	r2, r2, #3
 8000712:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2202      	movs	r2, #2
 8000718:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2203      	movs	r2, #3
 8000724:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2201      	movs	r2, #1
 800072a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	187a      	adds	r2, r7, r1
 800072e:	2390      	movs	r3, #144	; 0x90
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fa0f 	bl	8000b58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	201b      	movs	r0, #27
 8000740:	f000 f992 	bl	8000a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000744:	201b      	movs	r0, #27
 8000746:	f000 f9a4 	bl	8000a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b00a      	add	sp, #40	; 0x28
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40013800 	.word	0x40013800
 8000758:	40021000 	.word	0x40021000

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f000 f8a8 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <TIM2_IRQHandler+0x34>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <TIM2_IRQHandler+0x34>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	430a      	orrs	r2, r1
 80007a2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <TIM2_IRQHandler+0x38>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 f932 	bl	8001a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <TIM2_IRQHandler+0x34>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <TIM2_IRQHandler+0x34>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	438a      	bics	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	20000028 	.word	0x20000028
 80007c8:	200000a8 	.word	0x200000a8

080007cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  Message_handler();
 80007d0:	f7ff fed8 	bl	8000584 <Message_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <USART1_IRQHandler+0x18>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 ff5c 	bl	8002694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	20000028 	.word	0x20000028

080007e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fa:	490e      	ldr	r1, [pc, #56]	; (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <LoopForever+0xe>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000810:	4c0b      	ldr	r4, [pc, #44]	; (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800081e:	f7ff ffe3 	bl	80007e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000822:	f002 fbdb 	bl	8002fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fcfb 	bl	8000220 <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   r0, =_estack
 800082c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000838:	0800308c 	.word	0x0800308c
  ldr r2, =_sbss
 800083c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000840:	200000f0 	.word	0x200000f0

08000844 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_COMP_IRQHandler>
	...

08000848 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_Init+0x24>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_Init+0x24>)
 8000852:	2110      	movs	r1, #16
 8000854:	430a      	orrs	r2, r1
 8000856:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000858:	2000      	movs	r0, #0
 800085a:	f000 f809 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800085e:	f7ff feb1 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_InitTick+0x5c>)
 800087a:	681c      	ldr	r4, [r3, #0]
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_InitTick+0x60>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	0019      	movs	r1, r3
 8000882:	23fa      	movs	r3, #250	; 0xfa
 8000884:	0098      	lsls	r0, r3, #2
 8000886:	f7ff fc3f 	bl	8000108 <__udivsi3>
 800088a:	0003      	movs	r3, r0
 800088c:	0019      	movs	r1, r3
 800088e:	0020      	movs	r0, r4
 8000890:	f7ff fc3a 	bl	8000108 <__udivsi3>
 8000894:	0003      	movs	r3, r0
 8000896:	0018      	movs	r0, r3
 8000898:	f000 f90b 	bl	8000ab2 <HAL_SYSTICK_Config>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e00f      	b.n	80008c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d80b      	bhi.n	80008c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	2301      	movs	r3, #1
 80008ae:	425b      	negs	r3, r3
 80008b0:	2200      	movs	r2, #0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 f8d8 	bl	8000a68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_InitTick+0x64>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b003      	add	sp, #12
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x1c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	001a      	movs	r2, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_IncTick+0x20>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	18d2      	adds	r2, r2, r3
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_IncTick+0x20>)
 80008ea:	601a      	str	r2, [r3, #0]
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	20000008 	.word	0x20000008
 80008f8:	200000ec 	.word	0x200000ec

080008fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b02      	ldr	r3, [pc, #8]	; (800090c <HAL_GetTick+0x10>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	200000ec 	.word	0x200000ec

08000910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	0002      	movs	r2, r0
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b7f      	cmp	r3, #127	; 0x7f
 8000922:	d809      	bhi.n	8000938 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	001a      	movs	r2, r3
 800092a:	231f      	movs	r3, #31
 800092c:	401a      	ands	r2, r3
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <__NVIC_EnableIRQ+0x30>)
 8000930:	2101      	movs	r1, #1
 8000932:	4091      	lsls	r1, r2
 8000934:	000a      	movs	r2, r1
 8000936:	601a      	str	r2, [r3, #0]
  }
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}
 8000940:	e000e100 	.word	0xe000e100

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	0002      	movs	r2, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b7f      	cmp	r3, #127	; 0x7f
 8000958:	d828      	bhi.n	80009ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095a:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <__NVIC_SetPriority+0xd4>)
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b25b      	sxtb	r3, r3
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	33c0      	adds	r3, #192	; 0xc0
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	589b      	ldr	r3, [r3, r2]
 800096a:	1dfa      	adds	r2, r7, #7
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	0011      	movs	r1, r2
 8000970:	2203      	movs	r2, #3
 8000972:	400a      	ands	r2, r1
 8000974:	00d2      	lsls	r2, r2, #3
 8000976:	21ff      	movs	r1, #255	; 0xff
 8000978:	4091      	lsls	r1, r2
 800097a:	000a      	movs	r2, r1
 800097c:	43d2      	mvns	r2, r2
 800097e:	401a      	ands	r2, r3
 8000980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	22ff      	movs	r2, #255	; 0xff
 8000988:	401a      	ands	r2, r3
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	0018      	movs	r0, r3
 8000990:	2303      	movs	r3, #3
 8000992:	4003      	ands	r3, r0
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000998:	481f      	ldr	r0, [pc, #124]	; (8000a18 <__NVIC_SetPriority+0xd4>)
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	430a      	orrs	r2, r1
 80009a4:	33c0      	adds	r3, #192	; 0xc0
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009aa:	e031      	b.n	8000a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <__NVIC_SetPriority+0xd8>)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	0019      	movs	r1, r3
 80009b4:	230f      	movs	r3, #15
 80009b6:	400b      	ands	r3, r1
 80009b8:	3b08      	subs	r3, #8
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3306      	adds	r3, #6
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	3304      	adds	r3, #4
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1dfa      	adds	r2, r7, #7
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	0011      	movs	r1, r2
 80009cc:	2203      	movs	r2, #3
 80009ce:	400a      	ands	r2, r1
 80009d0:	00d2      	lsls	r2, r2, #3
 80009d2:	21ff      	movs	r1, #255	; 0xff
 80009d4:	4091      	lsls	r1, r2
 80009d6:	000a      	movs	r2, r1
 80009d8:	43d2      	mvns	r2, r2
 80009da:	401a      	ands	r2, r3
 80009dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	019b      	lsls	r3, r3, #6
 80009e2:	22ff      	movs	r2, #255	; 0xff
 80009e4:	401a      	ands	r2, r3
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0018      	movs	r0, r3
 80009ec:	2303      	movs	r3, #3
 80009ee:	4003      	ands	r3, r0
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <__NVIC_SetPriority+0xd8>)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	001c      	movs	r4, r3
 80009fc:	230f      	movs	r3, #15
 80009fe:	4023      	ands	r3, r4
 8000a00:	3b08      	subs	r3, #8
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	430a      	orrs	r2, r1
 8000a06:	3306      	adds	r3, #6
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	18c3      	adds	r3, r0, r3
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b003      	add	sp, #12
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <SysTick_Config+0x40>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d901      	bls.n	8000a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a32:	2301      	movs	r3, #1
 8000a34:	e010      	b.n	8000a58 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <SysTick_Config+0x44>)
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	3a01      	subs	r2, #1
 8000a3c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	425b      	negs	r3, r3
 8000a42:	2103      	movs	r1, #3
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff ff7d 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SysTick_Config+0x44>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SysTick_Config+0x44>)
 8000a52:	2207      	movs	r2, #7
 8000a54:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b002      	add	sp, #8
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	00ffffff 	.word	0x00ffffff
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	210f      	movs	r1, #15
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	1c02      	adds	r2, r0, #0
 8000a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff ff5d 	bl	8000944 <__NVIC_SetPriority>
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b004      	add	sp, #16
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	0002      	movs	r2, r0
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff ff33 	bl	8000910 <__NVIC_EnableIRQ>
}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff ffaf 	bl	8000a20 <SysTick_Config>
 8000ac2:	0003      	movs	r3, r0
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2221      	movs	r2, #33	; 0x21
 8000ae0:	5c9b      	ldrb	r3, [r3, r2]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d007      	beq.n	8000af8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2204      	movs	r2, #4
 8000aec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000aee:	230f      	movs	r3, #15
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e028      	b.n	8000b4a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	210e      	movs	r1, #14
 8000b04:	438a      	bics	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2101      	movs	r1, #1
 8000b14:	438a      	bics	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b20:	2101      	movs	r1, #1
 8000b22:	4091      	lsls	r1, r2
 8000b24:	000a      	movs	r2, r1
 8000b26:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2221      	movs	r2, #33	; 0x21
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2220      	movs	r2, #32
 8000b34:	2100      	movs	r1, #0
 8000b36:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d004      	beq.n	8000b4a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	0010      	movs	r0, r2
 8000b48:	4798      	blx	r3
    } 
  }
  return status;
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	781b      	ldrb	r3, [r3, #0]
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b004      	add	sp, #16
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b66:	e14f      	b.n	8000e08 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	4091      	lsls	r1, r2
 8000b72:	000a      	movs	r2, r1
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d100      	bne.n	8000b80 <HAL_GPIO_Init+0x28>
 8000b7e:	e140      	b.n	8000e02 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d00b      	beq.n	8000ba0 <HAL_GPIO_Init+0x48>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d007      	beq.n	8000ba0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b94:	2b11      	cmp	r3, #17
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b12      	cmp	r3, #18
 8000b9e:	d130      	bne.n	8000c02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	409a      	lsls	r2, r3
 8000bae:	0013      	movs	r3, r2
 8000bb0:	43da      	mvns	r2, r3
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	409a      	lsls	r2, r3
 8000bc2:	0013      	movs	r3, r2
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	0013      	movs	r3, r2
 8000bde:	43da      	mvns	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	2201      	movs	r2, #1
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	43da      	mvns	r2, r3
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0xea>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b12      	cmp	r3, #18
 8000c40:	d123      	bne.n	8000c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	08da      	lsrs	r2, r3, #3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3208      	adds	r2, #8
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	58d3      	ldr	r3, [r2, r3]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	2207      	movs	r2, #7
 8000c54:	4013      	ands	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	220f      	movs	r2, #15
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	2107      	movs	r1, #7
 8000c6e:	400b      	ands	r3, r1
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	08da      	lsrs	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3208      	adds	r2, #8
 8000c84:	0092      	lsls	r2, r2, #2
 8000c86:	6939      	ldr	r1, [r7, #16]
 8000c88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	401a      	ands	r2, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	055b      	lsls	r3, r3, #21
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d100      	bne.n	8000ccc <HAL_GPIO_Init+0x174>
 8000cca:	e09a      	b.n	8000e02 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ccc:	4b54      	ldr	r3, [pc, #336]	; (8000e20 <HAL_GPIO_Init+0x2c8>)
 8000cce:	699a      	ldr	r2, [r3, #24]
 8000cd0:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <HAL_GPIO_Init+0x2c8>)
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	619a      	str	r2, [r3, #24]
 8000cd8:	4b51      	ldr	r3, [pc, #324]	; (8000e20 <HAL_GPIO_Init+0x2c8>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4013      	ands	r3, r2
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ce4:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <HAL_GPIO_Init+0x2cc>)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	589b      	ldr	r3, [r3, r2]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	409a      	lsls	r2, r3
 8000cfe:	0013      	movs	r3, r2
 8000d00:	43da      	mvns	r2, r3
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	2390      	movs	r3, #144	; 0x90
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x1e2>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a44      	ldr	r2, [pc, #272]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x1de>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a43      	ldr	r2, [pc, #268]	; (8000e2c <HAL_GPIO_Init+0x2d4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x1da>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a42      	ldr	r2, [pc, #264]	; (8000e30 <HAL_GPIO_Init+0x2d8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x1d6>
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x1e4>
 8000d2e:	2305      	movs	r3, #5
 8000d30:	e004      	b.n	8000d3c <HAL_GPIO_Init+0x1e4>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e002      	b.n	8000d3c <HAL_GPIO_Init+0x1e4>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <HAL_GPIO_Init+0x1e4>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	2103      	movs	r1, #3
 8000d40:	400a      	ands	r2, r1
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	4093      	lsls	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d4c:	4935      	ldr	r1, [pc, #212]	; (8000e24 <HAL_GPIO_Init+0x2cc>)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d5a:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_GPIO_Init+0x2dc>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	025b      	lsls	r3, r3, #9
 8000d72:	4013      	ands	r3, r2
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <HAL_GPIO_Init+0x2dc>)
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d84:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <HAL_GPIO_Init+0x2dc>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	029b      	lsls	r3, r3, #10
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <HAL_GPIO_Init+0x2dc>)
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_GPIO_Init+0x2dc>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43da      	mvns	r2, r3
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	035b      	lsls	r3, r3, #13
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_GPIO_Init+0x2dc>)
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_GPIO_Init+0x2dc>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43da      	mvns	r2, r3
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	039b      	lsls	r3, r3, #14
 8000df0:	4013      	ands	r3, r2
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_GPIO_Init+0x2dc>)
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	40da      	lsrs	r2, r3
 8000e10:	1e13      	subs	r3, r2, #0
 8000e12:	d000      	beq.n	8000e16 <HAL_GPIO_Init+0x2be>
 8000e14:	e6a8      	b.n	8000b68 <HAL_GPIO_Init+0x10>
  } 
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b006      	add	sp, #24
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	48000800 	.word	0x48000800
 8000e30:	48000c00 	.word	0x48000c00
 8000e34:	40010400 	.word	0x40010400

08000e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	0008      	movs	r0, r1
 8000e42:	0011      	movs	r1, r2
 8000e44:	1cbb      	adds	r3, r7, #2
 8000e46:	1c02      	adds	r2, r0, #0
 8000e48:	801a      	strh	r2, [r3, #0]
 8000e4a:	1c7b      	adds	r3, r7, #1
 8000e4c:	1c0a      	adds	r2, r1, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e50:	1c7b      	adds	r3, r7, #1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d004      	beq.n	8000e62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e58:	1cbb      	adds	r3, r7, #2
 8000e5a:	881a      	ldrh	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e60:	e003      	b.n	8000e6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e62:	1cbb      	adds	r3, r7, #2
 8000e64:	881a      	ldrh	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e303      	b.n	800148e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d100      	bne.n	8000e92 <HAL_RCC_OscConfig+0x1e>
 8000e90:	e08d      	b.n	8000fae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e92:	4bc4      	ldr	r3, [pc, #784]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	220c      	movs	r2, #12
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d00e      	beq.n	8000ebc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e9e:	4bc1      	ldr	r3, [pc, #772]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d116      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x64>
 8000eaa:	4bbe      	ldr	r3, [pc, #760]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	025b      	lsls	r3, r3, #9
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	025b      	lsls	r3, r3, #9
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d10d      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	4bb9      	ldr	r3, [pc, #740]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	029b      	lsls	r3, r3, #10
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d100      	bne.n	8000eca <HAL_RCC_OscConfig+0x56>
 8000ec8:	e070      	b.n	8000fac <HAL_RCC_OscConfig+0x138>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d000      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x60>
 8000ed2:	e06b      	b.n	8000fac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e2da      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d107      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x7c>
 8000ee0:	4bb0      	ldr	r3, [pc, #704]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4baf      	ldr	r3, [pc, #700]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	0249      	lsls	r1, r1, #9
 8000eea:	430a      	orrs	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e02f      	b.n	8000f50 <HAL_RCC_OscConfig+0xdc>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10c      	bne.n	8000f12 <HAL_RCC_OscConfig+0x9e>
 8000ef8:	4baa      	ldr	r3, [pc, #680]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4ba9      	ldr	r3, [pc, #676]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000efe:	49aa      	ldr	r1, [pc, #680]	; (80011a8 <HAL_RCC_OscConfig+0x334>)
 8000f00:	400a      	ands	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	4ba7      	ldr	r3, [pc, #668]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4ba6      	ldr	r3, [pc, #664]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f0a:	49a8      	ldr	r1, [pc, #672]	; (80011ac <HAL_RCC_OscConfig+0x338>)
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e01e      	b.n	8000f50 <HAL_RCC_OscConfig+0xdc>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	d10e      	bne.n	8000f38 <HAL_RCC_OscConfig+0xc4>
 8000f1a:	4ba2      	ldr	r3, [pc, #648]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4ba1      	ldr	r3, [pc, #644]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	02c9      	lsls	r1, r1, #11
 8000f24:	430a      	orrs	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	4b9e      	ldr	r3, [pc, #632]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b9d      	ldr	r3, [pc, #628]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	0249      	lsls	r1, r1, #9
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e00b      	b.n	8000f50 <HAL_RCC_OscConfig+0xdc>
 8000f38:	4b9a      	ldr	r3, [pc, #616]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b99      	ldr	r3, [pc, #612]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f3e:	499a      	ldr	r1, [pc, #616]	; (80011a8 <HAL_RCC_OscConfig+0x334>)
 8000f40:	400a      	ands	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	4b97      	ldr	r3, [pc, #604]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b96      	ldr	r3, [pc, #600]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f4a:	4998      	ldr	r1, [pc, #608]	; (80011ac <HAL_RCC_OscConfig+0x338>)
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d014      	beq.n	8000f82 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fcd0 	bl	80008fc <HAL_GetTick>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f62:	f7ff fccb 	bl	80008fc <HAL_GetTick>
 8000f66:	0002      	movs	r2, r0
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b64      	cmp	r3, #100	; 0x64
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e28c      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f74:	4b8b      	ldr	r3, [pc, #556]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	029b      	lsls	r3, r3, #10
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d0f0      	beq.n	8000f62 <HAL_RCC_OscConfig+0xee>
 8000f80:	e015      	b.n	8000fae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f82:	f7ff fcbb 	bl	80008fc <HAL_GetTick>
 8000f86:	0003      	movs	r3, r0
 8000f88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fcb6 	bl	80008fc <HAL_GetTick>
 8000f90:	0002      	movs	r2, r0
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b64      	cmp	r3, #100	; 0x64
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e277      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9e:	4b81      	ldr	r3, [pc, #516]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	029b      	lsls	r3, r3, #10
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d1f0      	bne.n	8000f8c <HAL_RCC_OscConfig+0x118>
 8000faa:	e000      	b.n	8000fae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d100      	bne.n	8000fba <HAL_RCC_OscConfig+0x146>
 8000fb8:	e069      	b.n	800108e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fba:	4b7a      	ldr	r3, [pc, #488]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d00b      	beq.n	8000fdc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fc4:	4b77      	ldr	r3, [pc, #476]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	220c      	movs	r2, #12
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d11c      	bne.n	800100a <HAL_RCC_OscConfig+0x196>
 8000fd0:	4b74      	ldr	r3, [pc, #464]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	025b      	lsls	r3, r3, #9
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d116      	bne.n	800100a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fdc:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d005      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x17e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d001      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e24d      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff2:	4b6c      	ldr	r3, [pc, #432]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	22f8      	movs	r2, #248	; 0xf8
 8000ff8:	4393      	bics	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	00da      	lsls	r2, r3, #3
 8001002:	4b68      	ldr	r3, [pc, #416]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001008:	e041      	b.n	800108e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d024      	beq.n	800105c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001012:	4b64      	ldr	r3, [pc, #400]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b63      	ldr	r3, [pc, #396]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8001018:	2101      	movs	r1, #1
 800101a:	430a      	orrs	r2, r1
 800101c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101e:	f7ff fc6d 	bl	80008fc <HAL_GetTick>
 8001022:	0003      	movs	r3, r0
 8001024:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001028:	f7ff fc68 	bl	80008fc <HAL_GetTick>
 800102c:	0002      	movs	r2, r0
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e229      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103a:	4b5a      	ldr	r3, [pc, #360]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2202      	movs	r2, #2
 8001040:	4013      	ands	r3, r2
 8001042:	d0f1      	beq.n	8001028 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001044:	4b57      	ldr	r3, [pc, #348]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	22f8      	movs	r2, #248	; 0xf8
 800104a:	4393      	bics	r3, r2
 800104c:	0019      	movs	r1, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	00da      	lsls	r2, r3, #3
 8001054:	4b53      	ldr	r3, [pc, #332]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e018      	b.n	800108e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105c:	4b51      	ldr	r3, [pc, #324]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b50      	ldr	r3, [pc, #320]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8001062:	2101      	movs	r1, #1
 8001064:	438a      	bics	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fc48 	bl	80008fc <HAL_GetTick>
 800106c:	0003      	movs	r3, r0
 800106e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fc43 	bl	80008fc <HAL_GetTick>
 8001076:	0002      	movs	r2, r0
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e204      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001084:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2202      	movs	r2, #2
 800108a:	4013      	ands	r3, r2
 800108c:	d1f1      	bne.n	8001072 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2208      	movs	r2, #8
 8001094:	4013      	ands	r3, r2
 8001096:	d036      	beq.n	8001106 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d019      	beq.n	80010d4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a0:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 80010a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a4:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	430a      	orrs	r2, r1
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ac:	f7ff fc26 	bl	80008fc <HAL_GetTick>
 80010b0:	0003      	movs	r3, r0
 80010b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc21 	bl	80008fc <HAL_GetTick>
 80010ba:	0002      	movs	r2, r0
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e1e2      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	2202      	movs	r2, #2
 80010ce:	4013      	ands	r3, r2
 80010d0:	d0f1      	beq.n	80010b6 <HAL_RCC_OscConfig+0x242>
 80010d2:	e018      	b.n	8001106 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 80010d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d8:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 80010da:	2101      	movs	r1, #1
 80010dc:	438a      	bics	r2, r1
 80010de:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e0:	f7ff fc0c 	bl	80008fc <HAL_GetTick>
 80010e4:	0003      	movs	r3, r0
 80010e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ea:	f7ff fc07 	bl	80008fc <HAL_GetTick>
 80010ee:	0002      	movs	r2, r0
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e1c8      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010fc:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	2202      	movs	r2, #2
 8001102:	4013      	ands	r3, r2
 8001104:	d1f1      	bne.n	80010ea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2204      	movs	r2, #4
 800110c:	4013      	ands	r3, r2
 800110e:	d100      	bne.n	8001112 <HAL_RCC_OscConfig+0x29e>
 8001110:	e0b6      	b.n	8001280 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001112:	231f      	movs	r3, #31
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 800111c:	69da      	ldr	r2, [r3, #28]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	055b      	lsls	r3, r3, #21
 8001122:	4013      	ands	r3, r2
 8001124:	d111      	bne.n	800114a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8001128:	69da      	ldr	r2, [r3, #28]
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	0549      	lsls	r1, r1, #21
 8001130:	430a      	orrs	r2, r1
 8001132:	61da      	str	r2, [r3, #28]
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8001136:	69da      	ldr	r2, [r3, #28]
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	055b      	lsls	r3, r3, #21
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001142:	231f      	movs	r3, #31
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_RCC_OscConfig+0x33c>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4013      	ands	r3, r2
 8001154:	d11a      	bne.n	800118c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_RCC_OscConfig+0x33c>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_RCC_OscConfig+0x33c>)
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	0049      	lsls	r1, r1, #1
 8001160:	430a      	orrs	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001164:	f7ff fbca 	bl	80008fc <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116e:	f7ff fbc5 	bl	80008fc <HAL_GetTick>
 8001172:	0002      	movs	r2, r0
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b64      	cmp	r3, #100	; 0x64
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e186      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_RCC_OscConfig+0x33c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4013      	ands	r3, r2
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d10f      	bne.n	80011b4 <HAL_RCC_OscConfig+0x340>
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 8001196:	6a1a      	ldr	r2, [r3, #32]
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 800119a:	2101      	movs	r1, #1
 800119c:	430a      	orrs	r2, r1
 800119e:	621a      	str	r2, [r3, #32]
 80011a0:	e036      	b.n	8001210 <HAL_RCC_OscConfig+0x39c>
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	40021000 	.word	0x40021000
 80011a8:	fffeffff 	.word	0xfffeffff
 80011ac:	fffbffff 	.word	0xfffbffff
 80011b0:	40007000 	.word	0x40007000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10c      	bne.n	80011d6 <HAL_RCC_OscConfig+0x362>
 80011bc:	4bb6      	ldr	r3, [pc, #728]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80011be:	6a1a      	ldr	r2, [r3, #32]
 80011c0:	4bb5      	ldr	r3, [pc, #724]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	438a      	bics	r2, r1
 80011c6:	621a      	str	r2, [r3, #32]
 80011c8:	4bb3      	ldr	r3, [pc, #716]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80011ca:	6a1a      	ldr	r2, [r3, #32]
 80011cc:	4bb2      	ldr	r3, [pc, #712]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80011ce:	2104      	movs	r1, #4
 80011d0:	438a      	bics	r2, r1
 80011d2:	621a      	str	r2, [r3, #32]
 80011d4:	e01c      	b.n	8001210 <HAL_RCC_OscConfig+0x39c>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x384>
 80011de:	4bae      	ldr	r3, [pc, #696]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80011e0:	6a1a      	ldr	r2, [r3, #32]
 80011e2:	4bad      	ldr	r3, [pc, #692]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80011e4:	2104      	movs	r1, #4
 80011e6:	430a      	orrs	r2, r1
 80011e8:	621a      	str	r2, [r3, #32]
 80011ea:	4bab      	ldr	r3, [pc, #684]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80011ec:	6a1a      	ldr	r2, [r3, #32]
 80011ee:	4baa      	ldr	r3, [pc, #680]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	430a      	orrs	r2, r1
 80011f4:	621a      	str	r2, [r3, #32]
 80011f6:	e00b      	b.n	8001210 <HAL_RCC_OscConfig+0x39c>
 80011f8:	4ba7      	ldr	r3, [pc, #668]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	4ba6      	ldr	r3, [pc, #664]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80011fe:	2101      	movs	r1, #1
 8001200:	438a      	bics	r2, r1
 8001202:	621a      	str	r2, [r3, #32]
 8001204:	4ba4      	ldr	r3, [pc, #656]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001206:	6a1a      	ldr	r2, [r3, #32]
 8001208:	4ba3      	ldr	r3, [pc, #652]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 800120a:	2104      	movs	r1, #4
 800120c:	438a      	bics	r2, r1
 800120e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d014      	beq.n	8001242 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001218:	f7ff fb70 	bl	80008fc <HAL_GetTick>
 800121c:	0003      	movs	r3, r0
 800121e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	e009      	b.n	8001236 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fb6b 	bl	80008fc <HAL_GetTick>
 8001226:	0002      	movs	r2, r0
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	4a9b      	ldr	r2, [pc, #620]	; (800149c <HAL_RCC_OscConfig+0x628>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e12b      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001236:	4b98      	ldr	r3, [pc, #608]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	2202      	movs	r2, #2
 800123c:	4013      	ands	r3, r2
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x3ae>
 8001240:	e013      	b.n	800126a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001242:	f7ff fb5b 	bl	80008fc <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124a:	e009      	b.n	8001260 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800124c:	f7ff fb56 	bl	80008fc <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	4a91      	ldr	r2, [pc, #580]	; (800149c <HAL_RCC_OscConfig+0x628>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e116      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001260:	4b8d      	ldr	r3, [pc, #564]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	2202      	movs	r2, #2
 8001266:	4013      	ands	r3, r2
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800126a:	231f      	movs	r3, #31
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d105      	bne.n	8001280 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001274:	4b88      	ldr	r3, [pc, #544]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001276:	69da      	ldr	r2, [r3, #28]
 8001278:	4b87      	ldr	r3, [pc, #540]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 800127a:	4989      	ldr	r1, [pc, #548]	; (80014a0 <HAL_RCC_OscConfig+0x62c>)
 800127c:	400a      	ands	r2, r1
 800127e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2210      	movs	r2, #16
 8001286:	4013      	ands	r3, r2
 8001288:	d063      	beq.n	8001352 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d12a      	bne.n	80012e8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001292:	4b81      	ldr	r3, [pc, #516]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001296:	4b80      	ldr	r3, [pc, #512]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001298:	2104      	movs	r1, #4
 800129a:	430a      	orrs	r2, r1
 800129c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800129e:	4b7e      	ldr	r3, [pc, #504]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80012a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a2:	4b7d      	ldr	r3, [pc, #500]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80012a4:	2101      	movs	r1, #1
 80012a6:	430a      	orrs	r2, r1
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fb27 	bl	80008fc <HAL_GetTick>
 80012ae:	0003      	movs	r3, r0
 80012b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012b4:	f7ff fb22 	bl	80008fc <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e0e3      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012c6:	4b74      	ldr	r3, [pc, #464]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80012c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ca:	2202      	movs	r2, #2
 80012cc:	4013      	ands	r3, r2
 80012ce:	d0f1      	beq.n	80012b4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012d0:	4b71      	ldr	r3, [pc, #452]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80012d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d4:	22f8      	movs	r2, #248	; 0xf8
 80012d6:	4393      	bics	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	00da      	lsls	r2, r3, #3
 80012e0:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
 80012e6:	e034      	b.n	8001352 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	3305      	adds	r3, #5
 80012ee:	d111      	bne.n	8001314 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012f0:	4b69      	ldr	r3, [pc, #420]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80012f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012f4:	4b68      	ldr	r3, [pc, #416]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80012f6:	2104      	movs	r1, #4
 80012f8:	438a      	bics	r2, r1
 80012fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012fc:	4b66      	ldr	r3, [pc, #408]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80012fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001300:	22f8      	movs	r2, #248	; 0xf8
 8001302:	4393      	bics	r3, r2
 8001304:	0019      	movs	r1, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	00da      	lsls	r2, r3, #3
 800130c:	4b62      	ldr	r3, [pc, #392]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 800130e:	430a      	orrs	r2, r1
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
 8001312:	e01e      	b.n	8001352 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001314:	4b60      	ldr	r3, [pc, #384]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001318:	4b5f      	ldr	r3, [pc, #380]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 800131a:	2104      	movs	r1, #4
 800131c:	430a      	orrs	r2, r1
 800131e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001320:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001324:	4b5c      	ldr	r3, [pc, #368]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001326:	2101      	movs	r1, #1
 8001328:	438a      	bics	r2, r1
 800132a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132c:	f7ff fae6 	bl	80008fc <HAL_GetTick>
 8001330:	0003      	movs	r3, r0
 8001332:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001336:	f7ff fae1 	bl	80008fc <HAL_GetTick>
 800133a:	0002      	movs	r2, r0
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0a2      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001348:	4b53      	ldr	r3, [pc, #332]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 800134a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134c:	2202      	movs	r2, #2
 800134e:	4013      	ands	r3, r2
 8001350:	d1f1      	bne.n	8001336 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d100      	bne.n	800135c <HAL_RCC_OscConfig+0x4e8>
 800135a:	e097      	b.n	800148c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	220c      	movs	r2, #12
 8001362:	4013      	ands	r3, r2
 8001364:	2b08      	cmp	r3, #8
 8001366:	d100      	bne.n	800136a <HAL_RCC_OscConfig+0x4f6>
 8001368:	e06b      	b.n	8001442 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d14c      	bne.n	800140c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001372:	4b49      	ldr	r3, [pc, #292]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001378:	494a      	ldr	r1, [pc, #296]	; (80014a4 <HAL_RCC_OscConfig+0x630>)
 800137a:	400a      	ands	r2, r1
 800137c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fabd 	bl	80008fc <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff fab8 	bl	80008fc <HAL_GetTick>
 800138c:	0002      	movs	r2, r0
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e079      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139a:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	049b      	lsls	r3, r3, #18
 80013a2:	4013      	ands	r3, r2
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a6:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	220f      	movs	r2, #15
 80013ac:	4393      	bics	r3, r2
 80013ae:	0019      	movs	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b4:	4b38      	ldr	r3, [pc, #224]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013b6:	430a      	orrs	r2, r1
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80013ba:	4b37      	ldr	r3, [pc, #220]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4a3a      	ldr	r2, [pc, #232]	; (80014a8 <HAL_RCC_OscConfig+0x634>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	0019      	movs	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	431a      	orrs	r2, r3
 80013ce:	4b32      	ldr	r3, [pc, #200]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	0449      	lsls	r1, r1, #17
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fa8b 	bl	80008fc <HAL_GetTick>
 80013e6:	0003      	movs	r3, r0
 80013e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff fa86 	bl	80008fc <HAL_GetTick>
 80013f0:	0002      	movs	r2, r0
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e047      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	049b      	lsls	r3, r3, #18
 8001406:	4013      	ands	r3, r2
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x578>
 800140a:	e03f      	b.n	800148c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001412:	4924      	ldr	r1, [pc, #144]	; (80014a4 <HAL_RCC_OscConfig+0x630>)
 8001414:	400a      	ands	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fa70 	bl	80008fc <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff fa6b 	bl	80008fc <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e02c      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	049b      	lsls	r3, r3, #18
 800143c:	4013      	ands	r3, r2
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x5ae>
 8001440:	e024      	b.n	800148c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e01f      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_RCC_OscConfig+0x624>)
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	025b      	lsls	r3, r3, #9
 8001460:	401a      	ands	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001466:	429a      	cmp	r2, r3
 8001468:	d10e      	bne.n	8001488 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	220f      	movs	r2, #15
 800146e:	401a      	ands	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001474:	429a      	cmp	r2, r3
 8001476:	d107      	bne.n	8001488 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	23f0      	movs	r3, #240	; 0xf0
 800147c:	039b      	lsls	r3, r3, #14
 800147e:	401a      	ands	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	0018      	movs	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	b008      	add	sp, #32
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	40021000 	.word	0x40021000
 800149c:	00001388 	.word	0x00001388
 80014a0:	efffffff 	.word	0xefffffff
 80014a4:	feffffff 	.word	0xfeffffff
 80014a8:	ffc2ffff 	.word	0xffc2ffff

080014ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0b3      	b.n	8001628 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c0:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_RCC_ClockConfig+0x184>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2201      	movs	r2, #1
 80014c6:	4013      	ands	r3, r2
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d911      	bls.n	80014f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	4b58      	ldr	r3, [pc, #352]	; (8001630 <HAL_RCC_ClockConfig+0x184>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2201      	movs	r2, #1
 80014d4:	4393      	bics	r3, r2
 80014d6:	0019      	movs	r1, r3
 80014d8:	4b55      	ldr	r3, [pc, #340]	; (8001630 <HAL_RCC_ClockConfig+0x184>)
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e0:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_RCC_ClockConfig+0x184>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2201      	movs	r2, #1
 80014e6:	4013      	ands	r3, r2
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e09a      	b.n	8001628 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2202      	movs	r2, #2
 80014f8:	4013      	ands	r3, r2
 80014fa:	d015      	beq.n	8001528 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2204      	movs	r2, #4
 8001502:	4013      	ands	r3, r2
 8001504:	d006      	beq.n	8001514 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001506:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 800150c:	21e0      	movs	r1, #224	; 0xe0
 800150e:	00c9      	lsls	r1, r1, #3
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001514:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	22f0      	movs	r2, #240	; 0xf0
 800151a:	4393      	bics	r3, r2
 800151c:	0019      	movs	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2201      	movs	r2, #1
 800152e:	4013      	ands	r3, r2
 8001530:	d040      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	029b      	lsls	r3, r3, #10
 8001542:	4013      	ands	r3, r2
 8001544:	d114      	bne.n	8001570 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e06e      	b.n	8001628 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	049b      	lsls	r3, r3, #18
 800155a:	4013      	ands	r3, r2
 800155c:	d108      	bne.n	8001570 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e062      	b.n	8001628 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001562:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2202      	movs	r2, #2
 8001568:	4013      	ands	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e05b      	b.n	8001628 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001570:	4b30      	ldr	r3, [pc, #192]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	4393      	bics	r3, r2
 8001578:	0019      	movs	r1, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 8001580:	430a      	orrs	r2, r1
 8001582:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001584:	f7ff f9ba 	bl	80008fc <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158c:	e009      	b.n	80015a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158e:	f7ff f9b5 	bl	80008fc <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_RCC_ClockConfig+0x18c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e042      	b.n	8001628 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	220c      	movs	r2, #12
 80015a8:	401a      	ands	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d1ec      	bne.n	800158e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <HAL_RCC_ClockConfig+0x184>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d211      	bcs.n	80015e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_ClockConfig+0x184>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4393      	bics	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_RCC_ClockConfig+0x184>)
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_RCC_ClockConfig+0x184>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e020      	b.n	8001628 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2204      	movs	r2, #4
 80015ec:	4013      	ands	r3, r2
 80015ee:	d009      	beq.n	8001604 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a11      	ldr	r2, [pc, #68]	; (800163c <HAL_RCC_ClockConfig+0x190>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	0019      	movs	r1, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 8001600:	430a      	orrs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001604:	f000 f820 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001608:	0001      	movs	r1, r0
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_RCC_ClockConfig+0x188>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	220f      	movs	r2, #15
 8001612:	4013      	ands	r3, r2
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_RCC_ClockConfig+0x194>)
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	000a      	movs	r2, r1
 800161a:	40da      	lsrs	r2, r3
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x198>)
 800161e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff f925 	bl	8000870 <HAL_InitTick>
  
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b004      	add	sp, #16
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40022000 	.word	0x40022000
 8001634:	40021000 	.word	0x40021000
 8001638:	00001388 	.word	0x00001388
 800163c:	fffff8ff 	.word	0xfffff8ff
 8001640:	0800306c 	.word	0x0800306c
 8001644:	20000000 	.word	0x20000000

08001648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b08f      	sub	sp, #60	; 0x3c
 800164c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800164e:	2314      	movs	r3, #20
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	4a2b      	ldr	r2, [pc, #172]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001654:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001656:	c313      	stmia	r3!, {r0, r1, r4}
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4a29      	ldr	r2, [pc, #164]	; (8001704 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001660:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001662:	c313      	stmia	r3!, {r0, r1, r4}
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166c:	2300      	movs	r3, #0
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001670:	2300      	movs	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_RCC_GetSysClockFreq+0xc0>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001684:	220c      	movs	r2, #12
 8001686:	4013      	ands	r3, r2
 8001688:	2b04      	cmp	r3, #4
 800168a:	d002      	beq.n	8001692 <HAL_RCC_GetSysClockFreq+0x4a>
 800168c:	2b08      	cmp	r3, #8
 800168e:	d003      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0x50>
 8001690:	e02d      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001696:	e02d      	b.n	80016f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	0c9b      	lsrs	r3, r3, #18
 800169c:	220f      	movs	r2, #15
 800169e:	4013      	ands	r3, r2
 80016a0:	2214      	movs	r2, #20
 80016a2:	18ba      	adds	r2, r7, r2
 80016a4:	5cd3      	ldrb	r3, [r2, r3]
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	220f      	movs	r2, #15
 80016ae:	4013      	ands	r3, r2
 80016b0:	1d3a      	adds	r2, r7, #4
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	4013      	ands	r3, r2
 80016be:	d009      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016c2:	4812      	ldr	r0, [pc, #72]	; (800170c <HAL_RCC_GetSysClockFreq+0xc4>)
 80016c4:	f7fe fd20 	bl	8000108 <__udivsi3>
 80016c8:	0003      	movs	r3, r0
 80016ca:	001a      	movs	r2, r3
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	4353      	muls	r3, r2
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
 80016d2:	e009      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80016d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016d6:	000a      	movs	r2, r1
 80016d8:	0152      	lsls	r2, r2, #5
 80016da:	1a52      	subs	r2, r2, r1
 80016dc:	0193      	lsls	r3, r2, #6
 80016de:	1a9b      	subs	r3, r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	185b      	adds	r3, r3, r1
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80016e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016ec:	e002      	b.n	80016f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <HAL_RCC_GetSysClockFreq+0xc4>)
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80016f6:	0018      	movs	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b00f      	add	sp, #60	; 0x3c
 80016fc:	bd90      	pop	{r4, r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	0800304c 	.word	0x0800304c
 8001704:	0800305c 	.word	0x0800305c
 8001708:	40021000 	.word	0x40021000
 800170c:	007a1200 	.word	0x007a1200

08001710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001714:	4b02      	ldr	r3, [pc, #8]	; (8001720 <HAL_RCC_GetHCLKFreq+0x10>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	20000000 	.word	0x20000000

08001724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001728:	f7ff fff2 	bl	8001710 <HAL_RCC_GetHCLKFreq>
 800172c:	0001      	movs	r1, r0
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	2207      	movs	r2, #7
 8001736:	4013      	ands	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_RCC_GetPCLK1Freq+0x28>)
 800173a:	5cd3      	ldrb	r3, [r2, r3]
 800173c:	40d9      	lsrs	r1, r3
 800173e:	000b      	movs	r3, r1
}    
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	40021000 	.word	0x40021000
 800174c:	0800307c 	.word	0x0800307c

08001750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	025b      	lsls	r3, r3, #9
 8001768:	4013      	ands	r3, r2
 800176a:	d100      	bne.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800176c:	e08f      	b.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800176e:	2317      	movs	r3, #23
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001776:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	055b      	lsls	r3, r3, #21
 800177e:	4013      	ands	r3, r2
 8001780:	d111      	bne.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	4b5b      	ldr	r3, [pc, #364]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	0549      	lsls	r1, r1, #21
 800178c:	430a      	orrs	r2, r1
 800178e:	61da      	str	r2, [r3, #28]
 8001790:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001792:	69da      	ldr	r2, [r3, #28]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	055b      	lsls	r3, r3, #21
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179e:	2317      	movs	r3, #23
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4013      	ands	r3, r2
 80017b0:	d11a      	bne.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b2:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	0049      	lsls	r1, r1, #1
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c0:	f7ff f89c 	bl	80008fc <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c8:	e008      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ca:	f7ff f897 	bl	80008fc <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b64      	cmp	r3, #100	; 0x64
 80017d6:	d901      	bls.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e087      	b.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017dc:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4013      	ands	r3, r2
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017e8:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017ea:	6a1a      	ldr	r2, [r3, #32]
 80017ec:	23c0      	movs	r3, #192	; 0xc0
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d034      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	23c0      	movs	r3, #192	; 0xc0
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4013      	ands	r3, r2
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	429a      	cmp	r2, r3
 8001808:	d02c      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a3b      	ldr	r2, [pc, #236]	; (80018fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001810:	4013      	ands	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001814:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	0249      	lsls	r1, r1, #9
 800181e:	430a      	orrs	r2, r1
 8001820:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001828:	4935      	ldr	r1, [pc, #212]	; (8001900 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800182a:	400a      	ands	r2, r1
 800182c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2201      	movs	r2, #1
 8001838:	4013      	ands	r3, r2
 800183a:	d013      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff f85e 	bl	80008fc <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	e009      	b.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff f859 	bl	80008fc <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	4a2c      	ldr	r2, [pc, #176]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e048      	b.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d0f0      	beq.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a24      	ldr	r2, [pc, #144]	; (80018fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800186a:	4013      	ands	r3, r2
 800186c:	0019      	movs	r1, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001874:	430a      	orrs	r2, r1
 8001876:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001878:	2317      	movs	r3, #23
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d105      	bne.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001888:	491f      	ldr	r1, [pc, #124]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800188a:	400a      	ands	r2, r1
 800188c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	4013      	ands	r3, r2
 8001896:	d009      	beq.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	2203      	movs	r2, #3
 800189e:	4393      	bics	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018a8:	430a      	orrs	r2, r1
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2220      	movs	r2, #32
 80018b2:	4013      	ands	r3, r2
 80018b4:	d009      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	2210      	movs	r2, #16
 80018bc:	4393      	bics	r3, r2
 80018be:	0019      	movs	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018c6:	430a      	orrs	r2, r1
 80018c8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4013      	ands	r3, r2
 80018d4:	d009      	beq.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	4393      	bics	r3, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b006      	add	sp, #24
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40007000 	.word	0x40007000
 80018fc:	fffffcff 	.word	0xfffffcff
 8001900:	fffeffff 	.word	0xfffeffff
 8001904:	00001388 	.word	0x00001388
 8001908:	efffffff 	.word	0xefffffff

0800190c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e01e      	b.n	800195c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	223d      	movs	r2, #61	; 0x3d
 8001922:	5c9b      	ldrb	r3, [r3, r2]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d107      	bne.n	800193a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	223c      	movs	r2, #60	; 0x3c
 800192e:	2100      	movs	r1, #0
 8001930:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0018      	movs	r0, r3
 8001936:	f7fe fe69 	bl	800060c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	223d      	movs	r2, #61	; 0x3d
 800193e:	2102      	movs	r1, #2
 8001940:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3304      	adds	r3, #4
 800194a:	0019      	movs	r1, r3
 800194c:	0010      	movs	r0, r2
 800194e:	f000 faf9 	bl	8001f44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	223d      	movs	r2, #61	; 0x3d
 8001956:	2101      	movs	r1, #1
 8001958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2101      	movs	r1, #1
 8001978:	430a      	orrs	r2, r1
 800197a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2207      	movs	r2, #7
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b06      	cmp	r3, #6
 800198c:	d007      	beq.n	800199e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b004      	add	sp, #16
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e01e      	b.n	80019f8 <HAL_TIM_IC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	223d      	movs	r2, #61	; 0x3d
 80019be:	5c9b      	ldrb	r3, [r3, r2]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d107      	bne.n	80019d6 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	223c      	movs	r2, #60	; 0x3c
 80019ca:	2100      	movs	r1, #0
 80019cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	0018      	movs	r0, r3
 80019d2:	f000 f815 	bl	8001a00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	223d      	movs	r2, #61	; 0x3d
 80019da:	2102      	movs	r1, #2
 80019dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3304      	adds	r3, #4
 80019e6:	0019      	movs	r1, r3
 80019e8:	0010      	movs	r0, r2
 80019ea:	f000 faab 	bl	8001f44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	223d      	movs	r2, #61	; 0x3d
 80019f2:	2101      	movs	r1, #1
 80019f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	0018      	movs	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b002      	add	sp, #8
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d124      	bne.n	8001a70 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d11d      	bne.n	8001a70 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	4252      	negs	r2, r2
 8001a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d004      	beq.n	8001a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 fa5e 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 8001a58:	e007      	b.n	8001a6a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 fa51 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 fa5d 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2204      	movs	r2, #4
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d125      	bne.n	8001aca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2204      	movs	r2, #4
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d11e      	bne.n	8001aca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2205      	movs	r2, #5
 8001a92:	4252      	negs	r2, r2
 8001a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699a      	ldr	r2, [r3, #24]
 8001aa2:	23c0      	movs	r3, #192	; 0xc0
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d004      	beq.n	8001ab4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 fa31 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 8001ab2:	e007      	b.n	8001ac4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f000 fa24 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f000 fa30 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d124      	bne.n	8001b22 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2208      	movs	r2, #8
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d11d      	bne.n	8001b22 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2209      	movs	r2, #9
 8001aec:	4252      	negs	r2, r2
 8001aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2204      	movs	r2, #4
 8001af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2203      	movs	r2, #3
 8001afe:	4013      	ands	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f000 fa05 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 8001b0a:	e007      	b.n	8001b1c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 f9f8 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 fa04 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	2210      	movs	r2, #16
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b10      	cmp	r3, #16
 8001b2e:	d125      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2210      	movs	r2, #16
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d11e      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2211      	movs	r2, #17
 8001b44:	4252      	negs	r2, r2
 8001b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	69da      	ldr	r2, [r3, #28]
 8001b54:	23c0      	movs	r3, #192	; 0xc0
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d004      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 f9d8 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 8001b64:	e007      	b.n	8001b76 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f000 f9cb 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 f9d7 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d10f      	bne.n	8001baa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d108      	bne.n	8001baa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	4252      	negs	r2, r2
 8001ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 f9a5 	bl	8001ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b80      	cmp	r3, #128	; 0x80
 8001bb6:	d10f      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b80      	cmp	r3, #128	; 0x80
 8001bc4:	d108      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2281      	movs	r2, #129	; 0x81
 8001bcc:	4252      	negs	r2, r2
 8001bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 fc5a 	bl	800248c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b40      	cmp	r3, #64	; 0x40
 8001be4:	d10f      	bne.n	8001c06 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2240      	movs	r2, #64	; 0x40
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b40      	cmp	r3, #64	; 0x40
 8001bf2:	d108      	bne.n	8001c06 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2241      	movs	r2, #65	; 0x41
 8001bfa:	4252      	negs	r2, r2
 8001bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f000 f997 	bl	8001f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d10f      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d108      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2221      	movs	r2, #33	; 0x21
 8001c28:	4252      	negs	r2, r2
 8001c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 fc24 	bl	800247c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	223c      	movs	r2, #60	; 0x3c
 8001c4c:	5c9b      	ldrb	r3, [r3, r2]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e08a      	b.n	8001d6c <HAL_TIM_IC_ConfigChannel+0x130>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	223c      	movs	r2, #60	; 0x3c
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	223d      	movs	r2, #61	; 0x3d
 8001c62:	2102      	movs	r1, #2
 8001c64:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d11b      	bne.n	8001ca4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	6819      	ldr	r1, [r3, #0]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f000 f9e2 	bl	8002044 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	210c      	movs	r1, #12
 8001c8c:	438a      	bics	r2, r1
 8001c8e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6999      	ldr	r1, [r3, #24]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	619a      	str	r2, [r3, #24]
 8001ca2:	e05a      	b.n	8001d5a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d11c      	bne.n	8001ce4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f000 fa4d 	bl	8002158 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	492a      	ldr	r1, [pc, #168]	; (8001d74 <HAL_TIM_IC_ConfigChannel+0x138>)
 8001cca:	400a      	ands	r2, r1
 8001ccc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6999      	ldr	r1, [r3, #24]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	021a      	lsls	r2, r3, #8
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	619a      	str	r2, [r3, #24]
 8001ce2:	e03a      	b.n	8001d5a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d11b      	bne.n	8001d22 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	6819      	ldr	r1, [r3, #0]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f000 faa1 	bl	8002240 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	210c      	movs	r1, #12
 8001d0a:	438a      	bics	r2, r1
 8001d0c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	69d9      	ldr	r1, [r3, #28]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	61da      	str	r2, [r3, #28]
 8001d20:	e01b      	b.n	8001d5a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f000 fac5 	bl	80022c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69da      	ldr	r2, [r3, #28]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <HAL_TIM_IC_ConfigChannel+0x138>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69d9      	ldr	r1, [r3, #28]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	021a      	lsls	r2, r3, #8
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	223d      	movs	r2, #61	; 0x3d
 8001d5e:	2101      	movs	r1, #1
 8001d60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	223c      	movs	r2, #60	; 0x3c
 8001d66:	2100      	movs	r1, #0
 8001d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b004      	add	sp, #16
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	fffff3ff 	.word	0xfffff3ff

08001d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	223c      	movs	r2, #60	; 0x3c
 8001d86:	5c9b      	ldrb	r3, [r3, r2]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_TIM_ConfigClockSource+0x18>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e0ab      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x170>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	223c      	movs	r2, #60	; 0x3c
 8001d94:	2101      	movs	r1, #1
 8001d96:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	223d      	movs	r2, #61	; 0x3d
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2277      	movs	r2, #119	; 0x77
 8001dac:	4393      	bics	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a4f      	ldr	r2, [pc, #316]	; (8001ef0 <HAL_TIM_ConfigClockSource+0x178>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d100      	bne.n	8001dca <HAL_TIM_ConfigClockSource+0x52>
 8001dc8:	e06b      	b.n	8001ea2 <HAL_TIM_ConfigClockSource+0x12a>
 8001dca:	d80e      	bhi.n	8001dea <HAL_TIM_ConfigClockSource+0x72>
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d100      	bne.n	8001dd2 <HAL_TIM_ConfigClockSource+0x5a>
 8001dd0:	e077      	b.n	8001ec2 <HAL_TIM_ConfigClockSource+0x14a>
 8001dd2:	d803      	bhi.n	8001ddc <HAL_TIM_ConfigClockSource+0x64>
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d100      	bne.n	8001dda <HAL_TIM_ConfigClockSource+0x62>
 8001dd8:	e073      	b.n	8001ec2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001dda:	e07c      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d100      	bne.n	8001de2 <HAL_TIM_ConfigClockSource+0x6a>
 8001de0:	e06f      	b.n	8001ec2 <HAL_TIM_ConfigClockSource+0x14a>
 8001de2:	2b30      	cmp	r3, #48	; 0x30
 8001de4:	d100      	bne.n	8001de8 <HAL_TIM_ConfigClockSource+0x70>
 8001de6:	e06c      	b.n	8001ec2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001de8:	e075      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001dea:	2b70      	cmp	r3, #112	; 0x70
 8001dec:	d00e      	beq.n	8001e0c <HAL_TIM_ConfigClockSource+0x94>
 8001dee:	d804      	bhi.n	8001dfa <HAL_TIM_ConfigClockSource+0x82>
 8001df0:	2b50      	cmp	r3, #80	; 0x50
 8001df2:	d036      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0xea>
 8001df4:	2b60      	cmp	r3, #96	; 0x60
 8001df6:	d044      	beq.n	8001e82 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001df8:	e06d      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	0152      	lsls	r2, r2, #5
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d068      	beq.n	8001ed4 <HAL_TIM_ConfigClockSource+0x15c>
 8001e02:	2280      	movs	r2, #128	; 0x80
 8001e04:	0192      	lsls	r2, r2, #6
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d017      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001e0a:	e064      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6899      	ldr	r1, [r3, #8]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f000 fab0 	bl	8002380 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2277      	movs	r2, #119	; 0x77
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	609a      	str	r2, [r3, #8]
      break;
 8001e38:	e04d      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6899      	ldr	r1, [r3, #8]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f000 fa99 	bl	8002380 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	01c9      	lsls	r1, r1, #7
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]
      break;
 8001e60:	e039      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6859      	ldr	r1, [r3, #4]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	001a      	movs	r2, r3
 8001e70:	f000 f944 	bl	80020fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2150      	movs	r1, #80	; 0x50
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f000 fa66 	bl	800234c <TIM_ITRx_SetConfig>
      break;
 8001e80:	e029      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	001a      	movs	r2, r3
 8001e90:	f000 f9a4 	bl	80021dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2160      	movs	r1, #96	; 0x60
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 fa56 	bl	800234c <TIM_ITRx_SetConfig>
      break;
 8001ea0:	e019      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6859      	ldr	r1, [r3, #4]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	001a      	movs	r2, r3
 8001eb0:	f000 f924 	bl	80020fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2140      	movs	r1, #64	; 0x40
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 fa46 	bl	800234c <TIM_ITRx_SetConfig>
      break;
 8001ec0:	e009      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	0019      	movs	r1, r3
 8001ecc:	0010      	movs	r0, r2
 8001ece:	f000 fa3d 	bl	800234c <TIM_ITRx_SetConfig>
      break;
 8001ed2:	e000      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001ed4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	223d      	movs	r2, #61	; 0x3d
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	223c      	movs	r2, #60	; 0x3c
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b004      	add	sp, #16
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	ffff00ff 	.word	0xffff00ff

08001ef4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001efc:	46c0      	nop			; (mov r8, r8)
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b002      	add	sp, #8
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a34      	ldr	r2, [pc, #208]	; (8002028 <TIM_Base_SetConfig+0xe4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d008      	beq.n	8001f6e <TIM_Base_SetConfig+0x2a>
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	05db      	lsls	r3, r3, #23
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d003      	beq.n	8001f6e <TIM_Base_SetConfig+0x2a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a30      	ldr	r2, [pc, #192]	; (800202c <TIM_Base_SetConfig+0xe8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d108      	bne.n	8001f80 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2270      	movs	r2, #112	; 0x70
 8001f72:	4393      	bics	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a29      	ldr	r2, [pc, #164]	; (8002028 <TIM_Base_SetConfig+0xe4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d018      	beq.n	8001fba <TIM_Base_SetConfig+0x76>
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	05db      	lsls	r3, r3, #23
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d013      	beq.n	8001fba <TIM_Base_SetConfig+0x76>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a25      	ldr	r2, [pc, #148]	; (800202c <TIM_Base_SetConfig+0xe8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00f      	beq.n	8001fba <TIM_Base_SetConfig+0x76>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a24      	ldr	r2, [pc, #144]	; (8002030 <TIM_Base_SetConfig+0xec>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00b      	beq.n	8001fba <TIM_Base_SetConfig+0x76>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a23      	ldr	r2, [pc, #140]	; (8002034 <TIM_Base_SetConfig+0xf0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d007      	beq.n	8001fba <TIM_Base_SetConfig+0x76>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a22      	ldr	r2, [pc, #136]	; (8002038 <TIM_Base_SetConfig+0xf4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d003      	beq.n	8001fba <TIM_Base_SetConfig+0x76>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a21      	ldr	r2, [pc, #132]	; (800203c <TIM_Base_SetConfig+0xf8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d108      	bne.n	8001fcc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a20      	ldr	r2, [pc, #128]	; (8002040 <TIM_Base_SetConfig+0xfc>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	4393      	bics	r3, r2
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <TIM_Base_SetConfig+0xe4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00b      	beq.n	8002012 <TIM_Base_SetConfig+0xce>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <TIM_Base_SetConfig+0xf0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d007      	beq.n	8002012 <TIM_Base_SetConfig+0xce>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <TIM_Base_SetConfig+0xf4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d003      	beq.n	8002012 <TIM_Base_SetConfig+0xce>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <TIM_Base_SetConfig+0xf8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d103      	bne.n	800201a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	615a      	str	r2, [r3, #20]
}
 8002020:	46c0      	nop			; (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	b004      	add	sp, #16
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40000400 	.word	0x40000400
 8002030:	40002000 	.word	0x40002000
 8002034:	40014000 	.word	0x40014000
 8002038:	40014400 	.word	0x40014400
 800203c:	40014800 	.word	0x40014800
 8002040:	fffffcff 	.word	0xfffffcff

08002044 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	2201      	movs	r2, #1
 8002058:	4393      	bics	r3, r2
 800205a:	001a      	movs	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a20      	ldr	r2, [pc, #128]	; (80020f0 <TIM_TI1_SetConfig+0xac>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00c      	beq.n	800208e <TIM_TI1_SetConfig+0x4a>
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	05db      	lsls	r3, r3, #23
 800207a:	429a      	cmp	r2, r3
 800207c:	d007      	beq.n	800208e <TIM_TI1_SetConfig+0x4a>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <TIM_TI1_SetConfig+0xb0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <TIM_TI1_SetConfig+0x4a>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <TIM_TI1_SetConfig+0xb4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <TIM_TI1_SetConfig+0x4e>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <TIM_TI1_SetConfig+0x50>
 8002092:	2300      	movs	r3, #0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2203      	movs	r2, #3
 800209c:	4393      	bics	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e003      	b.n	80020b2 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2201      	movs	r2, #1
 80020ae:	4313      	orrs	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	22f0      	movs	r2, #240	; 0xf0
 80020b6:	4393      	bics	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	22ff      	movs	r2, #255	; 0xff
 80020c0:	4013      	ands	r3, r2
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	220a      	movs	r2, #10
 80020cc:	4393      	bics	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	220a      	movs	r2, #10
 80020d4:	4013      	ands	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	621a      	str	r2, [r3, #32]
}
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b006      	add	sp, #24
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40000400 	.word	0x40000400
 80020f8:	40014000 	.word	0x40014000

080020fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	2201      	movs	r2, #1
 8002114:	4393      	bics	r3, r2
 8002116:	001a      	movs	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	22f0      	movs	r2, #240	; 0xf0
 8002126:	4393      	bics	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	220a      	movs	r2, #10
 8002138:	4393      	bics	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	621a      	str	r2, [r3, #32]
}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b006      	add	sp, #24
 8002156:	bd80      	pop	{r7, pc}

08002158 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	2210      	movs	r2, #16
 800216c:	4393      	bics	r3, r2
 800216e:	001a      	movs	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <TIM_TI2_SetConfig+0x7c>)
 8002184:	4013      	ands	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <TIM_TI2_SetConfig+0x80>)
 8002196:	4013      	ands	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	031b      	lsls	r3, r3, #12
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	22a0      	movs	r2, #160	; 0xa0
 80021ac:	4393      	bics	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	22a0      	movs	r2, #160	; 0xa0
 80021b6:	4013      	ands	r3, r2
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	621a      	str	r2, [r3, #32]
}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b006      	add	sp, #24
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	fffffcff 	.word	0xfffffcff
 80021d8:	ffff0fff 	.word	0xffff0fff

080021dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	2210      	movs	r2, #16
 80021ee:	4393      	bics	r3, r2
 80021f0:	001a      	movs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <TIM_TI2_ConfigInputStage+0x60>)
 8002206:	4013      	ands	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	031b      	lsls	r3, r3, #12
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	22a0      	movs	r2, #160	; 0xa0
 8002218:	4393      	bics	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	621a      	str	r2, [r3, #32]
}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b006      	add	sp, #24
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	ffff0fff 	.word	0xffff0fff

08002240 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <TIM_TI3_SetConfig+0x78>)
 8002254:	401a      	ands	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2203      	movs	r2, #3
 800226a:	4393      	bics	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	22f0      	movs	r2, #240	; 0xf0
 800227a:	4393      	bics	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	22ff      	movs	r2, #255	; 0xff
 8002284:	4013      	ands	r3, r2
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <TIM_TI3_SetConfig+0x7c>)
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	021a      	lsls	r2, r3, #8
 8002298:	23a0      	movs	r3, #160	; 0xa0
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	4013      	ands	r3, r2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	621a      	str	r2, [r3, #32]
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b006      	add	sp, #24
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	fffffeff 	.word	0xfffffeff
 80022bc:	fffff5ff 	.word	0xfffff5ff

080022c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a1a      	ldr	r2, [pc, #104]	; (800233c <TIM_TI4_SetConfig+0x7c>)
 80022d4:	401a      	ands	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	4a15      	ldr	r2, [pc, #84]	; (8002340 <TIM_TI4_SetConfig+0x80>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <TIM_TI4_SetConfig+0x84>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	031b      	lsls	r3, r3, #12
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	0c1b      	lsrs	r3, r3, #16
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <TIM_TI4_SetConfig+0x88>)
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	031a      	lsls	r2, r3, #12
 800231a:	23a0      	movs	r3, #160	; 0xa0
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	4013      	ands	r3, r2
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	621a      	str	r2, [r3, #32]
}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b006      	add	sp, #24
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	ffffefff 	.word	0xffffefff
 8002340:	fffffcff 	.word	0xfffffcff
 8002344:	ffff0fff 	.word	0xffff0fff
 8002348:	ffff5fff 	.word	0xffff5fff

0800234c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2270      	movs	r2, #112	; 0x70
 8002360:	4393      	bics	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	2207      	movs	r2, #7
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	609a      	str	r2, [r3, #8]
}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b004      	add	sp, #16
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <TIM_ETR_SetConfig+0x3c>)
 8002398:	4013      	ands	r3, r2
 800239a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	021a      	lsls	r2, r3, #8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	609a      	str	r2, [r3, #8]
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b006      	add	sp, #24
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	ffff00ff 	.word	0xffff00ff

080023c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	223c      	movs	r2, #60	; 0x3c
 80023ce:	5c9b      	ldrb	r3, [r3, r2]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e047      	b.n	8002468 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	223c      	movs	r2, #60	; 0x3c
 80023dc:	2101      	movs	r1, #1
 80023de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	223d      	movs	r2, #61	; 0x3d
 80023e4:	2102      	movs	r1, #2
 80023e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2270      	movs	r2, #112	; 0x70
 80023fc:	4393      	bics	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a16      	ldr	r2, [pc, #88]	; (8002470 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00f      	beq.n	800243c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	05db      	lsls	r3, r3, #23
 8002424:	429a      	cmp	r2, r3
 8002426:	d009      	beq.n	800243c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a11      	ldr	r2, [pc, #68]	; (8002474 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d004      	beq.n	800243c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a10      	ldr	r2, [pc, #64]	; (8002478 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d10c      	bne.n	8002456 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	4393      	bics	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4313      	orrs	r3, r2
 800244c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	223d      	movs	r2, #61	; 0x3d
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	223c      	movs	r2, #60	; 0x3c
 8002462:	2100      	movs	r1, #0
 8002464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b004      	add	sp, #16
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40000400 	.word	0x40000400
 8002478:	40014000 	.word	0x40014000

0800247c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e044      	b.n	8002538 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2270      	movs	r2, #112	; 0x70
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7fe f8f5 	bl	80006b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2224      	movs	r2, #36	; 0x24
 80024ca:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2101      	movs	r1, #1
 80024d8:	438a      	bics	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 fa24 	bl	800292c <UART_SetConfig>
 80024e4:	0003      	movs	r3, r0
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e024      	b.n	8002538 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 fb9d 	bl	8002c38 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	490d      	ldr	r1, [pc, #52]	; (8002540 <HAL_UART_Init+0xa4>)
 800250a:	400a      	ands	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	212a      	movs	r1, #42	; 0x2a
 800251a:	438a      	bics	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 fc35 	bl	8002da0 <UART_CheckIdleState>
 8002536:	0003      	movs	r3, r0
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}
 8002540:	ffffb7ff 	.word	0xffffb7ff

08002544 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	1dbb      	adds	r3, r7, #6
 8002552:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002558:	2b20      	cmp	r3, #32
 800255a:	d000      	beq.n	800255e <HAL_UART_Transmit+0x1a>
 800255c:	e095      	b.n	800268a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_UART_Transmit+0x28>
 8002564:	1dbb      	adds	r3, r7, #6
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e08d      	b.n	800268c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	015b      	lsls	r3, r3, #5
 8002578:	429a      	cmp	r2, r3
 800257a:	d109      	bne.n	8002590 <HAL_UART_Transmit+0x4c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2201      	movs	r2, #1
 8002588:	4013      	ands	r3, r2
 800258a:	d001      	beq.n	8002590 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e07d      	b.n	800268c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2270      	movs	r2, #112	; 0x70
 8002594:	5c9b      	ldrb	r3, [r3, r2]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_UART_Transmit+0x5a>
 800259a:	2302      	movs	r3, #2
 800259c:	e076      	b.n	800268c <HAL_UART_Transmit+0x148>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2270      	movs	r2, #112	; 0x70
 80025a2:	2101      	movs	r1, #1
 80025a4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2221      	movs	r2, #33	; 0x21
 80025b0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80025b2:	f7fe f9a3 	bl	80008fc <HAL_GetTick>
 80025b6:	0003      	movs	r3, r0
 80025b8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1dba      	adds	r2, r7, #6
 80025be:	2150      	movs	r1, #80	; 0x50
 80025c0:	8812      	ldrh	r2, [r2, #0]
 80025c2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1dba      	adds	r2, r7, #6
 80025c8:	2152      	movs	r1, #82	; 0x52
 80025ca:	8812      	ldrh	r2, [r2, #0]
 80025cc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	015b      	lsls	r3, r3, #5
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d108      	bne.n	80025ec <HAL_UART_Transmit+0xa8>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d104      	bne.n	80025ec <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e003      	b.n	80025f4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025f4:	e02d      	b.n	8002652 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	0013      	movs	r3, r2
 8002600:	2200      	movs	r2, #0
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	f000 fc12 	bl	8002e2c <UART_WaitOnFlagUntilTimeout>
 8002608:	1e03      	subs	r3, r0, #0
 800260a:	d001      	beq.n	8002610 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e03d      	b.n	800268c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10b      	bne.n	800262e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	881a      	ldrh	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	05d2      	lsls	r2, r2, #23
 8002620:	0dd2      	lsrs	r2, r2, #23
 8002622:	b292      	uxth	r2, r2
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	3302      	adds	r3, #2
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	e008      	b.n	8002640 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	781a      	ldrb	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b292      	uxth	r2, r2
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2252      	movs	r2, #82	; 0x52
 8002644:	5a9b      	ldrh	r3, [r3, r2]
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b299      	uxth	r1, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2252      	movs	r2, #82	; 0x52
 8002650:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2252      	movs	r2, #82	; 0x52
 8002656:	5a9b      	ldrh	r3, [r3, r2]
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1cb      	bne.n	80025f6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	0013      	movs	r3, r2
 8002668:	2200      	movs	r2, #0
 800266a:	2140      	movs	r1, #64	; 0x40
 800266c:	f000 fbde 	bl	8002e2c <UART_WaitOnFlagUntilTimeout>
 8002670:	1e03      	subs	r3, r0, #0
 8002672:	d001      	beq.n	8002678 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e009      	b.n	800268c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2270      	movs	r2, #112	; 0x70
 8002682:	2100      	movs	r1, #0
 8002684:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
  }
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b008      	add	sp, #32
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4a93      	ldr	r2, [pc, #588]	; (8002904 <HAL_UART_IRQHandler+0x270>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d112      	bne.n	80026e8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	2220      	movs	r2, #32
 80026c6:	4013      	ands	r3, r2
 80026c8:	d00e      	beq.n	80026e8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2220      	movs	r2, #32
 80026ce:	4013      	ands	r3, r2
 80026d0:	d00a      	beq.n	80026e8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d100      	bne.n	80026dc <HAL_UART_IRQHandler+0x48>
 80026da:	e10b      	b.n	80028f4 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	0010      	movs	r0, r2
 80026e4:	4798      	blx	r3
      }
      return;
 80026e6:	e105      	b.n	80028f4 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d100      	bne.n	80026f0 <HAL_UART_IRQHandler+0x5c>
 80026ee:	e0cd      	b.n	800288c <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2201      	movs	r2, #1
 80026f4:	4013      	ands	r3, r2
 80026f6:	d105      	bne.n	8002704 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	2390      	movs	r3, #144	; 0x90
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	d100      	bne.n	8002704 <HAL_UART_IRQHandler+0x70>
 8002702:	e0c3      	b.n	800288c <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2201      	movs	r2, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_UART_IRQHandler+0x96>
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4013      	ands	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002722:	2201      	movs	r2, #1
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_UART_IRQHandler+0xba>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2201      	movs	r2, #1
 8002736:	4013      	ands	r3, r2
 8002738:	d009      	beq.n	800274e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2202      	movs	r2, #2
 8002740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002746:	2204      	movs	r2, #4
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	2204      	movs	r2, #4
 8002752:	4013      	ands	r3, r2
 8002754:	d00d      	beq.n	8002772 <HAL_UART_IRQHandler+0xde>
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2201      	movs	r2, #1
 800275a:	4013      	ands	r3, r2
 800275c:	d009      	beq.n	8002772 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2204      	movs	r2, #4
 8002764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800276a:	2202      	movs	r2, #2
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2208      	movs	r2, #8
 8002776:	4013      	ands	r3, r2
 8002778:	d011      	beq.n	800279e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2220      	movs	r2, #32
 800277e:	4013      	ands	r3, r2
 8002780:	d103      	bne.n	800278a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2201      	movs	r2, #1
 8002786:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002788:	d009      	beq.n	800279e <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2208      	movs	r2, #8
 8002790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002796:	2208      	movs	r2, #8
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	4013      	ands	r3, r2
 80027a6:	d00f      	beq.n	80027c8 <HAL_UART_IRQHandler+0x134>
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	04db      	lsls	r3, r3, #19
 80027ae:	4013      	ands	r3, r2
 80027b0:	d00a      	beq.n	80027c8 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c0:	2220      	movs	r2, #32
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d100      	bne.n	80027d2 <HAL_UART_IRQHandler+0x13e>
 80027d0:	e092      	b.n	80028f8 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	2220      	movs	r2, #32
 80027d6:	4013      	ands	r3, r2
 80027d8:	d00c      	beq.n	80027f4 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2220      	movs	r2, #32
 80027de:	4013      	ands	r3, r2
 80027e0:	d008      	beq.n	80027f4 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	0010      	movs	r0, r2
 80027f2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2240      	movs	r2, #64	; 0x40
 8002802:	4013      	ands	r3, r2
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d003      	beq.n	8002810 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2228      	movs	r2, #40	; 0x28
 800280c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800280e:	d033      	beq.n	8002878 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0018      	movs	r0, r3
 8002814:	f000 fb88 	bl	8002f28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2240      	movs	r2, #64	; 0x40
 8002820:	4013      	ands	r3, r2
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	d123      	bne.n	800286e <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2140      	movs	r1, #64	; 0x40
 8002832:	438a      	bics	r2, r1
 8002834:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d012      	beq.n	8002864 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002842:	4a31      	ldr	r2, [pc, #196]	; (8002908 <HAL_UART_IRQHandler+0x274>)
 8002844:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284a:	0018      	movs	r0, r3
 800284c:	f7fe f93e 	bl	8000acc <HAL_DMA_Abort_IT>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d019      	beq.n	8002888 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285e:	0018      	movs	r0, r3
 8002860:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002862:	e011      	b.n	8002888 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f858 	bl	800291c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286c:	e00c      	b.n	8002888 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 f853 	bl	800291c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002876:	e007      	b.n	8002888 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f84e 	bl	800291c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002886:	e037      	b.n	80028f8 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002888:	46c0      	nop			; (mov r8, r8)
    return;
 800288a:	e035      	b.n	80028f8 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	035b      	lsls	r3, r3, #13
 8002892:	4013      	ands	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_UART_IRQHandler+0x220>
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	03db      	lsls	r3, r3, #15
 800289c:	4013      	ands	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2280      	movs	r2, #128	; 0x80
 80028a6:	0352      	lsls	r2, r2, #13
 80028a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 fb8c 	bl	8002fca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80028b2:	e024      	b.n	80028fe <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	4013      	ands	r3, r2
 80028ba:	d00d      	beq.n	80028d8 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	4013      	ands	r3, r2
 80028c2:	d009      	beq.n	80028d8 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d017      	beq.n	80028fc <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	0010      	movs	r0, r2
 80028d4:	4798      	blx	r3
    }
    return;
 80028d6:	e011      	b.n	80028fc <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2240      	movs	r2, #64	; 0x40
 80028dc:	4013      	ands	r3, r2
 80028de:	d00e      	beq.n	80028fe <HAL_UART_IRQHandler+0x26a>
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2240      	movs	r2, #64	; 0x40
 80028e4:	4013      	ands	r3, r2
 80028e6:	d00a      	beq.n	80028fe <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 fb53 	bl	8002f96 <UART_EndTransmit_IT>
    return;
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	e004      	b.n	80028fe <HAL_UART_IRQHandler+0x26a>
      return;
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	e002      	b.n	80028fe <HAL_UART_IRQHandler+0x26a>
    return;
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	e000      	b.n	80028fe <HAL_UART_IRQHandler+0x26a>
    return;
 80028fc:	46c0      	nop			; (mov r8, r8)
  }

}
 80028fe:	46bd      	mov	sp, r7
 8002900:	b008      	add	sp, #32
 8002902:	bd80      	pop	{r7, pc}
 8002904:	0000080f 	.word	0x0000080f
 8002908:	08002f69 	.word	0x08002f69

0800290c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}

0800292c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002934:	2300      	movs	r3, #0
 8002936:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002938:	2317      	movs	r3, #23
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4aad      	ldr	r2, [pc, #692]	; (8002c14 <UART_SetConfig+0x2e8>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	430a      	orrs	r2, r1
 800296c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4aa8      	ldr	r2, [pc, #672]	; (8002c18 <UART_SetConfig+0x2ec>)
 8002976:	4013      	ands	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a9f      	ldr	r2, [pc, #636]	; (8002c1c <UART_SetConfig+0x2f0>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a9b      	ldr	r2, [pc, #620]	; (8002c20 <UART_SetConfig+0x2f4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d125      	bne.n	8002a02 <UART_SetConfig+0xd6>
 80029b6:	4b9b      	ldr	r3, [pc, #620]	; (8002c24 <UART_SetConfig+0x2f8>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	2203      	movs	r2, #3
 80029bc:	4013      	ands	r3, r2
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d00f      	beq.n	80029e2 <UART_SetConfig+0xb6>
 80029c2:	d304      	bcc.n	80029ce <UART_SetConfig+0xa2>
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d011      	beq.n	80029ec <UART_SetConfig+0xc0>
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d005      	beq.n	80029d8 <UART_SetConfig+0xac>
 80029cc:	e013      	b.n	80029f6 <UART_SetConfig+0xca>
 80029ce:	231f      	movs	r3, #31
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e022      	b.n	8002a1e <UART_SetConfig+0xf2>
 80029d8:	231f      	movs	r3, #31
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2202      	movs	r2, #2
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e01d      	b.n	8002a1e <UART_SetConfig+0xf2>
 80029e2:	231f      	movs	r3, #31
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2204      	movs	r2, #4
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e018      	b.n	8002a1e <UART_SetConfig+0xf2>
 80029ec:	231f      	movs	r3, #31
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2208      	movs	r2, #8
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	e013      	b.n	8002a1e <UART_SetConfig+0xf2>
 80029f6:	231f      	movs	r3, #31
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	2210      	movs	r2, #16
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	e00d      	b.n	8002a1e <UART_SetConfig+0xf2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a88      	ldr	r2, [pc, #544]	; (8002c28 <UART_SetConfig+0x2fc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d104      	bne.n	8002a16 <UART_SetConfig+0xea>
 8002a0c:	231f      	movs	r3, #31
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e003      	b.n	8002a1e <UART_SetConfig+0xf2>
 8002a16:	231f      	movs	r3, #31
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	2210      	movs	r2, #16
 8002a1c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d000      	beq.n	8002a2c <UART_SetConfig+0x100>
 8002a2a:	e07d      	b.n	8002b28 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002a2c:	231f      	movs	r3, #31
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d01c      	beq.n	8002a70 <UART_SetConfig+0x144>
 8002a36:	dc02      	bgt.n	8002a3e <UART_SetConfig+0x112>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <UART_SetConfig+0x11c>
 8002a3c:	e04b      	b.n	8002ad6 <UART_SetConfig+0x1aa>
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d025      	beq.n	8002a8e <UART_SetConfig+0x162>
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d037      	beq.n	8002ab6 <UART_SetConfig+0x18a>
 8002a46:	e046      	b.n	8002ad6 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a48:	f7fe fe6c 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	005a      	lsls	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	18d2      	adds	r2, r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	0019      	movs	r1, r3
 8002a62:	0010      	movs	r0, r2
 8002a64:	f7fd fb50 	bl	8000108 <__udivsi3>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	61bb      	str	r3, [r7, #24]
        break;
 8002a6e:	e037      	b.n	8002ae0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	4a6d      	ldr	r2, [pc, #436]	; (8002c2c <UART_SetConfig+0x300>)
 8002a78:	189a      	adds	r2, r3, r2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	0019      	movs	r1, r3
 8002a80:	0010      	movs	r0, r2
 8002a82:	f7fd fb41 	bl	8000108 <__udivsi3>
 8002a86:	0003      	movs	r3, r0
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	61bb      	str	r3, [r7, #24]
        break;
 8002a8c:	e028      	b.n	8002ae0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a8e:	f7fe fddb 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8002a92:	0003      	movs	r3, r0
 8002a94:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	005a      	lsls	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	18d2      	adds	r2, r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	0010      	movs	r0, r2
 8002aaa:	f7fd fb2d 	bl	8000108 <__udivsi3>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	61bb      	str	r3, [r7, #24]
        break;
 8002ab4:	e014      	b.n	8002ae0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	0252      	lsls	r2, r2, #9
 8002ac0:	189a      	adds	r2, r3, r2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	0010      	movs	r0, r2
 8002aca:	f7fd fb1d 	bl	8000108 <__udivsi3>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	61bb      	str	r3, [r7, #24]
        break;
 8002ad4:	e004      	b.n	8002ae0 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8002ad6:	2317      	movs	r3, #23
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
        break;
 8002ade:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b0f      	cmp	r3, #15
 8002ae4:	d91b      	bls.n	8002b1e <UART_SetConfig+0x1f2>
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	4a51      	ldr	r2, [pc, #324]	; (8002c30 <UART_SetConfig+0x304>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d817      	bhi.n	8002b1e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	200a      	movs	r0, #10
 8002af4:	183b      	adds	r3, r7, r0
 8002af6:	210f      	movs	r1, #15
 8002af8:	438a      	bics	r2, r1
 8002afa:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2207      	movs	r2, #7
 8002b04:	4013      	ands	r3, r2
 8002b06:	b299      	uxth	r1, r3
 8002b08:	183b      	adds	r3, r7, r0
 8002b0a:	183a      	adds	r2, r7, r0
 8002b0c:	8812      	ldrh	r2, [r2, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	183a      	adds	r2, r7, r0
 8002b18:	8812      	ldrh	r2, [r2, #0]
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	e06c      	b.n	8002bf8 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002b1e:	2317      	movs	r3, #23
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e067      	b.n	8002bf8 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002b28:	231f      	movs	r3, #31
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d01b      	beq.n	8002b6a <UART_SetConfig+0x23e>
 8002b32:	dc02      	bgt.n	8002b3a <UART_SetConfig+0x20e>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <UART_SetConfig+0x218>
 8002b38:	e049      	b.n	8002bce <UART_SetConfig+0x2a2>
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d024      	beq.n	8002b88 <UART_SetConfig+0x25c>
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d035      	beq.n	8002bae <UART_SetConfig+0x282>
 8002b42:	e044      	b.n	8002bce <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b44:	f7fe fdee 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	085a      	lsrs	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	18d2      	adds	r2, r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	f7fd fad3 	bl	8000108 <__udivsi3>
 8002b62:	0003      	movs	r3, r0
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	61bb      	str	r3, [r7, #24]
        break;
 8002b68:	e036      	b.n	8002bd8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	4a30      	ldr	r2, [pc, #192]	; (8002c34 <UART_SetConfig+0x308>)
 8002b72:	189a      	adds	r2, r3, r2
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0019      	movs	r1, r3
 8002b7a:	0010      	movs	r0, r2
 8002b7c:	f7fd fac4 	bl	8000108 <__udivsi3>
 8002b80:	0003      	movs	r3, r0
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	61bb      	str	r3, [r7, #24]
        break;
 8002b86:	e027      	b.n	8002bd8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b88:	f7fe fd5e 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	085a      	lsrs	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	18d2      	adds	r2, r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	0010      	movs	r0, r2
 8002ba2:	f7fd fab1 	bl	8000108 <__udivsi3>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	61bb      	str	r3, [r7, #24]
        break;
 8002bac:	e014      	b.n	8002bd8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	2280      	movs	r2, #128	; 0x80
 8002bb6:	0212      	lsls	r2, r2, #8
 8002bb8:	189a      	adds	r2, r3, r2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	0010      	movs	r0, r2
 8002bc2:	f7fd faa1 	bl	8000108 <__udivsi3>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	61bb      	str	r3, [r7, #24]
        break;
 8002bcc:	e004      	b.n	8002bd8 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8002bce:	2317      	movs	r3, #23
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
        break;
 8002bd6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b0f      	cmp	r3, #15
 8002bdc:	d908      	bls.n	8002bf0 <UART_SetConfig+0x2c4>
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <UART_SetConfig+0x304>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d804      	bhi.n	8002bf0 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	e003      	b.n	8002bf8 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002bf0:	2317      	movs	r3, #23
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002c04:	2317      	movs	r3, #23
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	781b      	ldrb	r3, [r3, #0]
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b008      	add	sp, #32
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	ffff69f3 	.word	0xffff69f3
 8002c18:	ffffcfff 	.word	0xffffcfff
 8002c1c:	fffff4ff 	.word	0xfffff4ff
 8002c20:	40013800 	.word	0x40013800
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40004400 	.word	0x40004400
 8002c2c:	00f42400 	.word	0x00f42400
 8002c30:	0000ffff 	.word	0x0000ffff
 8002c34:	007a1200 	.word	0x007a1200

08002c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	2201      	movs	r2, #1
 8002c46:	4013      	ands	r3, r2
 8002c48:	d00b      	beq.n	8002c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a4a      	ldr	r2, [pc, #296]	; (8002d7c <UART_AdvFeatureConfig+0x144>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	0019      	movs	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	2202      	movs	r2, #2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d00b      	beq.n	8002c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4a43      	ldr	r2, [pc, #268]	; (8002d80 <UART_AdvFeatureConfig+0x148>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	0019      	movs	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2204      	movs	r2, #4
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d00b      	beq.n	8002ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a3b      	ldr	r2, [pc, #236]	; (8002d84 <UART_AdvFeatureConfig+0x14c>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	2208      	movs	r2, #8
 8002cac:	4013      	ands	r3, r2
 8002cae:	d00b      	beq.n	8002cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <UART_AdvFeatureConfig+0x150>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2210      	movs	r2, #16
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d00b      	beq.n	8002cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <UART_AdvFeatureConfig+0x154>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2220      	movs	r2, #32
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d00b      	beq.n	8002d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	4a25      	ldr	r2, [pc, #148]	; (8002d90 <UART_AdvFeatureConfig+0x158>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	0019      	movs	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2240      	movs	r2, #64	; 0x40
 8002d12:	4013      	ands	r3, r2
 8002d14:	d01d      	beq.n	8002d52 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <UART_AdvFeatureConfig+0x15c>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	035b      	lsls	r3, r3, #13
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d10b      	bne.n	8002d52 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <UART_AdvFeatureConfig+0x160>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d00b      	beq.n	8002d74 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <UART_AdvFeatureConfig+0x164>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]
  }
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b002      	add	sp, #8
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	fffdffff 	.word	0xfffdffff
 8002d80:	fffeffff 	.word	0xfffeffff
 8002d84:	fffbffff 	.word	0xfffbffff
 8002d88:	ffff7fff 	.word	0xffff7fff
 8002d8c:	ffffefff 	.word	0xffffefff
 8002d90:	ffffdfff 	.word	0xffffdfff
 8002d94:	ffefffff 	.word	0xffefffff
 8002d98:	ff9fffff 	.word	0xff9fffff
 8002d9c:	fff7ffff 	.word	0xfff7ffff

08002da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002dae:	f7fd fda5 	bl	80008fc <HAL_GetTick>
 8002db2:	0003      	movs	r3, r0
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d10d      	bne.n	8002de0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	0399      	lsls	r1, r3, #14
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <UART_CheckIdleState+0x88>)
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	0013      	movs	r3, r2
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f000 f82a 	bl	8002e2c <UART_WaitOnFlagUntilTimeout>
 8002dd8:	1e03      	subs	r3, r0, #0
 8002dda:	d001      	beq.n	8002de0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e01f      	b.n	8002e20 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2204      	movs	r2, #4
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d10d      	bne.n	8002e0a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	03d9      	lsls	r1, r3, #15
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <UART_CheckIdleState+0x88>)
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	0013      	movs	r3, r2
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f000 f815 	bl	8002e2c <UART_WaitOnFlagUntilTimeout>
 8002e02:	1e03      	subs	r3, r0, #0
 8002e04:	d001      	beq.n	8002e0a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e00a      	b.n	8002e20 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2270      	movs	r2, #112	; 0x70
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b004      	add	sp, #16
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	01ffffff 	.word	0x01ffffff

08002e2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	1dfb      	adds	r3, r7, #7
 8002e3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e3c:	e05d      	b.n	8002efa <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	3301      	adds	r3, #1
 8002e42:	d05a      	beq.n	8002efa <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e44:	f7fd fd5a 	bl	80008fc <HAL_GetTick>
 8002e48:	0002      	movs	r2, r0
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d302      	bcc.n	8002e5a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d11b      	bne.n	8002e92 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	492f      	ldr	r1, [pc, #188]	; (8002f24 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002e66:	400a      	ands	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2101      	movs	r1, #1
 8002e76:	438a      	bics	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2270      	movs	r2, #112	; 0x70
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e043      	b.n	8002f1a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d02d      	beq.n	8002efa <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d123      	bne.n	8002efa <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	0112      	lsls	r2, r2, #4
 8002eba:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4917      	ldr	r1, [pc, #92]	; (8002f24 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002ec8:	400a      	ands	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	438a      	bics	r2, r1
 8002eda:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2270      	movs	r2, #112	; 0x70
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e00f      	b.n	8002f1a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	4013      	ands	r3, r2
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	425a      	negs	r2, r3
 8002f0a:	4153      	adcs	r3, r2
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	001a      	movs	r2, r3
 8002f10:	1dfb      	adds	r3, r7, #7
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d092      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b004      	add	sp, #16
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	fffffe5f 	.word	0xfffffe5f

08002f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	490a      	ldr	r1, [pc, #40]	; (8002f64 <UART_EndRxTransfer+0x3c>)
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	438a      	bics	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	fffffedf 	.word	0xfffffedf

08002f68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	225a      	movs	r2, #90	; 0x5a
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2252      	movs	r2, #82	; 0x52
 8002f82:	2100      	movs	r1, #0
 8002f84:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7ff fcc7 	bl	800291c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2140      	movs	r1, #64	; 0x40
 8002faa:	438a      	bics	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff fca5 	bl	800290c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b002      	add	sp, #8
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <__libc_init_array>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	2600      	movs	r6, #0
 8002fe0:	4d0c      	ldr	r5, [pc, #48]	; (8003014 <__libc_init_array+0x38>)
 8002fe2:	4c0d      	ldr	r4, [pc, #52]	; (8003018 <__libc_init_array+0x3c>)
 8002fe4:	1b64      	subs	r4, r4, r5
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	42a6      	cmp	r6, r4
 8002fea:	d109      	bne.n	8003000 <__libc_init_array+0x24>
 8002fec:	2600      	movs	r6, #0
 8002fee:	f000 f821 	bl	8003034 <_init>
 8002ff2:	4d0a      	ldr	r5, [pc, #40]	; (800301c <__libc_init_array+0x40>)
 8002ff4:	4c0a      	ldr	r4, [pc, #40]	; (8003020 <__libc_init_array+0x44>)
 8002ff6:	1b64      	subs	r4, r4, r5
 8002ff8:	10a4      	asrs	r4, r4, #2
 8002ffa:	42a6      	cmp	r6, r4
 8002ffc:	d105      	bne.n	800300a <__libc_init_array+0x2e>
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	00b3      	lsls	r3, r6, #2
 8003002:	58eb      	ldr	r3, [r5, r3]
 8003004:	4798      	blx	r3
 8003006:	3601      	adds	r6, #1
 8003008:	e7ee      	b.n	8002fe8 <__libc_init_array+0xc>
 800300a:	00b3      	lsls	r3, r6, #2
 800300c:	58eb      	ldr	r3, [r5, r3]
 800300e:	4798      	blx	r3
 8003010:	3601      	adds	r6, #1
 8003012:	e7f2      	b.n	8002ffa <__libc_init_array+0x1e>
 8003014:	08003084 	.word	0x08003084
 8003018:	08003084 	.word	0x08003084
 800301c:	08003084 	.word	0x08003084
 8003020:	08003088 	.word	0x08003088

08003024 <memset>:
 8003024:	0003      	movs	r3, r0
 8003026:	1812      	adds	r2, r2, r0
 8003028:	4293      	cmp	r3, r2
 800302a:	d100      	bne.n	800302e <memset+0xa>
 800302c:	4770      	bx	lr
 800302e:	7019      	strb	r1, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	e7f9      	b.n	8003028 <memset+0x4>

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
