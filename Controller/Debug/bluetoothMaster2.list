
bluetoothMaster2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004abc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb4  08004bb4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004bb4  08004bb4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bb4  08004bb4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000010  08004bcc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08004bcc  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df1d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000228f  00000000  00000000  0002df55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  000301e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  00030f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000032dd  00000000  00000000  00031bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bde4  00000000  00000000  00034e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005aa3b  00000000  00000000  00040c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009b6ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d4  00000000  00000000  0009b728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b64 	.word	0x08004b64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004b64 	.word	0x08004b64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 fbfb 	bl	8000a24 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fb59 	bl	80008ec <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 f80a 	bl	800025c <__aeabi_dsub>
 8000248:	f000 fb50 	bl	80008ec <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dsub>:
 800025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	000c      	movs	r4, r1
 8000268:	0309      	lsls	r1, r1, #12
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0a49      	lsrs	r1, r1, #9
 800026e:	0f46      	lsrs	r6, r0, #29
 8000270:	005f      	lsls	r7, r3, #1
 8000272:	4331      	orrs	r1, r6
 8000274:	031e      	lsls	r6, r3, #12
 8000276:	0fdb      	lsrs	r3, r3, #31
 8000278:	0a76      	lsrs	r6, r6, #9
 800027a:	469b      	mov	fp, r3
 800027c:	0f53      	lsrs	r3, r2, #29
 800027e:	4333      	orrs	r3, r6
 8000280:	4ec8      	ldr	r6, [pc, #800]	; (80005a4 <__aeabi_dsub+0x348>)
 8000282:	0065      	lsls	r5, r4, #1
 8000284:	00c0      	lsls	r0, r0, #3
 8000286:	0fe4      	lsrs	r4, r4, #31
 8000288:	00d2      	lsls	r2, r2, #3
 800028a:	0d6d      	lsrs	r5, r5, #21
 800028c:	46a2      	mov	sl, r4
 800028e:	4681      	mov	r9, r0
 8000290:	0d7f      	lsrs	r7, r7, #21
 8000292:	469c      	mov	ip, r3
 8000294:	4690      	mov	r8, r2
 8000296:	42b7      	cmp	r7, r6
 8000298:	d100      	bne.n	800029c <__aeabi_dsub+0x40>
 800029a:	e0b9      	b.n	8000410 <__aeabi_dsub+0x1b4>
 800029c:	465b      	mov	r3, fp
 800029e:	2601      	movs	r6, #1
 80002a0:	4073      	eors	r3, r6
 80002a2:	469b      	mov	fp, r3
 80002a4:	1bee      	subs	r6, r5, r7
 80002a6:	45a3      	cmp	fp, r4
 80002a8:	d100      	bne.n	80002ac <__aeabi_dsub+0x50>
 80002aa:	e083      	b.n	80003b4 <__aeabi_dsub+0x158>
 80002ac:	2e00      	cmp	r6, #0
 80002ae:	dd63      	ble.n	8000378 <__aeabi_dsub+0x11c>
 80002b0:	2f00      	cmp	r7, #0
 80002b2:	d000      	beq.n	80002b6 <__aeabi_dsub+0x5a>
 80002b4:	e0b1      	b.n	800041a <__aeabi_dsub+0x1be>
 80002b6:	4663      	mov	r3, ip
 80002b8:	4313      	orrs	r3, r2
 80002ba:	d100      	bne.n	80002be <__aeabi_dsub+0x62>
 80002bc:	e123      	b.n	8000506 <__aeabi_dsub+0x2aa>
 80002be:	1e73      	subs	r3, r6, #1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d000      	beq.n	80002c6 <__aeabi_dsub+0x6a>
 80002c4:	e1ba      	b.n	800063c <__aeabi_dsub+0x3e0>
 80002c6:	1a86      	subs	r6, r0, r2
 80002c8:	4663      	mov	r3, ip
 80002ca:	42b0      	cmp	r0, r6
 80002cc:	4180      	sbcs	r0, r0
 80002ce:	2501      	movs	r5, #1
 80002d0:	1ac9      	subs	r1, r1, r3
 80002d2:	4240      	negs	r0, r0
 80002d4:	1a09      	subs	r1, r1, r0
 80002d6:	020b      	lsls	r3, r1, #8
 80002d8:	d400      	bmi.n	80002dc <__aeabi_dsub+0x80>
 80002da:	e147      	b.n	800056c <__aeabi_dsub+0x310>
 80002dc:	0249      	lsls	r1, r1, #9
 80002de:	0a4b      	lsrs	r3, r1, #9
 80002e0:	4698      	mov	r8, r3
 80002e2:	4643      	mov	r3, r8
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d100      	bne.n	80002ea <__aeabi_dsub+0x8e>
 80002e8:	e189      	b.n	80005fe <__aeabi_dsub+0x3a2>
 80002ea:	4640      	mov	r0, r8
 80002ec:	f000 fba4 	bl	8000a38 <__clzsi2>
 80002f0:	0003      	movs	r3, r0
 80002f2:	3b08      	subs	r3, #8
 80002f4:	2b1f      	cmp	r3, #31
 80002f6:	dd00      	ble.n	80002fa <__aeabi_dsub+0x9e>
 80002f8:	e17c      	b.n	80005f4 <__aeabi_dsub+0x398>
 80002fa:	2220      	movs	r2, #32
 80002fc:	0030      	movs	r0, r6
 80002fe:	1ad2      	subs	r2, r2, r3
 8000300:	4641      	mov	r1, r8
 8000302:	40d0      	lsrs	r0, r2
 8000304:	4099      	lsls	r1, r3
 8000306:	0002      	movs	r2, r0
 8000308:	409e      	lsls	r6, r3
 800030a:	430a      	orrs	r2, r1
 800030c:	429d      	cmp	r5, r3
 800030e:	dd00      	ble.n	8000312 <__aeabi_dsub+0xb6>
 8000310:	e16a      	b.n	80005e8 <__aeabi_dsub+0x38c>
 8000312:	1b5d      	subs	r5, r3, r5
 8000314:	1c6b      	adds	r3, r5, #1
 8000316:	2b1f      	cmp	r3, #31
 8000318:	dd00      	ble.n	800031c <__aeabi_dsub+0xc0>
 800031a:	e194      	b.n	8000646 <__aeabi_dsub+0x3ea>
 800031c:	2120      	movs	r1, #32
 800031e:	0010      	movs	r0, r2
 8000320:	0035      	movs	r5, r6
 8000322:	1ac9      	subs	r1, r1, r3
 8000324:	408e      	lsls	r6, r1
 8000326:	40da      	lsrs	r2, r3
 8000328:	4088      	lsls	r0, r1
 800032a:	40dd      	lsrs	r5, r3
 800032c:	1e71      	subs	r1, r6, #1
 800032e:	418e      	sbcs	r6, r1
 8000330:	0011      	movs	r1, r2
 8000332:	2207      	movs	r2, #7
 8000334:	4328      	orrs	r0, r5
 8000336:	2500      	movs	r5, #0
 8000338:	4306      	orrs	r6, r0
 800033a:	4032      	ands	r2, r6
 800033c:	2a00      	cmp	r2, #0
 800033e:	d009      	beq.n	8000354 <__aeabi_dsub+0xf8>
 8000340:	230f      	movs	r3, #15
 8000342:	4033      	ands	r3, r6
 8000344:	2b04      	cmp	r3, #4
 8000346:	d005      	beq.n	8000354 <__aeabi_dsub+0xf8>
 8000348:	1d33      	adds	r3, r6, #4
 800034a:	42b3      	cmp	r3, r6
 800034c:	41b6      	sbcs	r6, r6
 800034e:	4276      	negs	r6, r6
 8000350:	1989      	adds	r1, r1, r6
 8000352:	001e      	movs	r6, r3
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	d400      	bmi.n	800035a <__aeabi_dsub+0xfe>
 8000358:	e23d      	b.n	80007d6 <__aeabi_dsub+0x57a>
 800035a:	1c6a      	adds	r2, r5, #1
 800035c:	4b91      	ldr	r3, [pc, #580]	; (80005a4 <__aeabi_dsub+0x348>)
 800035e:	0555      	lsls	r5, r2, #21
 8000360:	0d6d      	lsrs	r5, r5, #21
 8000362:	429a      	cmp	r2, r3
 8000364:	d100      	bne.n	8000368 <__aeabi_dsub+0x10c>
 8000366:	e119      	b.n	800059c <__aeabi_dsub+0x340>
 8000368:	4a8f      	ldr	r2, [pc, #572]	; (80005a8 <__aeabi_dsub+0x34c>)
 800036a:	08f6      	lsrs	r6, r6, #3
 800036c:	400a      	ands	r2, r1
 800036e:	0757      	lsls	r7, r2, #29
 8000370:	0252      	lsls	r2, r2, #9
 8000372:	4337      	orrs	r7, r6
 8000374:	0b12      	lsrs	r2, r2, #12
 8000376:	e09b      	b.n	80004b0 <__aeabi_dsub+0x254>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d000      	beq.n	800037e <__aeabi_dsub+0x122>
 800037c:	e0c5      	b.n	800050a <__aeabi_dsub+0x2ae>
 800037e:	1c6e      	adds	r6, r5, #1
 8000380:	0576      	lsls	r6, r6, #21
 8000382:	0d76      	lsrs	r6, r6, #21
 8000384:	2e01      	cmp	r6, #1
 8000386:	dc00      	bgt.n	800038a <__aeabi_dsub+0x12e>
 8000388:	e148      	b.n	800061c <__aeabi_dsub+0x3c0>
 800038a:	4667      	mov	r7, ip
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	1bcb      	subs	r3, r1, r7
 8000390:	42b0      	cmp	r0, r6
 8000392:	41bf      	sbcs	r7, r7
 8000394:	427f      	negs	r7, r7
 8000396:	46b8      	mov	r8, r7
 8000398:	001f      	movs	r7, r3
 800039a:	4643      	mov	r3, r8
 800039c:	1aff      	subs	r7, r7, r3
 800039e:	003b      	movs	r3, r7
 80003a0:	46b8      	mov	r8, r7
 80003a2:	021b      	lsls	r3, r3, #8
 80003a4:	d500      	bpl.n	80003a8 <__aeabi_dsub+0x14c>
 80003a6:	e15f      	b.n	8000668 <__aeabi_dsub+0x40c>
 80003a8:	4337      	orrs	r7, r6
 80003aa:	d19a      	bne.n	80002e2 <__aeabi_dsub+0x86>
 80003ac:	2200      	movs	r2, #0
 80003ae:	2400      	movs	r4, #0
 80003b0:	2500      	movs	r5, #0
 80003b2:	e079      	b.n	80004a8 <__aeabi_dsub+0x24c>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	dc00      	bgt.n	80003ba <__aeabi_dsub+0x15e>
 80003b8:	e0fa      	b.n	80005b0 <__aeabi_dsub+0x354>
 80003ba:	2f00      	cmp	r7, #0
 80003bc:	d100      	bne.n	80003c0 <__aeabi_dsub+0x164>
 80003be:	e08d      	b.n	80004dc <__aeabi_dsub+0x280>
 80003c0:	4b78      	ldr	r3, [pc, #480]	; (80005a4 <__aeabi_dsub+0x348>)
 80003c2:	429d      	cmp	r5, r3
 80003c4:	d067      	beq.n	8000496 <__aeabi_dsub+0x23a>
 80003c6:	2380      	movs	r3, #128	; 0x80
 80003c8:	4667      	mov	r7, ip
 80003ca:	041b      	lsls	r3, r3, #16
 80003cc:	431f      	orrs	r7, r3
 80003ce:	46bc      	mov	ip, r7
 80003d0:	2e38      	cmp	r6, #56	; 0x38
 80003d2:	dc00      	bgt.n	80003d6 <__aeabi_dsub+0x17a>
 80003d4:	e152      	b.n	800067c <__aeabi_dsub+0x420>
 80003d6:	4663      	mov	r3, ip
 80003d8:	4313      	orrs	r3, r2
 80003da:	1e5a      	subs	r2, r3, #1
 80003dc:	4193      	sbcs	r3, r2
 80003de:	181e      	adds	r6, r3, r0
 80003e0:	4286      	cmp	r6, r0
 80003e2:	4180      	sbcs	r0, r0
 80003e4:	4240      	negs	r0, r0
 80003e6:	1809      	adds	r1, r1, r0
 80003e8:	020b      	lsls	r3, r1, #8
 80003ea:	d400      	bmi.n	80003ee <__aeabi_dsub+0x192>
 80003ec:	e0be      	b.n	800056c <__aeabi_dsub+0x310>
 80003ee:	4b6d      	ldr	r3, [pc, #436]	; (80005a4 <__aeabi_dsub+0x348>)
 80003f0:	3501      	adds	r5, #1
 80003f2:	429d      	cmp	r5, r3
 80003f4:	d100      	bne.n	80003f8 <__aeabi_dsub+0x19c>
 80003f6:	e0d2      	b.n	800059e <__aeabi_dsub+0x342>
 80003f8:	4a6b      	ldr	r2, [pc, #428]	; (80005a8 <__aeabi_dsub+0x34c>)
 80003fa:	0873      	lsrs	r3, r6, #1
 80003fc:	400a      	ands	r2, r1
 80003fe:	2101      	movs	r1, #1
 8000400:	400e      	ands	r6, r1
 8000402:	431e      	orrs	r6, r3
 8000404:	0851      	lsrs	r1, r2, #1
 8000406:	07d3      	lsls	r3, r2, #31
 8000408:	2207      	movs	r2, #7
 800040a:	431e      	orrs	r6, r3
 800040c:	4032      	ands	r2, r6
 800040e:	e795      	b.n	800033c <__aeabi_dsub+0xe0>
 8000410:	001e      	movs	r6, r3
 8000412:	4316      	orrs	r6, r2
 8000414:	d000      	beq.n	8000418 <__aeabi_dsub+0x1bc>
 8000416:	e745      	b.n	80002a4 <__aeabi_dsub+0x48>
 8000418:	e740      	b.n	800029c <__aeabi_dsub+0x40>
 800041a:	4b62      	ldr	r3, [pc, #392]	; (80005a4 <__aeabi_dsub+0x348>)
 800041c:	429d      	cmp	r5, r3
 800041e:	d03a      	beq.n	8000496 <__aeabi_dsub+0x23a>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	4667      	mov	r7, ip
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	431f      	orrs	r7, r3
 8000428:	46bc      	mov	ip, r7
 800042a:	2e38      	cmp	r6, #56	; 0x38
 800042c:	dd00      	ble.n	8000430 <__aeabi_dsub+0x1d4>
 800042e:	e0eb      	b.n	8000608 <__aeabi_dsub+0x3ac>
 8000430:	2e1f      	cmp	r6, #31
 8000432:	dc00      	bgt.n	8000436 <__aeabi_dsub+0x1da>
 8000434:	e13a      	b.n	80006ac <__aeabi_dsub+0x450>
 8000436:	0033      	movs	r3, r6
 8000438:	4667      	mov	r7, ip
 800043a:	3b20      	subs	r3, #32
 800043c:	40df      	lsrs	r7, r3
 800043e:	003b      	movs	r3, r7
 8000440:	2e20      	cmp	r6, #32
 8000442:	d005      	beq.n	8000450 <__aeabi_dsub+0x1f4>
 8000444:	2740      	movs	r7, #64	; 0x40
 8000446:	1bbf      	subs	r7, r7, r6
 8000448:	4666      	mov	r6, ip
 800044a:	40be      	lsls	r6, r7
 800044c:	4332      	orrs	r2, r6
 800044e:	4690      	mov	r8, r2
 8000450:	4646      	mov	r6, r8
 8000452:	1e72      	subs	r2, r6, #1
 8000454:	4196      	sbcs	r6, r2
 8000456:	4333      	orrs	r3, r6
 8000458:	e0da      	b.n	8000610 <__aeabi_dsub+0x3b4>
 800045a:	2b00      	cmp	r3, #0
 800045c:	d100      	bne.n	8000460 <__aeabi_dsub+0x204>
 800045e:	e214      	b.n	800088a <__aeabi_dsub+0x62e>
 8000460:	4663      	mov	r3, ip
 8000462:	4313      	orrs	r3, r2
 8000464:	d100      	bne.n	8000468 <__aeabi_dsub+0x20c>
 8000466:	e168      	b.n	800073a <__aeabi_dsub+0x4de>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	074e      	lsls	r6, r1, #29
 800046c:	08c0      	lsrs	r0, r0, #3
 800046e:	08c9      	lsrs	r1, r1, #3
 8000470:	031b      	lsls	r3, r3, #12
 8000472:	4306      	orrs	r6, r0
 8000474:	4219      	tst	r1, r3
 8000476:	d008      	beq.n	800048a <__aeabi_dsub+0x22e>
 8000478:	4660      	mov	r0, ip
 800047a:	08c0      	lsrs	r0, r0, #3
 800047c:	4218      	tst	r0, r3
 800047e:	d104      	bne.n	800048a <__aeabi_dsub+0x22e>
 8000480:	4663      	mov	r3, ip
 8000482:	0001      	movs	r1, r0
 8000484:	08d2      	lsrs	r2, r2, #3
 8000486:	075e      	lsls	r6, r3, #29
 8000488:	4316      	orrs	r6, r2
 800048a:	00f3      	lsls	r3, r6, #3
 800048c:	4699      	mov	r9, r3
 800048e:	00c9      	lsls	r1, r1, #3
 8000490:	0f72      	lsrs	r2, r6, #29
 8000492:	4d44      	ldr	r5, [pc, #272]	; (80005a4 <__aeabi_dsub+0x348>)
 8000494:	4311      	orrs	r1, r2
 8000496:	464b      	mov	r3, r9
 8000498:	08de      	lsrs	r6, r3, #3
 800049a:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <__aeabi_dsub+0x348>)
 800049c:	074f      	lsls	r7, r1, #29
 800049e:	4337      	orrs	r7, r6
 80004a0:	08ca      	lsrs	r2, r1, #3
 80004a2:	429d      	cmp	r5, r3
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dsub+0x24c>
 80004a6:	e06e      	b.n	8000586 <__aeabi_dsub+0x32a>
 80004a8:	0312      	lsls	r2, r2, #12
 80004aa:	056d      	lsls	r5, r5, #21
 80004ac:	0b12      	lsrs	r2, r2, #12
 80004ae:	0d6d      	lsrs	r5, r5, #21
 80004b0:	2100      	movs	r1, #0
 80004b2:	0312      	lsls	r2, r2, #12
 80004b4:	0b13      	lsrs	r3, r2, #12
 80004b6:	0d0a      	lsrs	r2, r1, #20
 80004b8:	0512      	lsls	r2, r2, #20
 80004ba:	431a      	orrs	r2, r3
 80004bc:	4b3b      	ldr	r3, [pc, #236]	; (80005ac <__aeabi_dsub+0x350>)
 80004be:	052d      	lsls	r5, r5, #20
 80004c0:	4013      	ands	r3, r2
 80004c2:	432b      	orrs	r3, r5
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	07e4      	lsls	r4, r4, #31
 80004c8:	085b      	lsrs	r3, r3, #1
 80004ca:	4323      	orrs	r3, r4
 80004cc:	0038      	movs	r0, r7
 80004ce:	0019      	movs	r1, r3
 80004d0:	bc3c      	pop	{r2, r3, r4, r5}
 80004d2:	4690      	mov	r8, r2
 80004d4:	4699      	mov	r9, r3
 80004d6:	46a2      	mov	sl, r4
 80004d8:	46ab      	mov	fp, r5
 80004da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004dc:	4663      	mov	r3, ip
 80004de:	4313      	orrs	r3, r2
 80004e0:	d011      	beq.n	8000506 <__aeabi_dsub+0x2aa>
 80004e2:	1e73      	subs	r3, r6, #1
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d000      	beq.n	80004ea <__aeabi_dsub+0x28e>
 80004e8:	e107      	b.n	80006fa <__aeabi_dsub+0x49e>
 80004ea:	1886      	adds	r6, r0, r2
 80004ec:	4286      	cmp	r6, r0
 80004ee:	4180      	sbcs	r0, r0
 80004f0:	4461      	add	r1, ip
 80004f2:	4240      	negs	r0, r0
 80004f4:	1809      	adds	r1, r1, r0
 80004f6:	2501      	movs	r5, #1
 80004f8:	020b      	lsls	r3, r1, #8
 80004fa:	d537      	bpl.n	800056c <__aeabi_dsub+0x310>
 80004fc:	2502      	movs	r5, #2
 80004fe:	e77b      	b.n	80003f8 <__aeabi_dsub+0x19c>
 8000500:	003e      	movs	r6, r7
 8000502:	4661      	mov	r1, ip
 8000504:	4691      	mov	r9, r2
 8000506:	0035      	movs	r5, r6
 8000508:	e7c5      	b.n	8000496 <__aeabi_dsub+0x23a>
 800050a:	465c      	mov	r4, fp
 800050c:	2d00      	cmp	r5, #0
 800050e:	d000      	beq.n	8000512 <__aeabi_dsub+0x2b6>
 8000510:	e0e1      	b.n	80006d6 <__aeabi_dsub+0x47a>
 8000512:	000b      	movs	r3, r1
 8000514:	4303      	orrs	r3, r0
 8000516:	d0f3      	beq.n	8000500 <__aeabi_dsub+0x2a4>
 8000518:	1c73      	adds	r3, r6, #1
 800051a:	d100      	bne.n	800051e <__aeabi_dsub+0x2c2>
 800051c:	e1ac      	b.n	8000878 <__aeabi_dsub+0x61c>
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <__aeabi_dsub+0x348>)
 8000520:	429f      	cmp	r7, r3
 8000522:	d100      	bne.n	8000526 <__aeabi_dsub+0x2ca>
 8000524:	e13a      	b.n	800079c <__aeabi_dsub+0x540>
 8000526:	43f3      	mvns	r3, r6
 8000528:	2b38      	cmp	r3, #56	; 0x38
 800052a:	dd00      	ble.n	800052e <__aeabi_dsub+0x2d2>
 800052c:	e16f      	b.n	800080e <__aeabi_dsub+0x5b2>
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dsub+0x2d8>
 8000532:	e18c      	b.n	800084e <__aeabi_dsub+0x5f2>
 8000534:	2520      	movs	r5, #32
 8000536:	000e      	movs	r6, r1
 8000538:	1aed      	subs	r5, r5, r3
 800053a:	40ae      	lsls	r6, r5
 800053c:	46b0      	mov	r8, r6
 800053e:	0006      	movs	r6, r0
 8000540:	46aa      	mov	sl, r5
 8000542:	40de      	lsrs	r6, r3
 8000544:	4645      	mov	r5, r8
 8000546:	4335      	orrs	r5, r6
 8000548:	002e      	movs	r6, r5
 800054a:	4655      	mov	r5, sl
 800054c:	40d9      	lsrs	r1, r3
 800054e:	40a8      	lsls	r0, r5
 8000550:	4663      	mov	r3, ip
 8000552:	1e45      	subs	r5, r0, #1
 8000554:	41a8      	sbcs	r0, r5
 8000556:	1a5b      	subs	r3, r3, r1
 8000558:	469c      	mov	ip, r3
 800055a:	4330      	orrs	r0, r6
 800055c:	1a16      	subs	r6, r2, r0
 800055e:	42b2      	cmp	r2, r6
 8000560:	4192      	sbcs	r2, r2
 8000562:	4663      	mov	r3, ip
 8000564:	4252      	negs	r2, r2
 8000566:	1a99      	subs	r1, r3, r2
 8000568:	003d      	movs	r5, r7
 800056a:	e6b4      	b.n	80002d6 <__aeabi_dsub+0x7a>
 800056c:	2207      	movs	r2, #7
 800056e:	4032      	ands	r2, r6
 8000570:	2a00      	cmp	r2, #0
 8000572:	d000      	beq.n	8000576 <__aeabi_dsub+0x31a>
 8000574:	e6e4      	b.n	8000340 <__aeabi_dsub+0xe4>
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <__aeabi_dsub+0x348>)
 8000578:	08f6      	lsrs	r6, r6, #3
 800057a:	074f      	lsls	r7, r1, #29
 800057c:	4337      	orrs	r7, r6
 800057e:	08ca      	lsrs	r2, r1, #3
 8000580:	429d      	cmp	r5, r3
 8000582:	d000      	beq.n	8000586 <__aeabi_dsub+0x32a>
 8000584:	e790      	b.n	80004a8 <__aeabi_dsub+0x24c>
 8000586:	003b      	movs	r3, r7
 8000588:	4313      	orrs	r3, r2
 800058a:	d100      	bne.n	800058e <__aeabi_dsub+0x332>
 800058c:	e1a6      	b.n	80008dc <__aeabi_dsub+0x680>
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	031b      	lsls	r3, r3, #12
 8000592:	431a      	orrs	r2, r3
 8000594:	0312      	lsls	r2, r2, #12
 8000596:	0b12      	lsrs	r2, r2, #12
 8000598:	4d02      	ldr	r5, [pc, #8]	; (80005a4 <__aeabi_dsub+0x348>)
 800059a:	e789      	b.n	80004b0 <__aeabi_dsub+0x254>
 800059c:	0015      	movs	r5, r2
 800059e:	2200      	movs	r2, #0
 80005a0:	2700      	movs	r7, #0
 80005a2:	e785      	b.n	80004b0 <__aeabi_dsub+0x254>
 80005a4:	000007ff 	.word	0x000007ff
 80005a8:	ff7fffff 	.word	0xff7fffff
 80005ac:	800fffff 	.word	0x800fffff
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d000      	beq.n	80005b6 <__aeabi_dsub+0x35a>
 80005b4:	e0c7      	b.n	8000746 <__aeabi_dsub+0x4ea>
 80005b6:	1c6b      	adds	r3, r5, #1
 80005b8:	055e      	lsls	r6, r3, #21
 80005ba:	0d76      	lsrs	r6, r6, #21
 80005bc:	2e01      	cmp	r6, #1
 80005be:	dc00      	bgt.n	80005c2 <__aeabi_dsub+0x366>
 80005c0:	e0f0      	b.n	80007a4 <__aeabi_dsub+0x548>
 80005c2:	4dc8      	ldr	r5, [pc, #800]	; (80008e4 <__aeabi_dsub+0x688>)
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d100      	bne.n	80005ca <__aeabi_dsub+0x36e>
 80005c8:	e0b9      	b.n	800073e <__aeabi_dsub+0x4e2>
 80005ca:	1885      	adds	r5, r0, r2
 80005cc:	000a      	movs	r2, r1
 80005ce:	4285      	cmp	r5, r0
 80005d0:	4189      	sbcs	r1, r1
 80005d2:	4462      	add	r2, ip
 80005d4:	4249      	negs	r1, r1
 80005d6:	1851      	adds	r1, r2, r1
 80005d8:	2207      	movs	r2, #7
 80005da:	07ce      	lsls	r6, r1, #31
 80005dc:	086d      	lsrs	r5, r5, #1
 80005de:	432e      	orrs	r6, r5
 80005e0:	0849      	lsrs	r1, r1, #1
 80005e2:	4032      	ands	r2, r6
 80005e4:	001d      	movs	r5, r3
 80005e6:	e6a9      	b.n	800033c <__aeabi_dsub+0xe0>
 80005e8:	49bf      	ldr	r1, [pc, #764]	; (80008e8 <__aeabi_dsub+0x68c>)
 80005ea:	1aed      	subs	r5, r5, r3
 80005ec:	4011      	ands	r1, r2
 80005ee:	2207      	movs	r2, #7
 80005f0:	4032      	ands	r2, r6
 80005f2:	e6a3      	b.n	800033c <__aeabi_dsub+0xe0>
 80005f4:	0032      	movs	r2, r6
 80005f6:	3828      	subs	r0, #40	; 0x28
 80005f8:	4082      	lsls	r2, r0
 80005fa:	2600      	movs	r6, #0
 80005fc:	e686      	b.n	800030c <__aeabi_dsub+0xb0>
 80005fe:	0030      	movs	r0, r6
 8000600:	f000 fa1a 	bl	8000a38 <__clzsi2>
 8000604:	3020      	adds	r0, #32
 8000606:	e673      	b.n	80002f0 <__aeabi_dsub+0x94>
 8000608:	4663      	mov	r3, ip
 800060a:	4313      	orrs	r3, r2
 800060c:	1e5a      	subs	r2, r3, #1
 800060e:	4193      	sbcs	r3, r2
 8000610:	1ac6      	subs	r6, r0, r3
 8000612:	42b0      	cmp	r0, r6
 8000614:	4180      	sbcs	r0, r0
 8000616:	4240      	negs	r0, r0
 8000618:	1a09      	subs	r1, r1, r0
 800061a:	e65c      	b.n	80002d6 <__aeabi_dsub+0x7a>
 800061c:	000e      	movs	r6, r1
 800061e:	4667      	mov	r7, ip
 8000620:	4306      	orrs	r6, r0
 8000622:	4317      	orrs	r7, r2
 8000624:	2d00      	cmp	r5, #0
 8000626:	d15e      	bne.n	80006e6 <__aeabi_dsub+0x48a>
 8000628:	2e00      	cmp	r6, #0
 800062a:	d000      	beq.n	800062e <__aeabi_dsub+0x3d2>
 800062c:	e0f3      	b.n	8000816 <__aeabi_dsub+0x5ba>
 800062e:	2f00      	cmp	r7, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_dsub+0x3d8>
 8000632:	e11e      	b.n	8000872 <__aeabi_dsub+0x616>
 8000634:	465c      	mov	r4, fp
 8000636:	4661      	mov	r1, ip
 8000638:	4691      	mov	r9, r2
 800063a:	e72c      	b.n	8000496 <__aeabi_dsub+0x23a>
 800063c:	4fa9      	ldr	r7, [pc, #676]	; (80008e4 <__aeabi_dsub+0x688>)
 800063e:	42be      	cmp	r6, r7
 8000640:	d07b      	beq.n	800073a <__aeabi_dsub+0x4de>
 8000642:	001e      	movs	r6, r3
 8000644:	e6f1      	b.n	800042a <__aeabi_dsub+0x1ce>
 8000646:	0010      	movs	r0, r2
 8000648:	3d1f      	subs	r5, #31
 800064a:	40e8      	lsrs	r0, r5
 800064c:	2b20      	cmp	r3, #32
 800064e:	d003      	beq.n	8000658 <__aeabi_dsub+0x3fc>
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	1acb      	subs	r3, r1, r3
 8000654:	409a      	lsls	r2, r3
 8000656:	4316      	orrs	r6, r2
 8000658:	1e73      	subs	r3, r6, #1
 800065a:	419e      	sbcs	r6, r3
 800065c:	2207      	movs	r2, #7
 800065e:	4306      	orrs	r6, r0
 8000660:	4032      	ands	r2, r6
 8000662:	2100      	movs	r1, #0
 8000664:	2500      	movs	r5, #0
 8000666:	e783      	b.n	8000570 <__aeabi_dsub+0x314>
 8000668:	1a16      	subs	r6, r2, r0
 800066a:	4663      	mov	r3, ip
 800066c:	42b2      	cmp	r2, r6
 800066e:	4180      	sbcs	r0, r0
 8000670:	1a59      	subs	r1, r3, r1
 8000672:	4240      	negs	r0, r0
 8000674:	1a0b      	subs	r3, r1, r0
 8000676:	4698      	mov	r8, r3
 8000678:	465c      	mov	r4, fp
 800067a:	e632      	b.n	80002e2 <__aeabi_dsub+0x86>
 800067c:	2e1f      	cmp	r6, #31
 800067e:	dd00      	ble.n	8000682 <__aeabi_dsub+0x426>
 8000680:	e0ab      	b.n	80007da <__aeabi_dsub+0x57e>
 8000682:	2720      	movs	r7, #32
 8000684:	1bbb      	subs	r3, r7, r6
 8000686:	469a      	mov	sl, r3
 8000688:	4663      	mov	r3, ip
 800068a:	4657      	mov	r7, sl
 800068c:	40bb      	lsls	r3, r7
 800068e:	4699      	mov	r9, r3
 8000690:	0013      	movs	r3, r2
 8000692:	464f      	mov	r7, r9
 8000694:	40f3      	lsrs	r3, r6
 8000696:	431f      	orrs	r7, r3
 8000698:	003b      	movs	r3, r7
 800069a:	4657      	mov	r7, sl
 800069c:	40ba      	lsls	r2, r7
 800069e:	1e57      	subs	r7, r2, #1
 80006a0:	41ba      	sbcs	r2, r7
 80006a2:	4313      	orrs	r3, r2
 80006a4:	4662      	mov	r2, ip
 80006a6:	40f2      	lsrs	r2, r6
 80006a8:	1889      	adds	r1, r1, r2
 80006aa:	e698      	b.n	80003de <__aeabi_dsub+0x182>
 80006ac:	2720      	movs	r7, #32
 80006ae:	1bbb      	subs	r3, r7, r6
 80006b0:	469a      	mov	sl, r3
 80006b2:	4663      	mov	r3, ip
 80006b4:	4657      	mov	r7, sl
 80006b6:	40bb      	lsls	r3, r7
 80006b8:	4699      	mov	r9, r3
 80006ba:	0013      	movs	r3, r2
 80006bc:	464f      	mov	r7, r9
 80006be:	40f3      	lsrs	r3, r6
 80006c0:	431f      	orrs	r7, r3
 80006c2:	003b      	movs	r3, r7
 80006c4:	4657      	mov	r7, sl
 80006c6:	40ba      	lsls	r2, r7
 80006c8:	1e57      	subs	r7, r2, #1
 80006ca:	41ba      	sbcs	r2, r7
 80006cc:	4313      	orrs	r3, r2
 80006ce:	4662      	mov	r2, ip
 80006d0:	40f2      	lsrs	r2, r6
 80006d2:	1a89      	subs	r1, r1, r2
 80006d4:	e79c      	b.n	8000610 <__aeabi_dsub+0x3b4>
 80006d6:	4b83      	ldr	r3, [pc, #524]	; (80008e4 <__aeabi_dsub+0x688>)
 80006d8:	429f      	cmp	r7, r3
 80006da:	d05f      	beq.n	800079c <__aeabi_dsub+0x540>
 80006dc:	2580      	movs	r5, #128	; 0x80
 80006de:	042d      	lsls	r5, r5, #16
 80006e0:	4273      	negs	r3, r6
 80006e2:	4329      	orrs	r1, r5
 80006e4:	e720      	b.n	8000528 <__aeabi_dsub+0x2cc>
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d10c      	bne.n	8000704 <__aeabi_dsub+0x4a8>
 80006ea:	2f00      	cmp	r7, #0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_dsub+0x494>
 80006ee:	e0d0      	b.n	8000892 <__aeabi_dsub+0x636>
 80006f0:	465c      	mov	r4, fp
 80006f2:	4661      	mov	r1, ip
 80006f4:	4691      	mov	r9, r2
 80006f6:	4d7b      	ldr	r5, [pc, #492]	; (80008e4 <__aeabi_dsub+0x688>)
 80006f8:	e6cd      	b.n	8000496 <__aeabi_dsub+0x23a>
 80006fa:	4f7a      	ldr	r7, [pc, #488]	; (80008e4 <__aeabi_dsub+0x688>)
 80006fc:	42be      	cmp	r6, r7
 80006fe:	d01c      	beq.n	800073a <__aeabi_dsub+0x4de>
 8000700:	001e      	movs	r6, r3
 8000702:	e665      	b.n	80003d0 <__aeabi_dsub+0x174>
 8000704:	2f00      	cmp	r7, #0
 8000706:	d018      	beq.n	800073a <__aeabi_dsub+0x4de>
 8000708:	08c0      	lsrs	r0, r0, #3
 800070a:	074e      	lsls	r6, r1, #29
 800070c:	4306      	orrs	r6, r0
 800070e:	2080      	movs	r0, #128	; 0x80
 8000710:	08c9      	lsrs	r1, r1, #3
 8000712:	0300      	lsls	r0, r0, #12
 8000714:	4201      	tst	r1, r0
 8000716:	d008      	beq.n	800072a <__aeabi_dsub+0x4ce>
 8000718:	4663      	mov	r3, ip
 800071a:	08dc      	lsrs	r4, r3, #3
 800071c:	4204      	tst	r4, r0
 800071e:	d104      	bne.n	800072a <__aeabi_dsub+0x4ce>
 8000720:	0021      	movs	r1, r4
 8000722:	46da      	mov	sl, fp
 8000724:	08d2      	lsrs	r2, r2, #3
 8000726:	075e      	lsls	r6, r3, #29
 8000728:	4316      	orrs	r6, r2
 800072a:	00f3      	lsls	r3, r6, #3
 800072c:	4699      	mov	r9, r3
 800072e:	2401      	movs	r4, #1
 8000730:	4653      	mov	r3, sl
 8000732:	00c9      	lsls	r1, r1, #3
 8000734:	0f72      	lsrs	r2, r6, #29
 8000736:	4311      	orrs	r1, r2
 8000738:	401c      	ands	r4, r3
 800073a:	4d6a      	ldr	r5, [pc, #424]	; (80008e4 <__aeabi_dsub+0x688>)
 800073c:	e6ab      	b.n	8000496 <__aeabi_dsub+0x23a>
 800073e:	001d      	movs	r5, r3
 8000740:	2200      	movs	r2, #0
 8000742:	2700      	movs	r7, #0
 8000744:	e6b4      	b.n	80004b0 <__aeabi_dsub+0x254>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d159      	bne.n	80007fe <__aeabi_dsub+0x5a2>
 800074a:	000b      	movs	r3, r1
 800074c:	4303      	orrs	r3, r0
 800074e:	d100      	bne.n	8000752 <__aeabi_dsub+0x4f6>
 8000750:	e6d6      	b.n	8000500 <__aeabi_dsub+0x2a4>
 8000752:	1c73      	adds	r3, r6, #1
 8000754:	d100      	bne.n	8000758 <__aeabi_dsub+0x4fc>
 8000756:	e0b2      	b.n	80008be <__aeabi_dsub+0x662>
 8000758:	4b62      	ldr	r3, [pc, #392]	; (80008e4 <__aeabi_dsub+0x688>)
 800075a:	429f      	cmp	r7, r3
 800075c:	d01e      	beq.n	800079c <__aeabi_dsub+0x540>
 800075e:	43f3      	mvns	r3, r6
 8000760:	2b38      	cmp	r3, #56	; 0x38
 8000762:	dc6f      	bgt.n	8000844 <__aeabi_dsub+0x5e8>
 8000764:	2b1f      	cmp	r3, #31
 8000766:	dd00      	ble.n	800076a <__aeabi_dsub+0x50e>
 8000768:	e097      	b.n	800089a <__aeabi_dsub+0x63e>
 800076a:	2520      	movs	r5, #32
 800076c:	000e      	movs	r6, r1
 800076e:	1aed      	subs	r5, r5, r3
 8000770:	40ae      	lsls	r6, r5
 8000772:	46b0      	mov	r8, r6
 8000774:	0006      	movs	r6, r0
 8000776:	46aa      	mov	sl, r5
 8000778:	40de      	lsrs	r6, r3
 800077a:	4645      	mov	r5, r8
 800077c:	4335      	orrs	r5, r6
 800077e:	002e      	movs	r6, r5
 8000780:	4655      	mov	r5, sl
 8000782:	40a8      	lsls	r0, r5
 8000784:	40d9      	lsrs	r1, r3
 8000786:	1e45      	subs	r5, r0, #1
 8000788:	41a8      	sbcs	r0, r5
 800078a:	448c      	add	ip, r1
 800078c:	4306      	orrs	r6, r0
 800078e:	18b6      	adds	r6, r6, r2
 8000790:	4296      	cmp	r6, r2
 8000792:	4192      	sbcs	r2, r2
 8000794:	4251      	negs	r1, r2
 8000796:	4461      	add	r1, ip
 8000798:	003d      	movs	r5, r7
 800079a:	e625      	b.n	80003e8 <__aeabi_dsub+0x18c>
 800079c:	003d      	movs	r5, r7
 800079e:	4661      	mov	r1, ip
 80007a0:	4691      	mov	r9, r2
 80007a2:	e678      	b.n	8000496 <__aeabi_dsub+0x23a>
 80007a4:	000b      	movs	r3, r1
 80007a6:	4303      	orrs	r3, r0
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	d000      	beq.n	80007ae <__aeabi_dsub+0x552>
 80007ac:	e655      	b.n	800045a <__aeabi_dsub+0x1fe>
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0f5      	beq.n	800079e <__aeabi_dsub+0x542>
 80007b2:	4663      	mov	r3, ip
 80007b4:	4313      	orrs	r3, r2
 80007b6:	d100      	bne.n	80007ba <__aeabi_dsub+0x55e>
 80007b8:	e66d      	b.n	8000496 <__aeabi_dsub+0x23a>
 80007ba:	1886      	adds	r6, r0, r2
 80007bc:	4286      	cmp	r6, r0
 80007be:	4180      	sbcs	r0, r0
 80007c0:	4461      	add	r1, ip
 80007c2:	4240      	negs	r0, r0
 80007c4:	1809      	adds	r1, r1, r0
 80007c6:	2200      	movs	r2, #0
 80007c8:	020b      	lsls	r3, r1, #8
 80007ca:	d400      	bmi.n	80007ce <__aeabi_dsub+0x572>
 80007cc:	e6d0      	b.n	8000570 <__aeabi_dsub+0x314>
 80007ce:	4b46      	ldr	r3, [pc, #280]	; (80008e8 <__aeabi_dsub+0x68c>)
 80007d0:	3501      	adds	r5, #1
 80007d2:	4019      	ands	r1, r3
 80007d4:	e5b2      	b.n	800033c <__aeabi_dsub+0xe0>
 80007d6:	46b1      	mov	r9, r6
 80007d8:	e65d      	b.n	8000496 <__aeabi_dsub+0x23a>
 80007da:	0033      	movs	r3, r6
 80007dc:	4667      	mov	r7, ip
 80007de:	3b20      	subs	r3, #32
 80007e0:	40df      	lsrs	r7, r3
 80007e2:	003b      	movs	r3, r7
 80007e4:	2e20      	cmp	r6, #32
 80007e6:	d005      	beq.n	80007f4 <__aeabi_dsub+0x598>
 80007e8:	2740      	movs	r7, #64	; 0x40
 80007ea:	1bbf      	subs	r7, r7, r6
 80007ec:	4666      	mov	r6, ip
 80007ee:	40be      	lsls	r6, r7
 80007f0:	4332      	orrs	r2, r6
 80007f2:	4690      	mov	r8, r2
 80007f4:	4646      	mov	r6, r8
 80007f6:	1e72      	subs	r2, r6, #1
 80007f8:	4196      	sbcs	r6, r2
 80007fa:	4333      	orrs	r3, r6
 80007fc:	e5ef      	b.n	80003de <__aeabi_dsub+0x182>
 80007fe:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <__aeabi_dsub+0x688>)
 8000800:	429f      	cmp	r7, r3
 8000802:	d0cb      	beq.n	800079c <__aeabi_dsub+0x540>
 8000804:	2580      	movs	r5, #128	; 0x80
 8000806:	042d      	lsls	r5, r5, #16
 8000808:	4273      	negs	r3, r6
 800080a:	4329      	orrs	r1, r5
 800080c:	e7a8      	b.n	8000760 <__aeabi_dsub+0x504>
 800080e:	4308      	orrs	r0, r1
 8000810:	1e41      	subs	r1, r0, #1
 8000812:	4188      	sbcs	r0, r1
 8000814:	e6a2      	b.n	800055c <__aeabi_dsub+0x300>
 8000816:	2f00      	cmp	r7, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dsub+0x5c0>
 800081a:	e63c      	b.n	8000496 <__aeabi_dsub+0x23a>
 800081c:	4663      	mov	r3, ip
 800081e:	1a86      	subs	r6, r0, r2
 8000820:	1acf      	subs	r7, r1, r3
 8000822:	42b0      	cmp	r0, r6
 8000824:	419b      	sbcs	r3, r3
 8000826:	425b      	negs	r3, r3
 8000828:	1afb      	subs	r3, r7, r3
 800082a:	4698      	mov	r8, r3
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	d54e      	bpl.n	80008ce <__aeabi_dsub+0x672>
 8000830:	1a16      	subs	r6, r2, r0
 8000832:	4663      	mov	r3, ip
 8000834:	42b2      	cmp	r2, r6
 8000836:	4192      	sbcs	r2, r2
 8000838:	1a59      	subs	r1, r3, r1
 800083a:	4252      	negs	r2, r2
 800083c:	1a89      	subs	r1, r1, r2
 800083e:	465c      	mov	r4, fp
 8000840:	2200      	movs	r2, #0
 8000842:	e57b      	b.n	800033c <__aeabi_dsub+0xe0>
 8000844:	4301      	orrs	r1, r0
 8000846:	000e      	movs	r6, r1
 8000848:	1e71      	subs	r1, r6, #1
 800084a:	418e      	sbcs	r6, r1
 800084c:	e79f      	b.n	800078e <__aeabi_dsub+0x532>
 800084e:	001d      	movs	r5, r3
 8000850:	000e      	movs	r6, r1
 8000852:	3d20      	subs	r5, #32
 8000854:	40ee      	lsrs	r6, r5
 8000856:	46b0      	mov	r8, r6
 8000858:	2b20      	cmp	r3, #32
 800085a:	d004      	beq.n	8000866 <__aeabi_dsub+0x60a>
 800085c:	2540      	movs	r5, #64	; 0x40
 800085e:	1aeb      	subs	r3, r5, r3
 8000860:	4099      	lsls	r1, r3
 8000862:	4308      	orrs	r0, r1
 8000864:	4681      	mov	r9, r0
 8000866:	4648      	mov	r0, r9
 8000868:	4643      	mov	r3, r8
 800086a:	1e41      	subs	r1, r0, #1
 800086c:	4188      	sbcs	r0, r1
 800086e:	4318      	orrs	r0, r3
 8000870:	e674      	b.n	800055c <__aeabi_dsub+0x300>
 8000872:	2200      	movs	r2, #0
 8000874:	2400      	movs	r4, #0
 8000876:	e617      	b.n	80004a8 <__aeabi_dsub+0x24c>
 8000878:	1a16      	subs	r6, r2, r0
 800087a:	4663      	mov	r3, ip
 800087c:	42b2      	cmp	r2, r6
 800087e:	4192      	sbcs	r2, r2
 8000880:	1a59      	subs	r1, r3, r1
 8000882:	4252      	negs	r2, r2
 8000884:	1a89      	subs	r1, r1, r2
 8000886:	003d      	movs	r5, r7
 8000888:	e525      	b.n	80002d6 <__aeabi_dsub+0x7a>
 800088a:	4661      	mov	r1, ip
 800088c:	4691      	mov	r9, r2
 800088e:	4d15      	ldr	r5, [pc, #84]	; (80008e4 <__aeabi_dsub+0x688>)
 8000890:	e601      	b.n	8000496 <__aeabi_dsub+0x23a>
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	0312      	lsls	r2, r2, #12
 8000898:	e679      	b.n	800058e <__aeabi_dsub+0x332>
 800089a:	001d      	movs	r5, r3
 800089c:	000e      	movs	r6, r1
 800089e:	3d20      	subs	r5, #32
 80008a0:	40ee      	lsrs	r6, r5
 80008a2:	46b0      	mov	r8, r6
 80008a4:	2b20      	cmp	r3, #32
 80008a6:	d004      	beq.n	80008b2 <__aeabi_dsub+0x656>
 80008a8:	2540      	movs	r5, #64	; 0x40
 80008aa:	1aeb      	subs	r3, r5, r3
 80008ac:	4099      	lsls	r1, r3
 80008ae:	4308      	orrs	r0, r1
 80008b0:	4681      	mov	r9, r0
 80008b2:	464e      	mov	r6, r9
 80008b4:	4643      	mov	r3, r8
 80008b6:	1e71      	subs	r1, r6, #1
 80008b8:	418e      	sbcs	r6, r1
 80008ba:	431e      	orrs	r6, r3
 80008bc:	e767      	b.n	800078e <__aeabi_dsub+0x532>
 80008be:	1886      	adds	r6, r0, r2
 80008c0:	4296      	cmp	r6, r2
 80008c2:	419b      	sbcs	r3, r3
 80008c4:	4461      	add	r1, ip
 80008c6:	425b      	negs	r3, r3
 80008c8:	18c9      	adds	r1, r1, r3
 80008ca:	003d      	movs	r5, r7
 80008cc:	e58c      	b.n	80003e8 <__aeabi_dsub+0x18c>
 80008ce:	4647      	mov	r7, r8
 80008d0:	4337      	orrs	r7, r6
 80008d2:	d0ce      	beq.n	8000872 <__aeabi_dsub+0x616>
 80008d4:	2207      	movs	r2, #7
 80008d6:	4641      	mov	r1, r8
 80008d8:	4032      	ands	r2, r6
 80008da:	e649      	b.n	8000570 <__aeabi_dsub+0x314>
 80008dc:	2700      	movs	r7, #0
 80008de:	003a      	movs	r2, r7
 80008e0:	e5e6      	b.n	80004b0 <__aeabi_dsub+0x254>
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	000007ff 	.word	0x000007ff
 80008e8:	ff7fffff 	.word	0xff7fffff

080008ec <__aeabi_d2iz>:
 80008ec:	b530      	push	{r4, r5, lr}
 80008ee:	4d14      	ldr	r5, [pc, #80]	; (8000940 <__aeabi_d2iz+0x54>)
 80008f0:	030a      	lsls	r2, r1, #12
 80008f2:	004b      	lsls	r3, r1, #1
 80008f4:	0b12      	lsrs	r2, r2, #12
 80008f6:	0d5b      	lsrs	r3, r3, #21
 80008f8:	0fc9      	lsrs	r1, r1, #31
 80008fa:	2400      	movs	r4, #0
 80008fc:	42ab      	cmp	r3, r5
 80008fe:	dd11      	ble.n	8000924 <__aeabi_d2iz+0x38>
 8000900:	4c10      	ldr	r4, [pc, #64]	; (8000944 <__aeabi_d2iz+0x58>)
 8000902:	42a3      	cmp	r3, r4
 8000904:	dc10      	bgt.n	8000928 <__aeabi_d2iz+0x3c>
 8000906:	2480      	movs	r4, #128	; 0x80
 8000908:	0364      	lsls	r4, r4, #13
 800090a:	4322      	orrs	r2, r4
 800090c:	4c0e      	ldr	r4, [pc, #56]	; (8000948 <__aeabi_d2iz+0x5c>)
 800090e:	1ae4      	subs	r4, r4, r3
 8000910:	2c1f      	cmp	r4, #31
 8000912:	dd0c      	ble.n	800092e <__aeabi_d2iz+0x42>
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <__aeabi_d2iz+0x60>)
 8000916:	1ac3      	subs	r3, r0, r3
 8000918:	40da      	lsrs	r2, r3
 800091a:	0013      	movs	r3, r2
 800091c:	425c      	negs	r4, r3
 800091e:	2900      	cmp	r1, #0
 8000920:	d100      	bne.n	8000924 <__aeabi_d2iz+0x38>
 8000922:	001c      	movs	r4, r3
 8000924:	0020      	movs	r0, r4
 8000926:	bd30      	pop	{r4, r5, pc}
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <__aeabi_d2iz+0x64>)
 800092a:	18cc      	adds	r4, r1, r3
 800092c:	e7fa      	b.n	8000924 <__aeabi_d2iz+0x38>
 800092e:	4d09      	ldr	r5, [pc, #36]	; (8000954 <__aeabi_d2iz+0x68>)
 8000930:	40e0      	lsrs	r0, r4
 8000932:	46ac      	mov	ip, r5
 8000934:	4463      	add	r3, ip
 8000936:	409a      	lsls	r2, r3
 8000938:	0013      	movs	r3, r2
 800093a:	4303      	orrs	r3, r0
 800093c:	e7ee      	b.n	800091c <__aeabi_d2iz+0x30>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	000003fe 	.word	0x000003fe
 8000944:	0000041d 	.word	0x0000041d
 8000948:	00000433 	.word	0x00000433
 800094c:	00000413 	.word	0x00000413
 8000950:	7fffffff 	.word	0x7fffffff
 8000954:	fffffbed 	.word	0xfffffbed

08000958 <__aeabi_ui2d>:
 8000958:	b510      	push	{r4, lr}
 800095a:	1e04      	subs	r4, r0, #0
 800095c:	d025      	beq.n	80009aa <__aeabi_ui2d+0x52>
 800095e:	f000 f86b 	bl	8000a38 <__clzsi2>
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <__aeabi_ui2d+0x5c>)
 8000964:	1a1b      	subs	r3, r3, r0
 8000966:	055b      	lsls	r3, r3, #21
 8000968:	0d5b      	lsrs	r3, r3, #21
 800096a:	280a      	cmp	r0, #10
 800096c:	dd12      	ble.n	8000994 <__aeabi_ui2d+0x3c>
 800096e:	380b      	subs	r0, #11
 8000970:	4084      	lsls	r4, r0
 8000972:	2200      	movs	r2, #0
 8000974:	0324      	lsls	r4, r4, #12
 8000976:	0b24      	lsrs	r4, r4, #12
 8000978:	2100      	movs	r1, #0
 800097a:	0010      	movs	r0, r2
 800097c:	0324      	lsls	r4, r4, #12
 800097e:	0d0a      	lsrs	r2, r1, #20
 8000980:	0b24      	lsrs	r4, r4, #12
 8000982:	0512      	lsls	r2, r2, #20
 8000984:	4322      	orrs	r2, r4
 8000986:	4c0c      	ldr	r4, [pc, #48]	; (80009b8 <__aeabi_ui2d+0x60>)
 8000988:	051b      	lsls	r3, r3, #20
 800098a:	4022      	ands	r2, r4
 800098c:	4313      	orrs	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	0859      	lsrs	r1, r3, #1
 8000992:	bd10      	pop	{r4, pc}
 8000994:	0002      	movs	r2, r0
 8000996:	0021      	movs	r1, r4
 8000998:	3215      	adds	r2, #21
 800099a:	4091      	lsls	r1, r2
 800099c:	000a      	movs	r2, r1
 800099e:	210b      	movs	r1, #11
 80009a0:	1a08      	subs	r0, r1, r0
 80009a2:	40c4      	lsrs	r4, r0
 80009a4:	0324      	lsls	r4, r4, #12
 80009a6:	0b24      	lsrs	r4, r4, #12
 80009a8:	e7e6      	b.n	8000978 <__aeabi_ui2d+0x20>
 80009aa:	2300      	movs	r3, #0
 80009ac:	2400      	movs	r4, #0
 80009ae:	2200      	movs	r2, #0
 80009b0:	e7e2      	b.n	8000978 <__aeabi_ui2d+0x20>
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	0000041e 	.word	0x0000041e
 80009b8:	800fffff 	.word	0x800fffff

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	1c10      	adds	r0, r2, #0
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	1c19      	adds	r1, r3, #0
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	46c0      	nop			; (mov r8, r8)

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80009ce:	f000 f8f1 	bl	8000bb4 <__ledf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d401      	bmi.n	80009da <__aeabi_cdcmpeq+0xe>
 80009d6:	2100      	movs	r1, #0
 80009d8:	42c8      	cmn	r0, r1
 80009da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	b510      	push	{r4, lr}
 80009de:	f000 f849 	bl	8000a74 <__eqdf2>
 80009e2:	4240      	negs	r0, r0
 80009e4:	3001      	adds	r0, #1
 80009e6:	bd10      	pop	{r4, pc}

080009e8 <__aeabi_dcmplt>:
 80009e8:	b510      	push	{r4, lr}
 80009ea:	f000 f8e3 	bl	8000bb4 <__ledf2>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	db01      	blt.n	80009f6 <__aeabi_dcmplt+0xe>
 80009f2:	2000      	movs	r0, #0
 80009f4:	bd10      	pop	{r4, pc}
 80009f6:	2001      	movs	r0, #1
 80009f8:	bd10      	pop	{r4, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)

080009fc <__aeabi_dcmple>:
 80009fc:	b510      	push	{r4, lr}
 80009fe:	f000 f8d9 	bl	8000bb4 <__ledf2>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	dd01      	ble.n	8000a0a <__aeabi_dcmple+0xe>
 8000a06:	2000      	movs	r0, #0
 8000a08:	bd10      	pop	{r4, pc}
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	bd10      	pop	{r4, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)

08000a10 <__aeabi_dcmpgt>:
 8000a10:	b510      	push	{r4, lr}
 8000a12:	f000 f86b 	bl	8000aec <__gedf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	dc01      	bgt.n	8000a1e <__aeabi_dcmpgt+0xe>
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	bd10      	pop	{r4, pc}
 8000a1e:	2001      	movs	r0, #1
 8000a20:	bd10      	pop	{r4, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)

08000a24 <__aeabi_dcmpge>:
 8000a24:	b510      	push	{r4, lr}
 8000a26:	f000 f861 	bl	8000aec <__gedf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	da01      	bge.n	8000a32 <__aeabi_dcmpge+0xe>
 8000a2e:	2000      	movs	r0, #0
 8000a30:	bd10      	pop	{r4, pc}
 8000a32:	2001      	movs	r0, #1
 8000a34:	bd10      	pop	{r4, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)

08000a38 <__clzsi2>:
 8000a38:	211c      	movs	r1, #28
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	041b      	lsls	r3, r3, #16
 8000a3e:	4298      	cmp	r0, r3
 8000a40:	d301      	bcc.n	8000a46 <__clzsi2+0xe>
 8000a42:	0c00      	lsrs	r0, r0, #16
 8000a44:	3910      	subs	r1, #16
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	4298      	cmp	r0, r3
 8000a4a:	d301      	bcc.n	8000a50 <__clzsi2+0x18>
 8000a4c:	0a00      	lsrs	r0, r0, #8
 8000a4e:	3908      	subs	r1, #8
 8000a50:	091b      	lsrs	r3, r3, #4
 8000a52:	4298      	cmp	r0, r3
 8000a54:	d301      	bcc.n	8000a5a <__clzsi2+0x22>
 8000a56:	0900      	lsrs	r0, r0, #4
 8000a58:	3904      	subs	r1, #4
 8000a5a:	a202      	add	r2, pc, #8	; (adr r2, 8000a64 <__clzsi2+0x2c>)
 8000a5c:	5c10      	ldrb	r0, [r2, r0]
 8000a5e:	1840      	adds	r0, r0, r1
 8000a60:	4770      	bx	lr
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	02020304 	.word	0x02020304
 8000a68:	01010101 	.word	0x01010101
	...

08000a74 <__eqdf2>:
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	464f      	mov	r7, r9
 8000a78:	4646      	mov	r6, r8
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	b5c0      	push	{r6, r7, lr}
 8000a80:	4680      	mov	r8, r0
 8000a82:	4e19      	ldr	r6, [pc, #100]	; (8000ae8 <__eqdf2+0x74>)
 8000a84:	0318      	lsls	r0, r3, #12
 8000a86:	030f      	lsls	r7, r1, #12
 8000a88:	004d      	lsls	r5, r1, #1
 8000a8a:	0b00      	lsrs	r0, r0, #12
 8000a8c:	005c      	lsls	r4, r3, #1
 8000a8e:	4682      	mov	sl, r0
 8000a90:	0b3f      	lsrs	r7, r7, #12
 8000a92:	0d6d      	lsrs	r5, r5, #21
 8000a94:	0fc9      	lsrs	r1, r1, #31
 8000a96:	4691      	mov	r9, r2
 8000a98:	0d64      	lsrs	r4, r4, #21
 8000a9a:	0fdb      	lsrs	r3, r3, #31
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	42b5      	cmp	r5, r6
 8000aa0:	d00a      	beq.n	8000ab8 <__eqdf2+0x44>
 8000aa2:	42b4      	cmp	r4, r6
 8000aa4:	d003      	beq.n	8000aae <__eqdf2+0x3a>
 8000aa6:	42a5      	cmp	r5, r4
 8000aa8:	d101      	bne.n	8000aae <__eqdf2+0x3a>
 8000aaa:	4557      	cmp	r7, sl
 8000aac:	d00c      	beq.n	8000ac8 <__eqdf2+0x54>
 8000aae:	bc1c      	pop	{r2, r3, r4}
 8000ab0:	4690      	mov	r8, r2
 8000ab2:	4699      	mov	r9, r3
 8000ab4:	46a2      	mov	sl, r4
 8000ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab8:	4666      	mov	r6, ip
 8000aba:	433e      	orrs	r6, r7
 8000abc:	d1f7      	bne.n	8000aae <__eqdf2+0x3a>
 8000abe:	42ac      	cmp	r4, r5
 8000ac0:	d1f5      	bne.n	8000aae <__eqdf2+0x3a>
 8000ac2:	4654      	mov	r4, sl
 8000ac4:	4314      	orrs	r4, r2
 8000ac6:	d1f2      	bne.n	8000aae <__eqdf2+0x3a>
 8000ac8:	2001      	movs	r0, #1
 8000aca:	45c8      	cmp	r8, r9
 8000acc:	d1ef      	bne.n	8000aae <__eqdf2+0x3a>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d007      	beq.n	8000ae2 <__eqdf2+0x6e>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d1eb      	bne.n	8000aae <__eqdf2+0x3a>
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	0038      	movs	r0, r7
 8000adc:	1e47      	subs	r7, r0, #1
 8000ade:	41b8      	sbcs	r0, r7
 8000ae0:	e7e5      	b.n	8000aae <__eqdf2+0x3a>
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e7e3      	b.n	8000aae <__eqdf2+0x3a>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	000007ff 	.word	0x000007ff

08000aec <__gedf2>:
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	464f      	mov	r7, r9
 8000af0:	4646      	mov	r6, r8
 8000af2:	46d6      	mov	lr, sl
 8000af4:	004d      	lsls	r5, r1, #1
 8000af6:	b5c0      	push	{r6, r7, lr}
 8000af8:	030e      	lsls	r6, r1, #12
 8000afa:	0fc9      	lsrs	r1, r1, #31
 8000afc:	468a      	mov	sl, r1
 8000afe:	492c      	ldr	r1, [pc, #176]	; (8000bb0 <__gedf2+0xc4>)
 8000b00:	031f      	lsls	r7, r3, #12
 8000b02:	005c      	lsls	r4, r3, #1
 8000b04:	4680      	mov	r8, r0
 8000b06:	0b36      	lsrs	r6, r6, #12
 8000b08:	0d6d      	lsrs	r5, r5, #21
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	0b3f      	lsrs	r7, r7, #12
 8000b0e:	0d64      	lsrs	r4, r4, #21
 8000b10:	0fdb      	lsrs	r3, r3, #31
 8000b12:	428d      	cmp	r5, r1
 8000b14:	d01e      	beq.n	8000b54 <__gedf2+0x68>
 8000b16:	428c      	cmp	r4, r1
 8000b18:	d016      	beq.n	8000b48 <__gedf2+0x5c>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d11e      	bne.n	8000b5c <__gedf2+0x70>
 8000b1e:	4330      	orrs	r0, r6
 8000b20:	4684      	mov	ip, r0
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d101      	bne.n	8000b2a <__gedf2+0x3e>
 8000b26:	433a      	orrs	r2, r7
 8000b28:	d023      	beq.n	8000b72 <__gedf2+0x86>
 8000b2a:	4662      	mov	r2, ip
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d01a      	beq.n	8000b66 <__gedf2+0x7a>
 8000b30:	459a      	cmp	sl, r3
 8000b32:	d029      	beq.n	8000b88 <__gedf2+0x9c>
 8000b34:	4651      	mov	r1, sl
 8000b36:	2002      	movs	r0, #2
 8000b38:	3901      	subs	r1, #1
 8000b3a:	4008      	ands	r0, r1
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	bc1c      	pop	{r2, r3, r4}
 8000b40:	4690      	mov	r8, r2
 8000b42:	4699      	mov	r9, r3
 8000b44:	46a2      	mov	sl, r4
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b48:	0039      	movs	r1, r7
 8000b4a:	4311      	orrs	r1, r2
 8000b4c:	d0e5      	beq.n	8000b1a <__gedf2+0x2e>
 8000b4e:	2002      	movs	r0, #2
 8000b50:	4240      	negs	r0, r0
 8000b52:	e7f4      	b.n	8000b3e <__gedf2+0x52>
 8000b54:	4330      	orrs	r0, r6
 8000b56:	d1fa      	bne.n	8000b4e <__gedf2+0x62>
 8000b58:	42ac      	cmp	r4, r5
 8000b5a:	d00f      	beq.n	8000b7c <__gedf2+0x90>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d10f      	bne.n	8000b80 <__gedf2+0x94>
 8000b60:	433a      	orrs	r2, r7
 8000b62:	d0e7      	beq.n	8000b34 <__gedf2+0x48>
 8000b64:	e00c      	b.n	8000b80 <__gedf2+0x94>
 8000b66:	2201      	movs	r2, #1
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	4393      	bics	r3, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	3001      	adds	r0, #1
 8000b70:	e7e5      	b.n	8000b3e <__gedf2+0x52>
 8000b72:	4663      	mov	r3, ip
 8000b74:	2000      	movs	r0, #0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0e1      	beq.n	8000b3e <__gedf2+0x52>
 8000b7a:	e7db      	b.n	8000b34 <__gedf2+0x48>
 8000b7c:	433a      	orrs	r2, r7
 8000b7e:	d1e6      	bne.n	8000b4e <__gedf2+0x62>
 8000b80:	459a      	cmp	sl, r3
 8000b82:	d1d7      	bne.n	8000b34 <__gedf2+0x48>
 8000b84:	42a5      	cmp	r5, r4
 8000b86:	dcd5      	bgt.n	8000b34 <__gedf2+0x48>
 8000b88:	42a5      	cmp	r5, r4
 8000b8a:	db05      	blt.n	8000b98 <__gedf2+0xac>
 8000b8c:	42be      	cmp	r6, r7
 8000b8e:	d8d1      	bhi.n	8000b34 <__gedf2+0x48>
 8000b90:	d008      	beq.n	8000ba4 <__gedf2+0xb8>
 8000b92:	2000      	movs	r0, #0
 8000b94:	42be      	cmp	r6, r7
 8000b96:	d2d2      	bcs.n	8000b3e <__gedf2+0x52>
 8000b98:	4650      	mov	r0, sl
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	3801      	subs	r0, #1
 8000b9e:	4398      	bics	r0, r3
 8000ba0:	3001      	adds	r0, #1
 8000ba2:	e7cc      	b.n	8000b3e <__gedf2+0x52>
 8000ba4:	45c8      	cmp	r8, r9
 8000ba6:	d8c5      	bhi.n	8000b34 <__gedf2+0x48>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	45c8      	cmp	r8, r9
 8000bac:	d3f4      	bcc.n	8000b98 <__gedf2+0xac>
 8000bae:	e7c6      	b.n	8000b3e <__gedf2+0x52>
 8000bb0:	000007ff 	.word	0x000007ff

08000bb4 <__ledf2>:
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	464f      	mov	r7, r9
 8000bb8:	4646      	mov	r6, r8
 8000bba:	46d6      	mov	lr, sl
 8000bbc:	004d      	lsls	r5, r1, #1
 8000bbe:	b5c0      	push	{r6, r7, lr}
 8000bc0:	030e      	lsls	r6, r1, #12
 8000bc2:	0fc9      	lsrs	r1, r1, #31
 8000bc4:	468a      	mov	sl, r1
 8000bc6:	492e      	ldr	r1, [pc, #184]	; (8000c80 <__ledf2+0xcc>)
 8000bc8:	031f      	lsls	r7, r3, #12
 8000bca:	005c      	lsls	r4, r3, #1
 8000bcc:	4680      	mov	r8, r0
 8000bce:	0b36      	lsrs	r6, r6, #12
 8000bd0:	0d6d      	lsrs	r5, r5, #21
 8000bd2:	4691      	mov	r9, r2
 8000bd4:	0b3f      	lsrs	r7, r7, #12
 8000bd6:	0d64      	lsrs	r4, r4, #21
 8000bd8:	0fdb      	lsrs	r3, r3, #31
 8000bda:	428d      	cmp	r5, r1
 8000bdc:	d018      	beq.n	8000c10 <__ledf2+0x5c>
 8000bde:	428c      	cmp	r4, r1
 8000be0:	d011      	beq.n	8000c06 <__ledf2+0x52>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	d118      	bne.n	8000c18 <__ledf2+0x64>
 8000be6:	4330      	orrs	r0, r6
 8000be8:	4684      	mov	ip, r0
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d11e      	bne.n	8000c2c <__ledf2+0x78>
 8000bee:	433a      	orrs	r2, r7
 8000bf0:	d11c      	bne.n	8000c2c <__ledf2+0x78>
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d030      	beq.n	8000c5c <__ledf2+0xa8>
 8000bfa:	4651      	mov	r1, sl
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	3901      	subs	r1, #1
 8000c00:	4008      	ands	r0, r1
 8000c02:	3801      	subs	r0, #1
 8000c04:	e02a      	b.n	8000c5c <__ledf2+0xa8>
 8000c06:	0039      	movs	r1, r7
 8000c08:	4311      	orrs	r1, r2
 8000c0a:	d0ea      	beq.n	8000be2 <__ledf2+0x2e>
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	e025      	b.n	8000c5c <__ledf2+0xa8>
 8000c10:	4330      	orrs	r0, r6
 8000c12:	d1fb      	bne.n	8000c0c <__ledf2+0x58>
 8000c14:	42ac      	cmp	r4, r5
 8000c16:	d026      	beq.n	8000c66 <__ledf2+0xb2>
 8000c18:	2c00      	cmp	r4, #0
 8000c1a:	d126      	bne.n	8000c6a <__ledf2+0xb6>
 8000c1c:	433a      	orrs	r2, r7
 8000c1e:	d124      	bne.n	8000c6a <__ledf2+0xb6>
 8000c20:	4651      	mov	r1, sl
 8000c22:	2002      	movs	r0, #2
 8000c24:	3901      	subs	r1, #1
 8000c26:	4008      	ands	r0, r1
 8000c28:	3801      	subs	r0, #1
 8000c2a:	e017      	b.n	8000c5c <__ledf2+0xa8>
 8000c2c:	4662      	mov	r2, ip
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d00f      	beq.n	8000c52 <__ledf2+0x9e>
 8000c32:	459a      	cmp	sl, r3
 8000c34:	d1e1      	bne.n	8000bfa <__ledf2+0x46>
 8000c36:	42a5      	cmp	r5, r4
 8000c38:	db05      	blt.n	8000c46 <__ledf2+0x92>
 8000c3a:	42be      	cmp	r6, r7
 8000c3c:	d8dd      	bhi.n	8000bfa <__ledf2+0x46>
 8000c3e:	d019      	beq.n	8000c74 <__ledf2+0xc0>
 8000c40:	2000      	movs	r0, #0
 8000c42:	42be      	cmp	r6, r7
 8000c44:	d20a      	bcs.n	8000c5c <__ledf2+0xa8>
 8000c46:	4650      	mov	r0, sl
 8000c48:	2301      	movs	r3, #1
 8000c4a:	3801      	subs	r0, #1
 8000c4c:	4398      	bics	r0, r3
 8000c4e:	3001      	adds	r0, #1
 8000c50:	e004      	b.n	8000c5c <__ledf2+0xa8>
 8000c52:	2201      	movs	r2, #1
 8000c54:	3b01      	subs	r3, #1
 8000c56:	4393      	bics	r3, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	3001      	adds	r0, #1
 8000c5c:	bc1c      	pop	{r2, r3, r4}
 8000c5e:	4690      	mov	r8, r2
 8000c60:	4699      	mov	r9, r3
 8000c62:	46a2      	mov	sl, r4
 8000c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c66:	433a      	orrs	r2, r7
 8000c68:	d1d0      	bne.n	8000c0c <__ledf2+0x58>
 8000c6a:	459a      	cmp	sl, r3
 8000c6c:	d1c5      	bne.n	8000bfa <__ledf2+0x46>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	dcc3      	bgt.n	8000bfa <__ledf2+0x46>
 8000c72:	e7e0      	b.n	8000c36 <__ledf2+0x82>
 8000c74:	45c8      	cmp	r8, r9
 8000c76:	d8c0      	bhi.n	8000bfa <__ledf2+0x46>
 8000c78:	2000      	movs	r0, #0
 8000c7a:	45c8      	cmp	r8, r9
 8000c7c:	d3e3      	bcc.n	8000c46 <__ledf2+0x92>
 8000c7e:	e7ed      	b.n	8000c5c <__ledf2+0xa8>
 8000c80:	000007ff 	.word	0x000007ff

08000c84 <controlScheme>:
 * uint8_t controlScheme(uint32_t *ADCValueArr)
 *  Takes in the RawFSRInput array and determines what the user input
 *  hand motion is and returns corresponding direction value. See function
 *  for control scheme values.
 *  */
uint8_t controlScheme(uint32_t * ADCValueArr){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

	uint32_t indexfinger = ADCValueArr[0];
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	61fb      	str	r3, [r7, #28]
	uint32_t middle = ADCValueArr[1];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	61bb      	str	r3, [r7, #24]
	uint32_t ring = ADCValueArr[2];
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	617b      	str	r3, [r7, #20]
	uint32_t pinky = ADCValueArr[3];
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
	uint32_t thumb = ADCValueArr[4];
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	60fb      	str	r3, [r7, #12]

	if ((indexfinger > ADCintialvalue) && (middle > ADCintialvalue) && (ring > ADCintialvalue) && (pinky > ADCintialvalue) && (thumb > ADCintialvalue)){
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00d      	beq.n	8000ccc <controlScheme+0x48>
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00a      	beq.n	8000ccc <controlScheme+0x48>
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d007      	beq.n	8000ccc <controlScheme+0x48>
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d004      	beq.n	8000ccc <controlScheme+0x48>
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <controlScheme+0x48>
		// hand motion is forward
		return 3;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e033      	b.n	8000d34 <controlScheme+0xb0>
	}
	else if((indexfinger == ADCintialvalue) && (middle > ADCintialvalue) && (ring > ADCintialvalue) && (pinky > ADCintialvalue) && (thumb > ADCintialvalue)){
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10d      	bne.n	8000cee <controlScheme+0x6a>
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00a      	beq.n	8000cee <controlScheme+0x6a>
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d007      	beq.n	8000cee <controlScheme+0x6a>
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d004      	beq.n	8000cee <controlScheme+0x6a>
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <controlScheme+0x6a>
		// hand motion is right
		return 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e022      	b.n	8000d34 <controlScheme+0xb0>
	}
	else if((indexfinger > ADCintialvalue) && (middle > ADCintialvalue) && (ring > ADCintialvalue) && (pinky == ADCintialvalue) && (thumb > ADCintialvalue)){
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00d      	beq.n	8000d10 <controlScheme+0x8c>
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00a      	beq.n	8000d10 <controlScheme+0x8c>
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d007      	beq.n	8000d10 <controlScheme+0x8c>
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <controlScheme+0x8c>
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <controlScheme+0x8c>
		// hand motion is left
		return 2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e011      	b.n	8000d34 <controlScheme+0xb0>
	}
	else if((indexfinger == ADCintialvalue) && (middle > ADCintialvalue) && (ring > ADCintialvalue) && (pinky == ADCintialvalue) && (thumb > ADCintialvalue)){
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10d      	bne.n	8000d32 <controlScheme+0xae>
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d00a      	beq.n	8000d32 <controlScheme+0xae>
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d007      	beq.n	8000d32 <controlScheme+0xae>
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d104      	bne.n	8000d32 <controlScheme+0xae>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <controlScheme+0xae>
		// hand motion is reverse
		return 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <controlScheme+0xb0>
	}
	else{
		// hand motion is invalid; so send forward by default
		return 3;
 8000d32:	2303      	movs	r3, #3
	}

}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b008      	add	sp, #32
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
// Setting frontTr and frontTmax for testing
frontTr = 10;
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <main+0x64>)
 8000d42:	220a      	movs	r2, #10
 8000d44:	601a      	str	r2, [r3, #0]
frontTmax = 300;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <main+0x68>)
 8000d48:	2296      	movs	r2, #150	; 0x96
 8000d4a:	0052      	lsls	r2, r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
reverseTr = 10;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <main+0x6c>)
 8000d50:	220a      	movs	r2, #10
 8000d52:	601a      	str	r2, [r3, #0]
reverseTmax = 300;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <main+0x70>)
 8000d56:	2296      	movs	r2, #150	; 0x96
 8000d58:	0052      	lsls	r2, r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
leftTr = 10;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <main+0x74>)
 8000d5e:	220a      	movs	r2, #10
 8000d60:	601a      	str	r2, [r3, #0]
leftTmax = 300;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <main+0x78>)
 8000d64:	2296      	movs	r2, #150	; 0x96
 8000d66:	0052      	lsls	r2, r2, #1
 8000d68:	601a      	str	r2, [r3, #0]
rightTr = 10;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <main+0x7c>)
 8000d6c:	220a      	movs	r2, #10
 8000d6e:	601a      	str	r2, [r3, #0]
rightTmax = 300;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <main+0x80>)
 8000d72:	2296      	movs	r2, #150	; 0x96
 8000d74:	0052      	lsls	r2, r2, #1
 8000d76:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d78:	f000 feaa 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7c:	f000 f822 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d80:	f000 f9bc 	bl	80010fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d84:	f000 f99c 	bl	80010c0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d88:	f000 f96a 	bl	8001060 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000d8c:	f000 f882 	bl	8000e94 <MX_ADC_Init>
  MX_TIM3_Init();
 8000d90:	f000 f910 	bl	8000fb4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Begin TIM3 to enable continuous Bluetooth transmission every 10ms
  HAL_TIM_Base_Start_IT(&htim3);
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <main+0x84>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f002 fd68 	bl	800386c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <main+0x60>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	2000010c 	.word	0x2000010c
 8000da4:	200002f0 	.word	0x200002f0
 8000da8:	200002f8 	.word	0x200002f8
 8000dac:	20000314 	.word	0x20000314
 8000db0:	2000035c 	.word	0x2000035c
 8000db4:	2000004c 	.word	0x2000004c
 8000db8:	200003a0 	.word	0x200003a0
 8000dbc:	20000040 	.word	0x20000040
 8000dc0:	200000cc 	.word	0x200000cc

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b097      	sub	sp, #92	; 0x5c
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	2428      	movs	r4, #40	; 0x28
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	0018      	movs	r0, r3
 8000dd0:	2330      	movs	r3, #48	; 0x30
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f003 febc 	bl	8004b52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dda:	2318      	movs	r3, #24
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	0018      	movs	r0, r3
 8000de0:	2310      	movs	r3, #16
 8000de2:	001a      	movs	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f003 feb4 	bl	8004b52 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	0018      	movs	r0, r3
 8000dee:	2314      	movs	r3, #20
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f003 fead 	bl	8004b52 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000df8:	0021      	movs	r1, r4
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2212      	movs	r2, #18
 8000dfe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2201      	movs	r2, #1
 8000e04:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2201      	movs	r2, #1
 8000e0a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2210      	movs	r2, #16
 8000e10:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2210      	movs	r2, #16
 8000e16:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	22a0      	movs	r2, #160	; 0xa0
 8000e28:	0392      	lsls	r2, r2, #14
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 ffa1 	bl	8002d7c <HAL_RCC_OscConfig>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000e3e:	f000 f9b9 	bl	80011b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e42:	2118      	movs	r1, #24
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2207      	movs	r2, #7
 8000e48:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2101      	movs	r1, #1
 8000e60:	0018      	movs	r0, r3
 8000e62:	f002 faa7 	bl	80033b4 <HAL_RCC_ClockConfig>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e6a:	f000 f9a3 	bl	80011b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f002 fbeb 	bl	8003658 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e86:	f000 f995 	bl	80011b4 <Error_Handler>
  }
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b017      	add	sp, #92	; 0x5c
 8000e90:	bd90      	pop	{r4, r7, pc}
	...

08000e94 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	f003 fe55 	bl	8004b52 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ea8:	4b40      	ldr	r3, [pc, #256]	; (8000fac <MX_ADC_Init+0x118>)
 8000eaa:	4a41      	ldr	r2, [pc, #260]	; (8000fb0 <MX_ADC_Init+0x11c>)
 8000eac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eae:	4b3f      	ldr	r3, [pc, #252]	; (8000fac <MX_ADC_Init+0x118>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb4:	4b3d      	ldr	r3, [pc, #244]	; (8000fac <MX_ADC_Init+0x118>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eba:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <MX_ADC_Init+0x118>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ec0:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <MX_ADC_Init+0x118>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <MX_ADC_Init+0x118>)
 8000ec8:	2204      	movs	r2, #4
 8000eca:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ecc:	4b37      	ldr	r3, [pc, #220]	; (8000fac <MX_ADC_Init+0x118>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ed2:	4b36      	ldr	r3, [pc, #216]	; (8000fac <MX_ADC_Init+0x118>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000ed8:	4b34      	ldr	r3, [pc, #208]	; (8000fac <MX_ADC_Init+0x118>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ede:	4b33      	ldr	r3, [pc, #204]	; (8000fac <MX_ADC_Init+0x118>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee4:	4b31      	ldr	r3, [pc, #196]	; (8000fac <MX_ADC_Init+0x118>)
 8000ee6:	22c2      	movs	r2, #194	; 0xc2
 8000ee8:	32ff      	adds	r2, #255	; 0xff
 8000eea:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <MX_ADC_Init+0x118>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <MX_ADC_Init+0x118>)
 8000ef4:	2224      	movs	r2, #36	; 0x24
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <MX_ADC_Init+0x118>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f00:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <MX_ADC_Init+0x118>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 fe48 	bl	8001b98 <HAL_ADC_Init>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000f0c:	f000 f952 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	0152      	lsls	r2, r2, #5
 8000f1c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	0552      	lsls	r2, r2, #21
 8000f24:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f26:	1d3a      	adds	r2, r7, #4
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <MX_ADC_Init+0x118>)
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f001 f8cd 	bl	80020cc <HAL_ADC_ConfigChannel>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000f36:	f000 f93d 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f40:	1d3a      	adds	r2, r7, #4
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_ADC_Init+0x118>)
 8000f44:	0011      	movs	r1, r2
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 f8c0 	bl	80020cc <HAL_ADC_ConfigChannel>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000f50:	f000 f930 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2203      	movs	r2, #3
 8000f58:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f5a:	1d3a      	adds	r2, r7, #4
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_ADC_Init+0x118>)
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 f8b3 	bl	80020cc <HAL_ADC_ConfigChannel>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000f6a:	f000 f923 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2204      	movs	r2, #4
 8000f72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f74:	1d3a      	adds	r2, r7, #4
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <MX_ADC_Init+0x118>)
 8000f78:	0011      	movs	r1, r2
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f001 f8a6 	bl	80020cc <HAL_ADC_ConfigChannel>
 8000f80:	1e03      	subs	r3, r0, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000f84:	f000 f916 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2205      	movs	r2, #5
 8000f8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f8e:	1d3a      	adds	r2, r7, #4
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_ADC_Init+0x118>)
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f001 f899 	bl	80020cc <HAL_ADC_ConfigChannel>
 8000f9a:	1e03      	subs	r3, r0, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000f9e:	f000 f909 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b004      	add	sp, #16
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	20000360 	.word	0x20000360
 8000fb0:	40012400 	.word	0x40012400

08000fb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	2308      	movs	r3, #8
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	f003 fdc4 	bl	8004b52 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fca:	003b      	movs	r3, r7
 8000fcc:	0018      	movs	r0, r3
 8000fce:	2308      	movs	r3, #8
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	f003 fdbd 	bl	8004b52 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <MX_TIM3_Init+0xa0>)
 8000fda:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <MX_TIM3_Init+0xa4>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_TIM3_Init+0xa0>)
 8000fe0:	4a1e      	ldr	r2, [pc, #120]	; (800105c <MX_TIM3_Init+0xa8>)
 8000fe2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_TIM3_Init+0xa0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_TIM3_Init+0xa0>)
 8000fec:	2263      	movs	r2, #99	; 0x63
 8000fee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_TIM3_Init+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_TIM3_Init+0xa0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_TIM3_Init+0xa0>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f002 fc08 	bl	8003814 <HAL_TIM_Base_Init>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001008:	f000 f8d4 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100c:	2108      	movs	r1, #8
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	0152      	lsls	r2, r2, #5
 8001014:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001016:	187a      	adds	r2, r7, r1
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_TIM3_Init+0xa0>)
 800101a:	0011      	movs	r1, r2
 800101c:	0018      	movs	r0, r3
 800101e:	f002 fd5d 	bl	8003adc <HAL_TIM_ConfigClockSource>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001026:	f000 f8c5 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	003b      	movs	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001030:	003b      	movs	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001036:	003a      	movs	r2, r7
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_TIM3_Init+0xa0>)
 800103a:	0011      	movs	r1, r2
 800103c:	0018      	movs	r0, r3
 800103e:	f002 ff4d 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001046:	f000 f8b5 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b006      	add	sp, #24
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	200000cc 	.word	0x200000cc
 8001058:	40000400 	.word	0x40000400
 800105c:	0000bb80 	.word	0x0000bb80

08001060 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001066:	4a15      	ldr	r2, [pc, #84]	; (80010bc <MX_USART1_UART_Init+0x5c>)
 8001068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 800106c:	2296      	movs	r2, #150	; 0x96
 800106e:	0192      	lsls	r2, r2, #6
 8001070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 80010a4:	0018      	movs	r0, r3
 80010a6:	f002 ff87 	bl	8003fb8 <HAL_UART_Init>
 80010aa:	1e03      	subs	r3, r0, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010ae:	f000 f881 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000188 	.word	0x20000188
 80010bc:	40013800 	.word	0x40013800

080010c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_DMA_Init+0x38>)
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_DMA_Init+0x38>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	430a      	orrs	r2, r1
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_DMA_Init+0x38>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4013      	ands	r3, r2
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2009      	movs	r0, #9
 80010e4:	f001 faac 	bl	8002640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010e8:	2009      	movs	r0, #9
 80010ea:	f001 fabe 	bl	800266a <HAL_NVIC_EnableIRQ>

}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	40021000 	.word	0x40021000

080010fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	240c      	movs	r4, #12
 8001104:	193b      	adds	r3, r7, r4
 8001106:	0018      	movs	r0, r3
 8001108:	2314      	movs	r3, #20
 800110a:	001a      	movs	r2, r3
 800110c:	2100      	movs	r1, #0
 800110e:	f003 fd20 	bl	8004b52 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <MX_GPIO_Init+0xac>)
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <MX_GPIO_Init+0xac>)
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	0289      	lsls	r1, r1, #10
 800111c:	430a      	orrs	r2, r1
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_GPIO_Init+0xac>)
 8001122:	695a      	ldr	r2, [r3, #20]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	029b      	lsls	r3, r3, #10
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_GPIO_Init+0xac>)
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_GPIO_Init+0xac>)
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	0309      	lsls	r1, r1, #12
 8001138:	430a      	orrs	r2, r1
 800113a:	615a      	str	r2, [r3, #20]
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_GPIO_Init+0xac>)
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	031b      	lsls	r3, r3, #12
 8001144:	4013      	ands	r3, r2
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800114a:	23c0      	movs	r3, #192	; 0xc0
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4817      	ldr	r0, [pc, #92]	; (80011ac <MX_GPIO_Init+0xb0>)
 8001150:	2200      	movs	r2, #0
 8001152:	0019      	movs	r1, r3
 8001154:	f001 fdf4 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001158:	193b      	adds	r3, r7, r4
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800115e:	193b      	adds	r3, r7, r4
 8001160:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <MX_GPIO_Init+0xb4>)
 8001162:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	193b      	adds	r3, r7, r4
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116a:	193a      	adds	r2, r7, r4
 800116c:	2390      	movs	r3, #144	; 0x90
 800116e:	05db      	lsls	r3, r3, #23
 8001170:	0011      	movs	r1, r2
 8001172:	0018      	movs	r0, r3
 8001174:	f001 fc74 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001178:	0021      	movs	r1, r4
 800117a:	187b      	adds	r3, r7, r1
 800117c:	22c0      	movs	r2, #192	; 0xc0
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2201      	movs	r2, #1
 8001186:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	187b      	adds	r3, r7, r1
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <MX_GPIO_Init+0xb0>)
 8001198:	0019      	movs	r1, r3
 800119a:	0010      	movs	r0, r2
 800119c:	f001 fc60 	bl	8002a60 <HAL_GPIO_Init>

}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b009      	add	sp, #36	; 0x24
 80011a6:	bd90      	pop	{r4, r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48000800 	.word	0x48000800
 80011b0:	10120000 	.word	0x10120000

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <conditional>:
 * Checks which range the user input ADC value is in and appropriately sets speed.
 * If ADCavg is less than resting threshold of corresponding hand motion, then speed is 0.
 * If ADCavg is in between resting threshold and average threshold of corresponding hand motion, then speed is MIN_SPEED.
 * If ADCAvg is more than maximum threshold, then speed is MAX_SPEED.
 * Else, need to compute speed as it lies in our "bucket range" for acceleration computation. */
int conditional(uint32_t Tr, uint32_t Tmax, uint32_t ADC_avg, int* pressurearray){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]

	// calculation Tavg
	int speed = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
	uint32_t Tavg = (Tr + Tmax) / 2;
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	085b      	lsrs	r3, r3, #1
 80011d8:	613b      	str	r3, [r7, #16]

	if (ADC_avg < Tr){
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d202      	bcs.n	80011e8 <conditional+0x2a>
		speed = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	e021      	b.n	800122c <conditional+0x6e>
	}
	else if (ADC_avg >= Tmax){
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d302      	bcc.n	80011f6 <conditional+0x38>
		speed = MAX_SPEED;
 80011f0:	231f      	movs	r3, #31
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e01a      	b.n	800122c <conditional+0x6e>
	}
	else if ((ADC_avg > Tr) && (ADC_avg < Tavg)){
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d906      	bls.n	800120c <conditional+0x4e>
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	429a      	cmp	r2, r3
 8001204:	d202      	bcs.n	800120c <conditional+0x4e>
		speed = MIN_SPEED;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	e00f      	b.n	800122c <conditional+0x6e>
	}
	else if ((ADC_avg > Tavg) && (ADC_avg < Tmax)){
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	429a      	cmp	r2, r3
 8001212:	d90b      	bls.n	800122c <conditional+0x6e>
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	429a      	cmp	r2, r3
 800121a:	d207      	bcs.n	800122c <conditional+0x6e>
			speed = speedcalc(Tavg, Tmax, pressurearray);
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	0018      	movs	r0, r3
 8001224:	f000 f808 	bl	8001238 <speedcalc>
 8001228:	0003      	movs	r3, r0
 800122a:	617b      	str	r3, [r7, #20]
	}
	return speed;
 800122c:	697b      	ldr	r3, [r7, #20]

}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b006      	add	sp, #24
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <speedcalc>:
/* int speedcalc(uint32_t Tavg, uint32_t Tmax, int* pressurearray)
 * Speed is deemed as lying in "bucket range" for acceleration computation.
 * Refers to corresponding pressure array for correct hand motion and assigns the
 * correct 5-bits. This is returned. If function returns -1, it entails that a speed bucket
 * could not be found, i.e. something is WRONG!! */
int speedcalc(uint32_t Tavg, uint32_t Tmax, int * pressurearray){
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]

	// The (j + 2) is offsetting for the lower two already assigned values; (0 speed and MIN_SPEED of 1).

	for (int j = 0; j < 29; j++){
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e02f      	b.n	80012aa <speedcalc+0x72>
		// if current pressure exceeds last bucket but not max threshold, then return 30.
		if (j == 28){
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2b1c      	cmp	r3, #28
 800124e:	d111      	bne.n	8001274 <speedcalc+0x3c>
			if ((RawFSRAvg >= pressurearray[j]) && (RawFSRAvg < Tmax)) {
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	18d3      	adds	r3, r2, r3
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	001a      	movs	r2, r3
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <speedcalc+0x84>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d807      	bhi.n	8001274 <speedcalc+0x3c>
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <speedcalc+0x84>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	429a      	cmp	r2, r3
 800126c:	d902      	bls.n	8001274 <speedcalc+0x3c>
						return j + 2;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3302      	adds	r3, #2
 8001272:	e01f      	b.n	80012b4 <speedcalc+0x7c>
			}
		}
		// if current pressure lies between two buckets, then return corresponding current speed.
		if ((RawFSRAvg >= pressurearray[j]) && (RawFSRAvg < pressurearray[j + 1])) {
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	18d3      	adds	r3, r2, r3
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	001a      	movs	r2, r3
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <speedcalc+0x84>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d80d      	bhi.n	80012a4 <speedcalc+0x6c>
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3301      	adds	r3, #1
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	18d3      	adds	r3, r2, r3
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	001a      	movs	r2, r3
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <speedcalc+0x84>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d902      	bls.n	80012a4 <speedcalc+0x6c>
			return j + 2;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3302      	adds	r3, #2
 80012a2:	e007      	b.n	80012b4 <speedcalc+0x7c>
	for (int j = 0; j < 29; j++){
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3301      	adds	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b1c      	cmp	r3, #28
 80012ae:	ddcc      	ble.n	800124a <speedcalc+0x12>
		}
	}

	return -1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	425b      	negs	r3, r3
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b006      	add	sp, #24
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000044 	.word	0x20000044

080012c0 <Tavgcalc>:

/* FUNCTIONS */

/* uint32_t Tavgcalc(uint32_t Tmax, uint32_t Tr)
 * Function that computes the average threshold pressure for each hand motion. */
uint32_t Tavgcalc(uint32_t Tmax, uint32_t Tr){
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	return floor((Tmax+Tr)/2);
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	18d3      	adds	r3, r2, r3
 80012d0:	085b      	lsrs	r3, r3, #1
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff fb40 	bl	8000958 <__aeabi_ui2d>
 80012d8:	0003      	movs	r3, r0
 80012da:	000c      	movs	r4, r1
 80012dc:	0018      	movs	r0, r3
 80012de:	0021      	movs	r1, r4
 80012e0:	f7fe ff9e 	bl	8000220 <__aeabi_d2uiz>
 80012e4:	0003      	movs	r3, r0
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b003      	add	sp, #12
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <kcalc>:

/* int kcalc(uint32_t Tavg, uint32_t Tmax)
 * Function that computes length of bucket (marked as k-value) for each hand motion. */
int kcalc(uint32_t Tavg, uint32_t Tmax){
 80012ee:	b590      	push	{r4, r7, lr}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
	return floor((Tmax - Tavg)/29);
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	211d      	movs	r1, #29
 8001300:	0018      	movs	r0, r3
 8001302:	f7fe ff01 	bl	8000108 <__udivsi3>
 8001306:	0003      	movs	r3, r0
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff fb25 	bl	8000958 <__aeabi_ui2d>
 800130e:	0003      	movs	r3, r0
 8001310:	000c      	movs	r4, r1
 8001312:	0018      	movs	r0, r3
 8001314:	0021      	movs	r1, r4
 8001316:	f7ff fae9 	bl	80008ec <__aeabi_d2iz>
 800131a:	0003      	movs	r3, r0
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b003      	add	sp, #12
 8001322:	bd90      	pop	{r4, r7, pc}

08001324 <fourTavg>:

/* void fourTavg()
 * Function that sets global Tavg values for each hand motion (Tavgcalc gets called four different times). */
void fourTavg(){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	frontTavg = Tavgcalc(frontTmax, frontTr);
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <fourTavg+0x64>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <fourTavg+0x68>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0019      	movs	r1, r3
 8001332:	0010      	movs	r0, r2
 8001334:	f7ff ffc4 	bl	80012c0 <Tavgcalc>
 8001338:	0002      	movs	r2, r0
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <fourTavg+0x6c>)
 800133c:	601a      	str	r2, [r3, #0]
	reverseTavg = Tavgcalc(reverseTmax, reverseTr);
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <fourTavg+0x70>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <fourTavg+0x74>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	0019      	movs	r1, r3
 8001348:	0010      	movs	r0, r2
 800134a:	f7ff ffb9 	bl	80012c0 <Tavgcalc>
 800134e:	0002      	movs	r2, r0
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <fourTavg+0x78>)
 8001352:	601a      	str	r2, [r3, #0]
	leftTavg = Tavgcalc(leftTmax, leftTr);
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <fourTavg+0x7c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <fourTavg+0x80>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	0019      	movs	r1, r3
 800135e:	0010      	movs	r0, r2
 8001360:	f7ff ffae 	bl	80012c0 <Tavgcalc>
 8001364:	0002      	movs	r2, r0
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <fourTavg+0x84>)
 8001368:	601a      	str	r2, [r3, #0]
	rightTavg = Tavgcalc(rightTmax, rightTr);
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <fourTavg+0x88>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <fourTavg+0x8c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	0019      	movs	r1, r3
 8001374:	0010      	movs	r0, r2
 8001376:	f7ff ffa3 	bl	80012c0 <Tavgcalc>
 800137a:	0002      	movs	r2, r0
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <fourTavg+0x90>)
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	200002f0 	.word	0x200002f0
 800138c:	2000010c 	.word	0x2000010c
 8001390:	20000048 	.word	0x20000048
 8001394:	20000314 	.word	0x20000314
 8001398:	200002f8 	.word	0x200002f8
 800139c:	200002fc 	.word	0x200002fc
 80013a0:	2000004c 	.word	0x2000004c
 80013a4:	2000035c 	.word	0x2000035c
 80013a8:	20000304 	.word	0x20000304
 80013ac:	20000040 	.word	0x20000040
 80013b0:	200003a0 	.word	0x200003a0
 80013b4:	200002f4 	.word	0x200002f4

080013b8 <fourk>:

/* void fourk()
 * Function that sets global k-values for each hand motion (kcalc gets called four different times). */
void fourk(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	frontk = kcalc(frontTavg, frontTmax);
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <fourk+0x64>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <fourk+0x68>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0019      	movs	r1, r3
 80013c6:	0010      	movs	r0, r2
 80013c8:	f7ff ff91 	bl	80012ee <kcalc>
 80013cc:	0002      	movs	r2, r0
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <fourk+0x6c>)
 80013d0:	601a      	str	r2, [r3, #0]
	reversek = kcalc(reverseTavg, reverseTmax);
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <fourk+0x70>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <fourk+0x74>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	0019      	movs	r1, r3
 80013dc:	0010      	movs	r0, r2
 80013de:	f7ff ff86 	bl	80012ee <kcalc>
 80013e2:	0002      	movs	r2, r0
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <fourk+0x78>)
 80013e6:	601a      	str	r2, [r3, #0]
	leftk = kcalc(leftTavg, leftTmax);
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <fourk+0x7c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <fourk+0x80>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0019      	movs	r1, r3
 80013f2:	0010      	movs	r0, r2
 80013f4:	f7ff ff7b 	bl	80012ee <kcalc>
 80013f8:	0002      	movs	r2, r0
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <fourk+0x84>)
 80013fc:	601a      	str	r2, [r3, #0]
	rightk = kcalc(rightTavg, rightTavg);
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <fourk+0x88>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <fourk+0x88>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0019      	movs	r1, r3
 8001408:	0010      	movs	r0, r2
 800140a:	f7ff ff70 	bl	80012ee <kcalc>
 800140e:	0002      	movs	r2, r0
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <fourk+0x8c>)
 8001412:	601a      	str	r2, [r3, #0]
}
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	20000048 	.word	0x20000048
 8001420:	200002f0 	.word	0x200002f0
 8001424:	20000054 	.word	0x20000054
 8001428:	200002fc 	.word	0x200002fc
 800142c:	20000314 	.word	0x20000314
 8001430:	20000050 	.word	0x20000050
 8001434:	20000304 	.word	0x20000304
 8001438:	2000004c 	.word	0x2000004c
 800143c:	20000300 	.word	0x20000300
 8001440:	200002f4 	.word	0x200002f4
 8001444:	2000030c 	.word	0x2000030c

08001448 <pressureArrayInit>:

/* void pressureArrayInit()
 * Function that sets global pressure array values based on k-length bucket for each hand motion.
 * Should only get called once all four k-values and Tavg values are calculated.
 * These arrays will be used as lookup tables during speed value transmission. */
void pressureArrayInit() {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < 29; i++){
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	e010      	b.n	8001476 <pressureArrayInit+0x2e>
		pressurefront[i] = frontTavg + ((i + 1) * frontk);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <pressureArrayInit+0xc8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4353      	muls	r3, r2
 800145e:	001a      	movs	r2, r3
 8001460:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <pressureArrayInit+0xcc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	18d3      	adds	r3, r2, r3
 8001466:	0019      	movs	r1, r3
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <pressureArrayInit+0xd0>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 29; i++){
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3301      	adds	r3, #1
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b1c      	cmp	r3, #28
 800147a:	ddeb      	ble.n	8001454 <pressureArrayInit+0xc>
	}
	for (i = 0; i < 29; i++){
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	e010      	b.n	80014a4 <pressureArrayInit+0x5c>
			pressurereverse[i] = reverseTavg + ((i + 1) * reversek);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <pressureArrayInit+0xd4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4353      	muls	r3, r2
 800148c:	001a      	movs	r2, r3
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <pressureArrayInit+0xd8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	18d3      	adds	r3, r2, r3
 8001494:	0019      	movs	r1, r3
 8001496:	4b23      	ldr	r3, [pc, #140]	; (8001524 <pressureArrayInit+0xdc>)
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 29; i++){
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3301      	adds	r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b1c      	cmp	r3, #28
 80014a8:	ddeb      	ble.n	8001482 <pressureArrayInit+0x3a>
		}
	for (i = 0; i < 29; i++){
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	e010      	b.n	80014d2 <pressureArrayInit+0x8a>
			pressureleft[i] = leftTavg + ((i + 1) * leftk);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <pressureArrayInit+0xe0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4353      	muls	r3, r2
 80014ba:	001a      	movs	r2, r3
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <pressureArrayInit+0xe4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	18d3      	adds	r3, r2, r3
 80014c2:	0019      	movs	r1, r3
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <pressureArrayInit+0xe8>)
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 29; i++){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3301      	adds	r3, #1
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b1c      	cmp	r3, #28
 80014d6:	ddeb      	ble.n	80014b0 <pressureArrayInit+0x68>
		}
	for (i = 0; i < 29; i++){
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	e010      	b.n	8001500 <pressureArrayInit+0xb8>
			pressureright[i] = rightTavg + ((i + 1) * rightk);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <pressureArrayInit+0xec>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4353      	muls	r3, r2
 80014e8:	001a      	movs	r2, r3
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <pressureArrayInit+0xf0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	18d3      	adds	r3, r2, r3
 80014f0:	0019      	movs	r1, r3
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <pressureArrayInit+0xf4>)
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 29; i++){
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3301      	adds	r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b1c      	cmp	r3, #28
 8001504:	ddeb      	ble.n	80014de <pressureArrayInit+0x96>
		}
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	20000054 	.word	0x20000054
 8001514:	20000048 	.word	0x20000048
 8001518:	2000027c 	.word	0x2000027c
 800151c:	20000050 	.word	0x20000050
 8001520:	200002fc 	.word	0x200002fc
 8001524:	20000114 	.word	0x20000114
 8001528:	20000300 	.word	0x20000300
 800152c:	20000304 	.word	0x20000304
 8001530:	20000058 	.word	0x20000058
 8001534:	2000030c 	.word	0x2000030c
 8001538:	200002f4 	.word	0x200002f4
 800153c:	20000208 	.word	0x20000208

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_MspInit+0x44>)
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_MspInit+0x44>)
 800154c:	2101      	movs	r1, #1
 800154e:	430a      	orrs	r2, r1
 8001550:	619a      	str	r2, [r3, #24]
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_MspInit+0x44>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2201      	movs	r2, #1
 8001558:	4013      	ands	r3, r2
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_MspInit+0x44>)
 8001560:	69da      	ldr	r2, [r3, #28]
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_MspInit+0x44>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0549      	lsls	r1, r1, #21
 8001568:	430a      	orrs	r2, r1
 800156a:	61da      	str	r2, [r3, #28]
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_MspInit+0x44>)
 800156e:	69da      	ldr	r2, [r3, #28]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	055b      	lsls	r3, r3, #21
 8001574:	4013      	ands	r3, r2
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	2314      	movs	r3, #20
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	0018      	movs	r0, r3
 8001596:	2314      	movs	r3, #20
 8001598:	001a      	movs	r2, r3
 800159a:	2100      	movs	r1, #0
 800159c:	f003 fad9 	bl	8004b52 <memset>
  if(hadc->Instance==ADC1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a31      	ldr	r2, [pc, #196]	; (800166c <HAL_ADC_MspInit+0xe4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d15c      	bne.n	8001664 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015aa:	4b31      	ldr	r3, [pc, #196]	; (8001670 <HAL_ADC_MspInit+0xe8>)
 80015ac:	699a      	ldr	r2, [r3, #24]
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_ADC_MspInit+0xe8>)
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	0089      	lsls	r1, r1, #2
 80015b4:	430a      	orrs	r2, r1
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <HAL_ADC_MspInit+0xe8>)
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <HAL_ADC_MspInit+0xe8>)
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	4b29      	ldr	r3, [pc, #164]	; (8001670 <HAL_ADC_MspInit+0xe8>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	0289      	lsls	r1, r1, #10
 80015d0:	430a      	orrs	r2, r1
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_ADC_MspInit+0xe8>)
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	4013      	ands	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80015e2:	2114      	movs	r1, #20
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	223e      	movs	r2, #62	; 0x3e
 80015e8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2203      	movs	r2, #3
 80015ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	187a      	adds	r2, r7, r1
 80015f8:	2390      	movs	r3, #144	; 0x90
 80015fa:	05db      	lsls	r3, r3, #23
 80015fc:	0011      	movs	r1, r2
 80015fe:	0018      	movs	r0, r3
 8001600:	f001 fa2e 	bl	8002a60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_ADC_MspInit+0xec>)
 8001606:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <HAL_ADC_MspInit+0xf0>)
 8001608:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_ADC_MspInit+0xec>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_ADC_MspInit+0xec>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_ADC_MspInit+0xec>)
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_ADC_MspInit+0xec>)
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_ADC_MspInit+0xec>)
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_ADC_MspInit+0xec>)
 800162e:	2220      	movs	r2, #32
 8001630:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_ADC_MspInit+0xec>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_ADC_MspInit+0xec>)
 800163a:	0018      	movs	r0, r3
 800163c:	f001 f832 	bl	80026a4 <HAL_DMA_Init>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001644:	f7ff fdb6 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_ADC_MspInit+0xec>)
 800164c:	631a      	str	r2, [r3, #48]	; 0x30
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_ADC_MspInit+0xec>)
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	200c      	movs	r0, #12
 800165a:	f000 fff1 	bl	8002640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800165e:	200c      	movs	r0, #12
 8001660:	f001 f803 	bl	800266a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b00a      	add	sp, #40	; 0x28
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40012400 	.word	0x40012400
 8001670:	40021000 	.word	0x40021000
 8001674:	20000318 	.word	0x20000318
 8001678:	40020008 	.word	0x40020008

0800167c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	2314      	movs	r3, #20
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	0018      	movs	r0, r3
 800168a:	2314      	movs	r3, #20
 800168c:	001a      	movs	r2, r3
 800168e:	2100      	movs	r1, #0
 8001690:	f003 fa5f 	bl	8004b52 <memset>
  if(htim_base->Instance==TIM3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <HAL_TIM_Base_MspInit+0x9c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d138      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_TIM_Base_MspInit+0xa0>)
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_TIM_Base_MspInit+0xa0>)
 80016a4:	2102      	movs	r1, #2
 80016a6:	430a      	orrs	r2, r1
 80016a8:	61da      	str	r2, [r3, #28]
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_TIM_Base_MspInit+0xa0>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	2202      	movs	r2, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_TIM_Base_MspInit+0xa0>)
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_TIM_Base_MspInit+0xa0>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	0289      	lsls	r1, r1, #10
 80016c0:	430a      	orrs	r2, r1
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_TIM_Base_MspInit+0xa0>)
 80016c6:	695a      	ldr	r2, [r3, #20]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	029b      	lsls	r3, r3, #10
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016d2:	2114      	movs	r1, #20
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2240      	movs	r2, #64	; 0x40
 80016d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2202      	movs	r2, #2
 80016de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2201      	movs	r2, #1
 80016f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	187a      	adds	r2, r7, r1
 80016f4:	2390      	movs	r3, #144	; 0x90
 80016f6:	05db      	lsls	r3, r3, #23
 80016f8:	0011      	movs	r1, r2
 80016fa:	0018      	movs	r0, r3
 80016fc:	f001 f9b0 	bl	8002a60 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2010      	movs	r0, #16
 8001706:	f000 ff9b 	bl	8002640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800170a:	2010      	movs	r0, #16
 800170c:	f000 ffad 	bl	800266a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b00a      	add	sp, #40	; 0x28
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40000400 	.word	0x40000400
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	2314      	movs	r3, #20
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	0018      	movs	r0, r3
 800172e:	2314      	movs	r3, #20
 8001730:	001a      	movs	r2, r3
 8001732:	2100      	movs	r1, #0
 8001734:	f003 fa0d 	bl	8004b52 <memset>
  if(huart->Instance==USART1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a21      	ldr	r2, [pc, #132]	; (80017c4 <HAL_UART_MspInit+0xa4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d13b      	bne.n	80017ba <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_UART_MspInit+0xa8>)
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_UART_MspInit+0xa8>)
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	01c9      	lsls	r1, r1, #7
 800174c:	430a      	orrs	r2, r1
 800174e:	619a      	str	r2, [r3, #24]
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_UART_MspInit+0xa8>)
 8001752:	699a      	ldr	r2, [r3, #24]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	01db      	lsls	r3, r3, #7
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_UART_MspInit+0xa8>)
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_UART_MspInit+0xa8>)
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	0289      	lsls	r1, r1, #10
 8001768:	430a      	orrs	r2, r1
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_UART_MspInit+0xa8>)
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	029b      	lsls	r3, r3, #10
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800177a:	2114      	movs	r1, #20
 800177c:	187b      	adds	r3, r7, r1
 800177e:	22c0      	movs	r2, #192	; 0xc0
 8001780:	00d2      	lsls	r2, r2, #3
 8001782:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	187b      	adds	r3, r7, r1
 8001786:	2202      	movs	r2, #2
 8001788:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001790:	187b      	adds	r3, r7, r1
 8001792:	2203      	movs	r2, #3
 8001794:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2201      	movs	r2, #1
 800179a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	187a      	adds	r2, r7, r1
 800179e:	2390      	movs	r3, #144	; 0x90
 80017a0:	05db      	lsls	r3, r3, #23
 80017a2:	0011      	movs	r1, r2
 80017a4:	0018      	movs	r0, r3
 80017a6:	f001 f95b 	bl	8002a60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	201b      	movs	r0, #27
 80017b0:	f000 ff46 	bl	8002640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017b4:	201b      	movs	r0, #27
 80017b6:	f000 ff58 	bl	800266a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b00a      	add	sp, #40	; 0x28
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	40013800 	.word	0x40013800
 80017c8:	40021000 	.word	0x40021000

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 f9b4 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	46c0      	nop			; (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <DMA1_Channel1_IRQHandler+0x14>)
 8001806:	0018      	movs	r0, r3
 8001808:	f001 f840 	bl	800288c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	20000318 	.word	0x20000318

08001818 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <ADC1_COMP_IRQHandler+0x14>)
 800181e:	0018      	movs	r0, r3
 8001820:	f000 fb7c 	bl	8001f1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	20000360 	.word	0x20000360

08001830 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* Start ADC-DMA conversions to place the raw FSR ADC values into the RawFSRInput buffer */
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)RawFSRInput, 5);
 8001834:	4942      	ldr	r1, [pc, #264]	; (8001940 <TIM3_IRQHandler+0x110>)
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <TIM3_IRQHandler+0x114>)
 8001838:	2205      	movs	r2, #5
 800183a:	0018      	movs	r0, r3
 800183c:	f000 faec 	bl	8001e18 <HAL_ADC_Start_DMA>
  RawFSRAvg = (RawFSRInput[0] + RawFSRInput[1] + RawFSRInput[2] + RawFSRInput[3] + RawFSRInput[4]) / 5;
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <TIM3_IRQHandler+0x110>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <TIM3_IRQHandler+0x110>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	18d2      	adds	r2, r2, r3
 800184a:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <TIM3_IRQHandler+0x110>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	18d2      	adds	r2, r2, r3
 8001850:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <TIM3_IRQHandler+0x110>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	18d2      	adds	r2, r2, r3
 8001856:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <TIM3_IRQHandler+0x110>)
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	18d3      	adds	r3, r2, r3
 800185c:	2105      	movs	r1, #5
 800185e:	0018      	movs	r0, r3
 8001860:	f7fe fc52 	bl	8000108 <__udivsi3>
 8001864:	0003      	movs	r3, r0
 8001866:	001a      	movs	r2, r3
 8001868:	4b37      	ldr	r3, [pc, #220]	; (8001948 <TIM3_IRQHandler+0x118>)
 800186a:	601a      	str	r2, [r3, #0]
//	  // perform calibration polling every 10ms when in calibration mode and skip other speed/direction computations
//	  // calibration computations taken care of in calibration.c
//	  calADCavg = calADCavg + RawFSRAvg;
//  }
//  else {
	  fourTavg();
 800186c:	f7ff fd5a 	bl	8001324 <fourTavg>
	  fourk();
 8001870:	f7ff fda2 	bl	80013b8 <fourk>
	  pressureArrayInit();
 8001874:	f7ff fde8 	bl	8001448 <pressureArrayInit>

	  direction = controlScheme(RawFSRInput);
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <TIM3_IRQHandler+0x110>)
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff fa02 	bl	8000c84 <controlScheme>
 8001880:	0003      	movs	r3, r0
 8001882:	001a      	movs	r2, r3
 8001884:	4b31      	ldr	r3, [pc, #196]	; (800194c <TIM3_IRQHandler+0x11c>)
 8001886:	701a      	strb	r2, [r3, #0]
	  if (direction == 3){
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <TIM3_IRQHandler+0x11c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d10c      	bne.n	80018aa <TIM3_IRQHandler+0x7a>
		  // if direction is forward, compute speed based on global forward motion measurements
		  speed = conditional(frontTr, frontTmax, RawFSRAvg, pressurefront);
 8001890:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <TIM3_IRQHandler+0x120>)
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <TIM3_IRQHandler+0x124>)
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <TIM3_IRQHandler+0x118>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <TIM3_IRQHandler+0x128>)
 800189e:	f7ff fc8e 	bl	80011be <conditional>
 80018a2:	0003      	movs	r3, r0
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <TIM3_IRQHandler+0x12c>)
 80018a8:	701a      	strb	r2, [r3, #0]
	  }
	  if (direction == 0){
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <TIM3_IRQHandler+0x11c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <TIM3_IRQHandler+0x9c>
		  // if direction is reverse, compute speed based on global reverse motion measurements
		  speed = conditional(reverseTr, reverseTmax, RawFSRAvg, pressurereverse);
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <TIM3_IRQHandler+0x130>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <TIM3_IRQHandler+0x134>)
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <TIM3_IRQHandler+0x118>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <TIM3_IRQHandler+0x138>)
 80018c0:	f7ff fc7d 	bl	80011be <conditional>
 80018c4:	0003      	movs	r3, r0
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <TIM3_IRQHandler+0x12c>)
 80018ca:	701a      	strb	r2, [r3, #0]
	  }
	  if (direction == 2){
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <TIM3_IRQHandler+0x11c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d10c      	bne.n	80018ee <TIM3_IRQHandler+0xbe>
		  // if direction is left, compute speed based on global left motion measurements
		  speed = conditional(leftTr, leftTmax, RawFSRAvg, pressureleft);
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <TIM3_IRQHandler+0x13c>)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <TIM3_IRQHandler+0x140>)
 80018da:	6819      	ldr	r1, [r3, #0]
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <TIM3_IRQHandler+0x118>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <TIM3_IRQHandler+0x144>)
 80018e2:	f7ff fc6c 	bl	80011be <conditional>
 80018e6:	0003      	movs	r3, r0
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <TIM3_IRQHandler+0x12c>)
 80018ec:	701a      	strb	r2, [r3, #0]
	  }
	  if (direction == 1){
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <TIM3_IRQHandler+0x11c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d10c      	bne.n	8001910 <TIM3_IRQHandler+0xe0>
		  // if direction is right, compute speed based on global right motion measurements
		  speed = conditional(rightTr, rightTmax, RawFSRAvg, pressureright);
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <TIM3_IRQHandler+0x148>)
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <TIM3_IRQHandler+0x14c>)
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <TIM3_IRQHandler+0x118>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <TIM3_IRQHandler+0x150>)
 8001904:	f7ff fc5b 	bl	80011be <conditional>
 8001908:	0003      	movs	r3, r0
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <TIM3_IRQHandler+0x12c>)
 800190e:	701a      	strb	r2, [r3, #0]
	  }
//  }

  // Enable IT does nothing when in calibration mode
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 8001910:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <TIM3_IRQHandler+0x154>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <TIM3_IRQHandler+0x154>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <TIM3_IRQHandler+0x158>)
 8001922:	0018      	movs	r0, r3
 8001924:	f001 ffc4 	bl	80038b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <TIM3_IRQHandler+0x154>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <TIM3_IRQHandler+0x154>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	438a      	bics	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	2000002c 	.word	0x2000002c
 8001944:	20000360 	.word	0x20000360
 8001948:	20000044 	.word	0x20000044
 800194c:	20000110 	.word	0x20000110
 8001950:	2000010c 	.word	0x2000010c
 8001954:	200002f0 	.word	0x200002f0
 8001958:	2000027c 	.word	0x2000027c
 800195c:	20000310 	.word	0x20000310
 8001960:	200002f8 	.word	0x200002f8
 8001964:	20000314 	.word	0x20000314
 8001968:	20000114 	.word	0x20000114
 800196c:	2000035c 	.word	0x2000035c
 8001970:	2000004c 	.word	0x2000004c
 8001974:	20000058 	.word	0x20000058
 8001978:	200003a0 	.word	0x200003a0
 800197c:	20000040 	.word	0x20000040
 8001980:	20000208 	.word	0x20000208
 8001984:	20000188 	.word	0x20000188
 8001988:	200000cc 	.word	0x200000cc

0800198c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b0a1      	sub	sp, #132	; 0x84
 8001990:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE BEGIN USART1_IRQn 0 */

	// only call interrupt-driven transmission handler if in gameplay mode
	if(mode == 1) {
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <USART1_IRQHandler+0x50>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d117      	bne.n	80019ca <USART1_IRQHandler+0x3e>
		transmission_handler(huart1, direction, speed, mode);
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <USART1_IRQHandler+0x54>)
 800199c:	781a      	ldrb	r2, [r3, #0]
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <USART1_IRQHandler+0x58>)
 80019a0:	7819      	ldrb	r1, [r3, #0]
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <USART1_IRQHandler+0x50>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4c10      	ldr	r4, [pc, #64]	; (80019e8 <USART1_IRQHandler+0x5c>)
 80019a8:	931e      	str	r3, [sp, #120]	; 0x78
 80019aa:	911d      	str	r1, [sp, #116]	; 0x74
 80019ac:	921c      	str	r2, [sp, #112]	; 0x70
 80019ae:	466b      	mov	r3, sp
 80019b0:	0018      	movs	r0, r3
 80019b2:	0023      	movs	r3, r4
 80019b4:	3310      	adds	r3, #16
 80019b6:	2270      	movs	r2, #112	; 0x70
 80019b8:	0019      	movs	r1, r3
 80019ba:	f003 f8c1 	bl	8004b40 <memcpy>
 80019be:	6820      	ldr	r0, [r4, #0]
 80019c0:	6861      	ldr	r1, [r4, #4]
 80019c2:	68a2      	ldr	r2, [r4, #8]
 80019c4:	68e3      	ldr	r3, [r4, #12]
 80019c6:	f000 f817 	bl	80019f8 <transmission_handler>
	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <USART1_IRQHandler+0x5c>)
 80019cc:	0018      	movs	r0, r3
 80019ce:	f002 fbef 	bl	80041b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b001      	add	sp, #4
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000110 	.word	0x20000110
 80019e4:	20000310 	.word	0x20000310
 80019e8:	20000188 	.word	0x20000188

080019ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <transmission_handler>:

/* VARIABLES */
uint8_t txbuffer;

/* FUNCTIONS */
void transmission_handler(UART_HandleTypeDef huart, uint8_t dir, uint8_t speed, int mode) {
 80019f8:	b084      	sub	sp, #16
 80019fa:	b5b0      	push	{r4, r5, r7, lr}
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	2510      	movs	r5, #16
 8001a00:	197c      	adds	r4, r7, r5
 8001a02:	6020      	str	r0, [r4, #0]
 8001a04:	6061      	str	r1, [r4, #4]
 8001a06:	60a2      	str	r2, [r4, #8]
 8001a08:	60e3      	str	r3, [r4, #12]

	dir = dir << 5;
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	4694      	mov	ip, r2
 8001a10:	44bc      	add	ip, r7
 8001a12:	4463      	add	r3, ip
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	2110      	movs	r1, #16
 8001a18:	468c      	mov	ip, r1
 8001a1a:	44bc      	add	ip, r7
 8001a1c:	4462      	add	r2, ip
 8001a1e:	7812      	ldrb	r2, [r2, #0]
 8001a20:	0152      	lsls	r2, r2, #5
 8001a22:	701a      	strb	r2, [r3, #0]
	mode = mode << 7;
 8001a24:	2298      	movs	r2, #152	; 0x98
 8001a26:	18bb      	adds	r3, r7, r2
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	01db      	lsls	r3, r3, #7
 8001a2c:	18b9      	adds	r1, r7, r2
 8001a2e:	600b      	str	r3, [r1, #0]
	txbuffer = (mode | dir | speed);
 8001a30:	18bb      	adds	r3, r7, r2
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b25a      	sxtb	r2, r3
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	2110      	movs	r1, #16
 8001a3a:	468c      	mov	ip, r1
 8001a3c:	44bc      	add	ip, r7
 8001a3e:	4463      	add	r3, ip
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b25a      	sxtb	r2, r3
 8001a48:	2384      	movs	r3, #132	; 0x84
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	468c      	mov	ip, r1
 8001a4e:	44bc      	add	ip, r7
 8001a50:	4463      	add	r3, ip
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <transmission_handler+0x80>)
 8001a5e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart, (uint8_t *)&txbuffer, 1, 100);
 8001a60:	4905      	ldr	r1, [pc, #20]	; (8001a78 <transmission_handler+0x80>)
 8001a62:	1978      	adds	r0, r7, r5
 8001a64:	2364      	movs	r3, #100	; 0x64
 8001a66:	2201      	movs	r2, #1
 8001a68:	f002 fafa 	bl	8004060 <HAL_UART_Transmit>
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bcb0      	pop	{r4, r5, r7}
 8001a72:	bc08      	pop	{r3}
 8001a74:	b004      	add	sp, #16
 8001a76:	4718      	bx	r3
 8001a78:	200003a4 	.word	0x200003a4

08001a7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a82:	490e      	ldr	r1, [pc, #56]	; (8001abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a84:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <LoopForever+0xe>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a98:	4c0b      	ldr	r4, [pc, #44]	; (8001ac8 <LoopForever+0x16>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001aa6:	f7ff ffa1 	bl	80019ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001aaa:	f003 f825 	bl	8004af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aae:	f7ff f945 	bl	8000d3c <main>

08001ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab2:	e7fe      	b.n	8001ab2 <LoopForever>
  ldr   r0, =_estack
 8001ab4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ac0:	08004bbc 	.word	0x08004bbc
  ldr r2, =_sbss
 8001ac4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ac8:	200003ac 	.word	0x200003ac

08001acc <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <CEC_CAN_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_Init+0x24>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_Init+0x24>)
 8001ada:	2110      	movs	r1, #16
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f000 f809 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae6:	f7ff fd2b 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	40022000 	.word	0x40022000

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_InitTick+0x5c>)
 8001b02:	681c      	ldr	r4, [r3, #0]
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_InitTick+0x60>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	0019      	movs	r1, r3
 8001b0a:	23fa      	movs	r3, #250	; 0xfa
 8001b0c:	0098      	lsls	r0, r3, #2
 8001b0e:	f7fe fafb 	bl	8000108 <__udivsi3>
 8001b12:	0003      	movs	r3, r0
 8001b14:	0019      	movs	r1, r3
 8001b16:	0020      	movs	r0, r4
 8001b18:	f7fe faf6 	bl	8000108 <__udivsi3>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f000 fdb3 	bl	800268a <HAL_SYSTICK_Config>
 8001b24:	1e03      	subs	r3, r0, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e00f      	b.n	8001b4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d80b      	bhi.n	8001b4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	2301      	movs	r3, #1
 8001b36:	425b      	negs	r3, r3
 8001b38:	2200      	movs	r2, #0
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 fd80 	bl	8002640 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_InitTick+0x64>)
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b003      	add	sp, #12
 8001b52:	bd90      	pop	{r4, r7, pc}
 8001b54:	20000004 	.word	0x20000004
 8001b58:	2000000c 	.word	0x2000000c
 8001b5c:	20000008 	.word	0x20000008

08001b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_IncTick+0x1c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	001a      	movs	r2, r3
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_IncTick+0x20>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	18d2      	adds	r2, r2, r3
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_IncTick+0x20>)
 8001b72:	601a      	str	r2, [r3, #0]
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	200003a8 	.word	0x200003a8

08001b84 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <HAL_GetTick+0x10>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	200003a8 	.word	0x200003a8

08001b98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e125      	b.n	8001e02 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10a      	bne.n	8001bd4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2234      	movs	r2, #52	; 0x34
 8001bc8:	2100      	movs	r1, #0
 8001bca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f7ff fcda 	bl	8001588 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	2210      	movs	r2, #16
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d000      	beq.n	8001be0 <HAL_ADC_Init+0x48>
 8001bde:	e103      	b.n	8001de8 <HAL_ADC_Init+0x250>
 8001be0:	230f      	movs	r3, #15
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d000      	beq.n	8001bec <HAL_ADC_Init+0x54>
 8001bea:	e0fd      	b.n	8001de8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001bf6:	d000      	beq.n	8001bfa <HAL_ADC_Init+0x62>
 8001bf8:	e0f6      	b.n	8001de8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfe:	4a83      	ldr	r2, [pc, #524]	; (8001e0c <HAL_ADC_Init+0x274>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	2202      	movs	r2, #2
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2203      	movs	r2, #3
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d112      	bne.n	8001c3e <HAL_ADC_Init+0xa6>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d009      	beq.n	8001c3a <HAL_ADC_Init+0xa2>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	401a      	ands	r2, r3
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_Init+0xa6>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_ADC_Init+0xa8>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d116      	bne.n	8001c72 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2218      	movs	r2, #24
 8001c4c:	4393      	bics	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	0899      	lsrs	r1, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4964      	ldr	r1, [pc, #400]	; (8001e10 <HAL_ADC_Init+0x278>)
 8001c7e:	400a      	ands	r2, r1
 8001c80:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7e1b      	ldrb	r3, [r3, #24]
 8001c86:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e5b      	ldrb	r3, [r3, #25]
 8001c8c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7e9b      	ldrb	r3, [r3, #26]
 8001c94:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001c96:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d002      	beq.n	8001ca6 <HAL_ADC_Init+0x10e>
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	015b      	lsls	r3, r3, #5
 8001ca4:	e000      	b.n	8001ca8 <HAL_ADC_Init+0x110>
 8001ca6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ca8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001cae:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_Init+0x124>
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e000      	b.n	8001cbe <HAL_ADC_Init+0x126>
 8001cbc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001cbe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2124      	movs	r1, #36	; 0x24
 8001cc4:	5c5b      	ldrb	r3, [r3, r1]
 8001cc6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001cc8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7edb      	ldrb	r3, [r3, #27]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d115      	bne.n	8001d04 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7e9b      	ldrb	r3, [r3, #26]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d105      	bne.n	8001cec <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2280      	movs	r2, #128	; 0x80
 8001ce4:	0252      	lsls	r2, r2, #9
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	e00b      	b.n	8001d04 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69da      	ldr	r2, [r3, #28]
 8001d08:	23c2      	movs	r3, #194	; 0xc2
 8001d0a:	33ff      	adds	r3, #255	; 0xff
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d007      	beq.n	8001d20 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68d9      	ldr	r1, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	055b      	lsls	r3, r3, #21
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d01b      	beq.n	8001d74 <HAL_ADC_Init+0x1dc>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d017      	beq.n	8001d74 <HAL_ADC_Init+0x1dc>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d013      	beq.n	8001d74 <HAL_ADC_Init+0x1dc>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d00f      	beq.n	8001d74 <HAL_ADC_Init+0x1dc>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d00b      	beq.n	8001d74 <HAL_ADC_Init+0x1dc>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	2b05      	cmp	r3, #5
 8001d62:	d007      	beq.n	8001d74 <HAL_ADC_Init+0x1dc>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	2b06      	cmp	r3, #6
 8001d6a:	d003      	beq.n	8001d74 <HAL_ADC_Init+0x1dc>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	2b07      	cmp	r3, #7
 8001d72:	d112      	bne.n	8001d9a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2107      	movs	r1, #7
 8001d80:	438a      	bics	r2, r1
 8001d82:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6959      	ldr	r1, [r3, #20]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	2207      	movs	r2, #7
 8001d90:	401a      	ands	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_ADC_Init+0x27c>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d10b      	bne.n	8001dc2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db4:	2203      	movs	r2, #3
 8001db6:	4393      	bics	r3, r2
 8001db8:	2201      	movs	r2, #1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001dc0:	e01c      	b.n	8001dfc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	2212      	movs	r2, #18
 8001dc8:	4393      	bics	r3, r2
 8001dca:	2210      	movs	r2, #16
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001dde:	230f      	movs	r3, #15
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001de6:	e009      	b.n	8001dfc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	2210      	movs	r2, #16
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001df4:	230f      	movs	r3, #15
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	781b      	ldrb	r3, [r3, #0]
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b004      	add	sp, #16
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	fffffefd 	.word	0xfffffefd
 8001e10:	fffe0219 	.word	0xfffe0219
 8001e14:	833fffe7 	.word	0x833fffe7

08001e18 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e24:	2317      	movs	r3, #23
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2204      	movs	r2, #4
 8001e34:	4013      	ands	r3, r2
 8001e36:	d15e      	bne.n	8001ef6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2234      	movs	r2, #52	; 0x34
 8001e3c:	5c9b      	ldrb	r3, [r3, r2]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Start_DMA+0x2e>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e05e      	b.n	8001f04 <HAL_ADC_Start_DMA+0xec>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2234      	movs	r2, #52	; 0x34
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	7e5b      	ldrb	r3, [r3, #25]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d007      	beq.n	8001e66 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001e56:	2317      	movs	r3, #23
 8001e58:	18fc      	adds	r4, r7, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f000 fa43 	bl	80022e8 <ADC_Enable>
 8001e62:	0003      	movs	r3, r0
 8001e64:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e66:	2317      	movs	r3, #23
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d146      	bne.n	8001efe <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e74:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <HAL_ADC_Start_DMA+0xf4>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	0052      	lsls	r2, r2, #1
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2234      	movs	r2, #52	; 0x34
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <HAL_ADC_Start_DMA+0xf8>)
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <HAL_ADC_Start_DMA+0xfc>)
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_ADC_Start_DMA+0x100>)
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	221c      	movs	r2, #28
 8001eae:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2110      	movs	r1, #16
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3340      	adds	r3, #64	; 0x40
 8001eda:	0019      	movs	r1, r3
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f000 fc28 	bl	8002734 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2104      	movs	r1, #4
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	e003      	b.n	8001efe <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ef6:	2317      	movs	r3, #23
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	2202      	movs	r2, #2
 8001efc:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001efe:	2317      	movs	r3, #23
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	781b      	ldrb	r3, [r3, #0]
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b007      	add	sp, #28
 8001f0a:	bd90      	pop	{r4, r7, pc}
 8001f0c:	fffff0fe 	.word	0xfffff0fe
 8001f10:	080023e1 	.word	0x080023e1
 8001f14:	08002495 	.word	0x08002495
 8001f18:	080024b3 	.word	0x080024b3

08001f1c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d106      	bne.n	8001f40 <HAL_ADC_IRQHandler+0x24>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d00d      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2208      	movs	r2, #8
 8001f48:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d14f      	bne.n	8001fee <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2208      	movs	r2, #8
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d148      	bne.n	8001fee <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	2210      	movs	r2, #16
 8001f62:	4013      	ands	r3, r2
 8001f64:	d106      	bne.n	8001f74 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	0092      	lsls	r2, r2, #2
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	23c0      	movs	r3, #192	; 0xc0
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d12d      	bne.n	8001fde <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d129      	bne.n	8001fde <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2208      	movs	r2, #8
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d122      	bne.n	8001fde <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d110      	bne.n	8001fc6 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	210c      	movs	r1, #12
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb8:	4a33      	ldr	r2, [pc, #204]	; (8002088 <HAL_ADC_IRQHandler+0x16c>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	639a      	str	r2, [r3, #56]	; 0x38
 8001fc4:	e00b      	b.n	8001fde <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	2220      	movs	r2, #32
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f000 f853 	bl	800208c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	220c      	movs	r2, #12
 8001fec:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b80      	cmp	r3, #128	; 0x80
 8001ffa:	d115      	bne.n	8002028 <HAL_ADC_IRQHandler+0x10c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	4013      	ands	r3, r2
 8002006:	2b80      	cmp	r3, #128	; 0x80
 8002008:	d10e      	bne.n	8002028 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	0252      	lsls	r2, r2, #9
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	0018      	movs	r0, r3
 800201c:	f000 f846 	bl	80020ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2210      	movs	r2, #16
 8002030:	4013      	ands	r3, r2
 8002032:	2b10      	cmp	r3, #16
 8002034:	d123      	bne.n	800207e <HAL_ADC_IRQHandler+0x162>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2210      	movs	r2, #16
 800203e:	4013      	ands	r3, r2
 8002040:	2b10      	cmp	r3, #16
 8002042:	d11c      	bne.n	800207e <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	2b01      	cmp	r3, #1
 800204a:	d006      	beq.n	800205a <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002056:	2b01      	cmp	r3, #1
 8002058:	d10d      	bne.n	8002076 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	2202      	movs	r2, #2
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2210      	movs	r2, #16
 800206c:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 f823 	bl	80020bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2210      	movs	r2, #16
 800207c:	601a      	str	r2, [r3, #0]
  }

}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b002      	add	sp, #8
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	fffffefe 	.word	0xfffffefe

0800208c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d6:	230f      	movs	r3, #15
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	055b      	lsls	r3, r3, #21
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d011      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x46>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d00d      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x46>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d009      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x46>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	2b03      	cmp	r3, #3
 8002104:	d005      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x46>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	2b04      	cmp	r3, #4
 800210c:	d001      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x46>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2234      	movs	r2, #52	; 0x34
 8002116:	5c9b      	ldrb	r3, [r3, r2]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x54>
 800211c:	2302      	movs	r3, #2
 800211e:	e0d0      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x1f6>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2234      	movs	r2, #52	; 0x34
 8002124:	2101      	movs	r1, #1
 8002126:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2204      	movs	r2, #4
 8002130:	4013      	ands	r3, r2
 8002132:	d000      	beq.n	8002136 <HAL_ADC_ConfigChannel+0x6a>
 8002134:	e0b4      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4a64      	ldr	r2, [pc, #400]	; (80022cc <HAL_ADC_ConfigChannel+0x200>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d100      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x76>
 8002140:	e082      	b.n	8002248 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2201      	movs	r2, #1
 800214e:	409a      	lsls	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	055b      	lsls	r3, r3, #21
 8002160:	429a      	cmp	r2, r3
 8002162:	d037      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x108>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d033      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x108>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	2b02      	cmp	r3, #2
 8002172:	d02f      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x108>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	2b03      	cmp	r3, #3
 800217a:	d02b      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x108>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	2b04      	cmp	r3, #4
 8002182:	d027      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x108>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	2b05      	cmp	r3, #5
 800218a:	d023      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x108>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	2b06      	cmp	r3, #6
 8002192:	d01f      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x108>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	2b07      	cmp	r3, #7
 800219a:	d01b      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2107      	movs	r1, #7
 80021a8:	400b      	ands	r3, r1
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d012      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2107      	movs	r1, #7
 80021ba:	438a      	bics	r2, r1
 80021bc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6959      	ldr	r1, [r3, #20]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2207      	movs	r2, #7
 80021ca:	401a      	ands	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d007      	beq.n	80021ec <HAL_ADC_ConfigChannel+0x120>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b11      	cmp	r3, #17
 80021e2:	d003      	beq.n	80021ec <HAL_ADC_ConfigChannel+0x120>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b12      	cmp	r3, #18
 80021ea:	d163      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80021ec:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_ADC_ConfigChannel+0x204>)
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d009      	beq.n	800220c <HAL_ADC_ConfigChannel+0x140>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b11      	cmp	r3, #17
 80021fe:	d102      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x13a>
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	03db      	lsls	r3, r3, #15
 8002204:	e004      	b.n	8002210 <HAL_ADC_ConfigChannel+0x144>
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	045b      	lsls	r3, r3, #17
 800220a:	e001      	b.n	8002210 <HAL_ADC_ConfigChannel+0x144>
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	4a2f      	ldr	r2, [pc, #188]	; (80022d0 <HAL_ADC_ConfigChannel+0x204>)
 8002212:	430b      	orrs	r3, r1
 8002214:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b10      	cmp	r3, #16
 800221c:	d14a      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800221e:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <HAL_ADC_ConfigChannel+0x208>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	492d      	ldr	r1, [pc, #180]	; (80022d8 <HAL_ADC_ConfigChannel+0x20c>)
 8002224:	0018      	movs	r0, r3
 8002226:	f7fd ff6f 	bl	8000108 <__udivsi3>
 800222a:	0003      	movs	r3, r0
 800222c:	001a      	movs	r2, r3
 800222e:	0013      	movs	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	189b      	adds	r3, r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002238:	e002      	b.n	8002240 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3b01      	subs	r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f9      	bne.n	800223a <HAL_ADC_ConfigChannel+0x16e>
 8002246:	e035      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2101      	movs	r1, #1
 8002254:	4099      	lsls	r1, r3
 8002256:	000b      	movs	r3, r1
 8002258:	43d9      	mvns	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	400a      	ands	r2, r1
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b10      	cmp	r3, #16
 8002268:	d007      	beq.n	800227a <HAL_ADC_ConfigChannel+0x1ae>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b11      	cmp	r3, #17
 8002270:	d003      	beq.n	800227a <HAL_ADC_ConfigChannel+0x1ae>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b12      	cmp	r3, #18
 8002278:	d11c      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_ADC_ConfigChannel+0x204>)
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b10      	cmp	r3, #16
 8002284:	d007      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x1ca>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b11      	cmp	r3, #17
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x1c6>
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_ADC_ConfigChannel+0x210>)
 8002290:	e002      	b.n	8002298 <HAL_ADC_ConfigChannel+0x1cc>
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_ADC_ConfigChannel+0x214>)
 8002294:	e000      	b.n	8002298 <HAL_ADC_ConfigChannel+0x1cc>
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_ADC_ConfigChannel+0x218>)
 8002298:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <HAL_ADC_ConfigChannel+0x204>)
 800229a:	400b      	ands	r3, r1
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e009      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	2220      	movs	r2, #32
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80022ac:	230f      	movs	r3, #15
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2234      	movs	r2, #52	; 0x34
 80022b8:	2100      	movs	r1, #0
 80022ba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80022bc:	230f      	movs	r3, #15
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	781b      	ldrb	r3, [r3, #0]
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b004      	add	sp, #16
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	00001001 	.word	0x00001001
 80022d0:	40012708 	.word	0x40012708
 80022d4:	20000004 	.word	0x20000004
 80022d8:	000f4240 	.word	0x000f4240
 80022dc:	ffbfffff 	.word	0xffbfffff
 80022e0:	feffffff 	.word	0xfeffffff
 80022e4:	ff7fffff 	.word	0xff7fffff

080022e8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2203      	movs	r2, #3
 8002300:	4013      	ands	r3, r2
 8002302:	2b01      	cmp	r3, #1
 8002304:	d112      	bne.n	800232c <ADC_Enable+0x44>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	4013      	ands	r3, r2
 8002310:	2b01      	cmp	r3, #1
 8002312:	d009      	beq.n	8002328 <ADC_Enable+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	401a      	ands	r2, r3
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	429a      	cmp	r2, r3
 8002326:	d101      	bne.n	800232c <ADC_Enable+0x44>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <ADC_Enable+0x46>
 800232c:	2300      	movs	r3, #0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d14b      	bne.n	80023ca <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <ADC_Enable+0xec>)
 800233a:	4013      	ands	r3, r2
 800233c:	d00d      	beq.n	800235a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	2210      	movs	r2, #16
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	2201      	movs	r2, #1
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e038      	b.n	80023cc <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <ADC_Enable+0xf0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	491b      	ldr	r1, [pc, #108]	; (80023dc <ADC_Enable+0xf4>)
 8002370:	0018      	movs	r0, r3
 8002372:	f7fd fec9 	bl	8000108 <__udivsi3>
 8002376:	0003      	movs	r3, r0
 8002378:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800237a:	e002      	b.n	8002382 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	3b01      	subs	r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f9      	bne.n	800237c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002388:	f7ff fbfc 	bl	8001b84 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002390:	e014      	b.n	80023bc <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002392:	f7ff fbf7 	bl	8001b84 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d90d      	bls.n	80023bc <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	2210      	movs	r2, #16
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	2201      	movs	r2, #1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e007      	b.n	80023cc <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2201      	movs	r2, #1
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d1e3      	bne.n	8002392 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b004      	add	sp, #16
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	80000017 	.word	0x80000017
 80023d8:	20000004 	.word	0x20000004
 80023dc:	000f4240 	.word	0x000f4240

080023e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	2250      	movs	r2, #80	; 0x50
 80023f4:	4013      	ands	r3, r2
 80023f6:	d140      	bne.n	800247a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	23c0      	movs	r3, #192	; 0xc0
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	4013      	ands	r3, r2
 8002412:	d12d      	bne.n	8002470 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002418:	2b00      	cmp	r3, #0
 800241a:	d129      	bne.n	8002470 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2208      	movs	r2, #8
 8002424:	4013      	ands	r3, r2
 8002426:	2b08      	cmp	r3, #8
 8002428:	d122      	bne.n	8002470 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2204      	movs	r2, #4
 8002432:	4013      	ands	r3, r2
 8002434:	d110      	bne.n	8002458 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	210c      	movs	r1, #12
 8002442:	438a      	bics	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	4a11      	ldr	r2, [pc, #68]	; (8002490 <ADC_DMAConvCplt+0xb0>)
 800244c:	4013      	ands	r3, r2
 800244e:	2201      	movs	r2, #1
 8002450:	431a      	orrs	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
 8002456:	e00b      	b.n	8002470 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	2220      	movs	r2, #32
 800245e:	431a      	orrs	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	2201      	movs	r2, #1
 800246a:	431a      	orrs	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	0018      	movs	r0, r3
 8002474:	f7ff fe0a 	bl	800208c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002478:	e005      	b.n	8002486 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	0010      	movs	r0, r2
 8002484:	4798      	blx	r3
}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b004      	add	sp, #16
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	fffffefe 	.word	0xfffffefe

08002494 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff fdf9 	bl	800209c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b004      	add	sp, #16
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	2240      	movs	r2, #64	; 0x40
 80024c6:	431a      	orrs	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	2204      	movs	r2, #4
 80024d2:	431a      	orrs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	0018      	movs	r0, r3
 80024dc:	f7ff fdee 	bl	80020bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	0002      	movs	r2, r0
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024f4:	1dfb      	adds	r3, r7, #7
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b7f      	cmp	r3, #127	; 0x7f
 80024fa:	d809      	bhi.n	8002510 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fc:	1dfb      	adds	r3, r7, #7
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	001a      	movs	r2, r3
 8002502:	231f      	movs	r3, #31
 8002504:	401a      	ands	r2, r3
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <__NVIC_EnableIRQ+0x30>)
 8002508:	2101      	movs	r1, #1
 800250a:	4091      	lsls	r1, r2
 800250c:	000a      	movs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
  }
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}
 8002518:	e000e100 	.word	0xe000e100

0800251c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	0002      	movs	r2, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b7f      	cmp	r3, #127	; 0x7f
 8002530:	d828      	bhi.n	8002584 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002532:	4a2f      	ldr	r2, [pc, #188]	; (80025f0 <__NVIC_SetPriority+0xd4>)
 8002534:	1dfb      	adds	r3, r7, #7
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b25b      	sxtb	r3, r3
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	33c0      	adds	r3, #192	; 0xc0
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	589b      	ldr	r3, [r3, r2]
 8002542:	1dfa      	adds	r2, r7, #7
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	0011      	movs	r1, r2
 8002548:	2203      	movs	r2, #3
 800254a:	400a      	ands	r2, r1
 800254c:	00d2      	lsls	r2, r2, #3
 800254e:	21ff      	movs	r1, #255	; 0xff
 8002550:	4091      	lsls	r1, r2
 8002552:	000a      	movs	r2, r1
 8002554:	43d2      	mvns	r2, r2
 8002556:	401a      	ands	r2, r3
 8002558:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	019b      	lsls	r3, r3, #6
 800255e:	22ff      	movs	r2, #255	; 0xff
 8002560:	401a      	ands	r2, r3
 8002562:	1dfb      	adds	r3, r7, #7
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	0018      	movs	r0, r3
 8002568:	2303      	movs	r3, #3
 800256a:	4003      	ands	r3, r0
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002570:	481f      	ldr	r0, [pc, #124]	; (80025f0 <__NVIC_SetPriority+0xd4>)
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b25b      	sxtb	r3, r3
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	430a      	orrs	r2, r1
 800257c:	33c0      	adds	r3, #192	; 0xc0
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002582:	e031      	b.n	80025e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002584:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <__NVIC_SetPriority+0xd8>)
 8002586:	1dfb      	adds	r3, r7, #7
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	0019      	movs	r1, r3
 800258c:	230f      	movs	r3, #15
 800258e:	400b      	ands	r3, r1
 8002590:	3b08      	subs	r3, #8
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3306      	adds	r3, #6
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	18d3      	adds	r3, r2, r3
 800259a:	3304      	adds	r3, #4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	1dfa      	adds	r2, r7, #7
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	0011      	movs	r1, r2
 80025a4:	2203      	movs	r2, #3
 80025a6:	400a      	ands	r2, r1
 80025a8:	00d2      	lsls	r2, r2, #3
 80025aa:	21ff      	movs	r1, #255	; 0xff
 80025ac:	4091      	lsls	r1, r2
 80025ae:	000a      	movs	r2, r1
 80025b0:	43d2      	mvns	r2, r2
 80025b2:	401a      	ands	r2, r3
 80025b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	019b      	lsls	r3, r3, #6
 80025ba:	22ff      	movs	r2, #255	; 0xff
 80025bc:	401a      	ands	r2, r3
 80025be:	1dfb      	adds	r3, r7, #7
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	0018      	movs	r0, r3
 80025c4:	2303      	movs	r3, #3
 80025c6:	4003      	ands	r3, r0
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025cc:	4809      	ldr	r0, [pc, #36]	; (80025f4 <__NVIC_SetPriority+0xd8>)
 80025ce:	1dfb      	adds	r3, r7, #7
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	001c      	movs	r4, r3
 80025d4:	230f      	movs	r3, #15
 80025d6:	4023      	ands	r3, r4
 80025d8:	3b08      	subs	r3, #8
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	430a      	orrs	r2, r1
 80025de:	3306      	adds	r3, #6
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	18c3      	adds	r3, r0, r3
 80025e4:	3304      	adds	r3, #4
 80025e6:	601a      	str	r2, [r3, #0]
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b003      	add	sp, #12
 80025ee:	bd90      	pop	{r4, r7, pc}
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	4a0c      	ldr	r2, [pc, #48]	; (8002638 <SysTick_Config+0x40>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260a:	2301      	movs	r3, #1
 800260c:	e010      	b.n	8002630 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <SysTick_Config+0x44>)
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	3a01      	subs	r2, #1
 8002614:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002616:	2301      	movs	r3, #1
 8002618:	425b      	negs	r3, r3
 800261a:	2103      	movs	r1, #3
 800261c:	0018      	movs	r0, r3
 800261e:	f7ff ff7d 	bl	800251c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <SysTick_Config+0x44>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <SysTick_Config+0x44>)
 800262a:	2207      	movs	r2, #7
 800262c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800262e:	2300      	movs	r3, #0
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}
 8002638:	00ffffff 	.word	0x00ffffff
 800263c:	e000e010 	.word	0xe000e010

08002640 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	210f      	movs	r1, #15
 800264c:	187b      	adds	r3, r7, r1
 800264e:	1c02      	adds	r2, r0, #0
 8002650:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	187b      	adds	r3, r7, r1
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	b25b      	sxtb	r3, r3
 800265a:	0011      	movs	r1, r2
 800265c:	0018      	movs	r0, r3
 800265e:	f7ff ff5d 	bl	800251c <__NVIC_SetPriority>
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	46bd      	mov	sp, r7
 8002666:	b004      	add	sp, #16
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	0002      	movs	r2, r0
 8002672:	1dfb      	adds	r3, r7, #7
 8002674:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b25b      	sxtb	r3, r3
 800267c:	0018      	movs	r0, r3
 800267e:	f7ff ff33 	bl	80024e8 <__NVIC_EnableIRQ>
}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b002      	add	sp, #8
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff ffaf 	bl	80025f8 <SysTick_Config>
 800269a:	0003      	movs	r3, r0
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e036      	b.n	8002728 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2221      	movs	r2, #33	; 0x21
 80026be:	2102      	movs	r1, #2
 80026c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_DMA_Init+0x8c>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	0018      	movs	r0, r3
 800270c:	f000 f98c 	bl	8002a28 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2221      	movs	r2, #33	; 0x21
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2220      	movs	r2, #32
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}  
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b004      	add	sp, #16
 800272e:	bd80      	pop	{r7, pc}
 8002730:	ffffc00f 	.word	0xffffc00f

08002734 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002742:	2317      	movs	r3, #23
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	5c9b      	ldrb	r3, [r3, r2]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_DMA_Start_IT+0x24>
 8002754:	2302      	movs	r3, #2
 8002756:	e04f      	b.n	80027f8 <HAL_DMA_Start_IT+0xc4>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	2101      	movs	r1, #1
 800275e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2221      	movs	r2, #33	; 0x21
 8002764:	5c9b      	ldrb	r3, [r3, r2]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d13a      	bne.n	80027e2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2221      	movs	r2, #33	; 0x21
 8002770:	2102      	movs	r1, #2
 8002772:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	438a      	bics	r2, r1
 8002788:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f91d 	bl	80029d0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	210e      	movs	r1, #14
 80027aa:	430a      	orrs	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e00f      	b.n	80027d0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	210a      	movs	r1, #10
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2104      	movs	r1, #4
 80027cc:	438a      	bics	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2101      	movs	r1, #1
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e007      	b.n	80027f2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2220      	movs	r2, #32
 80027e6:	2100      	movs	r1, #0
 80027e8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80027ea:	2317      	movs	r3, #23
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80027f2:	2317      	movs	r3, #23
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	781b      	ldrb	r3, [r3, #0]
} 
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b006      	add	sp, #24
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	230f      	movs	r3, #15
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2221      	movs	r2, #33	; 0x21
 8002814:	5c9b      	ldrb	r3, [r3, r2]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d007      	beq.n	800282c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2204      	movs	r2, #4
 8002820:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002822:	230f      	movs	r3, #15
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e028      	b.n	800287e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	210e      	movs	r1, #14
 8002838:	438a      	bics	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2101      	movs	r1, #1
 8002848:	438a      	bics	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	2101      	movs	r1, #1
 8002856:	4091      	lsls	r1, r2
 8002858:	000a      	movs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2221      	movs	r2, #33	; 0x21
 8002860:	2101      	movs	r1, #1
 8002862:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	0010      	movs	r0, r2
 800287c:	4798      	blx	r3
    } 
  }
  return status;
 800287e:	230f      	movs	r3, #15
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	781b      	ldrb	r3, [r3, #0]
}
 8002884:	0018      	movs	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	b004      	add	sp, #16
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	2204      	movs	r2, #4
 80028aa:	409a      	lsls	r2, r3
 80028ac:	0013      	movs	r3, r2
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	d024      	beq.n	80028fe <HAL_DMA_IRQHandler+0x72>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2204      	movs	r2, #4
 80028b8:	4013      	ands	r3, r2
 80028ba:	d020      	beq.n	80028fe <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2220      	movs	r2, #32
 80028c4:	4013      	ands	r3, r2
 80028c6:	d107      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2104      	movs	r1, #4
 80028d4:	438a      	bics	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	2104      	movs	r1, #4
 80028e2:	4091      	lsls	r1, r2
 80028e4:	000a      	movs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d100      	bne.n	80028f2 <HAL_DMA_IRQHandler+0x66>
 80028f0:	e06a      	b.n	80029c8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	0010      	movs	r0, r2
 80028fa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80028fc:	e064      	b.n	80029c8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	2202      	movs	r2, #2
 8002904:	409a      	lsls	r2, r3
 8002906:	0013      	movs	r3, r2
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4013      	ands	r3, r2
 800290c:	d02b      	beq.n	8002966 <HAL_DMA_IRQHandler+0xda>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2202      	movs	r2, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d027      	beq.n	8002966 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2220      	movs	r2, #32
 800291e:	4013      	ands	r3, r2
 8002920:	d10b      	bne.n	800293a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	210a      	movs	r1, #10
 800292e:	438a      	bics	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2221      	movs	r2, #33	; 0x21
 8002936:	2101      	movs	r1, #1
 8002938:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	2102      	movs	r1, #2
 8002944:	4091      	lsls	r1, r2
 8002946:	000a      	movs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	2100      	movs	r1, #0
 8002950:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	d036      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	0010      	movs	r0, r2
 8002962:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002964:	e030      	b.n	80029c8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	2208      	movs	r2, #8
 800296c:	409a      	lsls	r2, r3
 800296e:	0013      	movs	r3, r2
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4013      	ands	r3, r2
 8002974:	d028      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x13c>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2208      	movs	r2, #8
 800297a:	4013      	ands	r3, r2
 800297c:	d024      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	210e      	movs	r1, #14
 800298a:	438a      	bics	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	2101      	movs	r1, #1
 8002998:	4091      	lsls	r1, r2
 800299a:	000a      	movs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2221      	movs	r2, #33	; 0x21
 80029a8:	2101      	movs	r1, #1
 80029aa:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	2100      	movs	r1, #0
 80029b2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	0010      	movs	r0, r2
 80029c4:	4798      	blx	r3
    }
   }
}  
 80029c6:	e7ff      	b.n	80029c8 <HAL_DMA_IRQHandler+0x13c>
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	2101      	movs	r1, #1
 80029e8:	4091      	lsls	r1, r2
 80029ea:	000a      	movs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d108      	bne.n	8002a10 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a0e:	e007      	b.n	8002a20 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	60da      	str	r2, [r3, #12]
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b004      	add	sp, #16
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <DMA_CalcBaseAndBitshift+0x30>)
 8002a36:	4694      	mov	ip, r2
 8002a38:	4463      	add	r3, ip
 8002a3a:	2114      	movs	r1, #20
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7fd fb63 	bl	8000108 <__udivsi3>
 8002a42:	0003      	movs	r3, r0
 8002a44:	009a      	lsls	r2, r3, #2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <DMA_CalcBaseAndBitshift+0x34>)
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b002      	add	sp, #8
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	bffdfff8 	.word	0xbffdfff8
 8002a5c:	40020000 	.word	0x40020000

08002a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6e:	e14f      	b.n	8002d10 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2101      	movs	r1, #1
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4091      	lsls	r1, r2
 8002a7a:	000a      	movs	r2, r1
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d100      	bne.n	8002a88 <HAL_GPIO_Init+0x28>
 8002a86:	e140      	b.n	8002d0a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_GPIO_Init+0x48>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d007      	beq.n	8002aa8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a9c:	2b11      	cmp	r3, #17
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b12      	cmp	r3, #18
 8002aa6:	d130      	bne.n	8002b0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	43da      	mvns	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	0013      	movs	r3, r2
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ade:	2201      	movs	r2, #1
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	2201      	movs	r2, #1
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
 8002afc:	0013      	movs	r3, r2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	409a      	lsls	r2, r3
 8002b18:	0013      	movs	r3, r2
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0xea>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b12      	cmp	r3, #18
 8002b48:	d123      	bne.n	8002b92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	08da      	lsrs	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3208      	adds	r2, #8
 8002b52:	0092      	lsls	r2, r2, #2
 8002b54:	58d3      	ldr	r3, [r2, r3]
 8002b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	220f      	movs	r2, #15
 8002b62:	409a      	lsls	r2, r3
 8002b64:	0013      	movs	r3, r2
 8002b66:	43da      	mvns	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2107      	movs	r1, #7
 8002b76:	400b      	ands	r3, r1
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	08da      	lsrs	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3208      	adds	r2, #8
 8002b8c:	0092      	lsls	r2, r2, #2
 8002b8e:	6939      	ldr	r1, [r7, #16]
 8002b90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	0013      	movs	r3, r2
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	401a      	ands	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	0013      	movs	r3, r2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	055b      	lsls	r3, r3, #21
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d100      	bne.n	8002bd4 <HAL_GPIO_Init+0x174>
 8002bd2:	e09a      	b.n	8002d0a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd4:	4b54      	ldr	r3, [pc, #336]	; (8002d28 <HAL_GPIO_Init+0x2c8>)
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <HAL_GPIO_Init+0x2c8>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	619a      	str	r2, [r3, #24]
 8002be0:	4b51      	ldr	r3, [pc, #324]	; (8002d28 <HAL_GPIO_Init+0x2c8>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2201      	movs	r2, #1
 8002be6:	4013      	ands	r3, r2
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bec:	4a4f      	ldr	r2, [pc, #316]	; (8002d2c <HAL_GPIO_Init+0x2cc>)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	589b      	ldr	r3, [r3, r2]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	409a      	lsls	r2, r3
 8002c06:	0013      	movs	r3, r2
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	2390      	movs	r3, #144	; 0x90
 8002c14:	05db      	lsls	r3, r3, #23
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_Init+0x1e2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a44      	ldr	r2, [pc, #272]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_Init+0x1de>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a43      	ldr	r2, [pc, #268]	; (8002d34 <HAL_GPIO_Init+0x2d4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_Init+0x1da>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a42      	ldr	r2, [pc, #264]	; (8002d38 <HAL_GPIO_Init+0x2d8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_Init+0x1d6>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e006      	b.n	8002c44 <HAL_GPIO_Init+0x1e4>
 8002c36:	2305      	movs	r3, #5
 8002c38:	e004      	b.n	8002c44 <HAL_GPIO_Init+0x1e4>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e002      	b.n	8002c44 <HAL_GPIO_Init+0x1e4>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_GPIO_Init+0x1e4>
 8002c42:	2300      	movs	r3, #0
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	2103      	movs	r1, #3
 8002c48:	400a      	ands	r2, r1
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	4093      	lsls	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c54:	4935      	ldr	r1, [pc, #212]	; (8002d2c <HAL_GPIO_Init+0x2cc>)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_GPIO_Init+0x2dc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	025b      	lsls	r3, r3, #9
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c86:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <HAL_GPIO_Init+0x2dc>)
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <HAL_GPIO_Init+0x2dc>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	029b      	lsls	r3, r3, #10
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_GPIO_Init+0x2dc>)
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <HAL_GPIO_Init+0x2dc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	035b      	lsls	r3, r3, #13
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_GPIO_Init+0x2dc>)
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ce0:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <HAL_GPIO_Init+0x2dc>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	039b      	lsls	r3, r3, #14
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d04:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <HAL_GPIO_Init+0x2dc>)
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	40da      	lsrs	r2, r3
 8002d18:	1e13      	subs	r3, r2, #0
 8002d1a:	d000      	beq.n	8002d1e <HAL_GPIO_Init+0x2be>
 8002d1c:	e6a8      	b.n	8002a70 <HAL_GPIO_Init+0x10>
  } 
}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b006      	add	sp, #24
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40010000 	.word	0x40010000
 8002d30:	48000400 	.word	0x48000400
 8002d34:	48000800 	.word	0x48000800
 8002d38:	48000c00 	.word	0x48000c00
 8002d3c:	40010400 	.word	0x40010400

08002d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	0008      	movs	r0, r1
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	1cbb      	adds	r3, r7, #2
 8002d4e:	1c02      	adds	r2, r0, #0
 8002d50:	801a      	strh	r2, [r3, #0]
 8002d52:	1c7b      	adds	r3, r7, #1
 8002d54:	1c0a      	adds	r2, r1, #0
 8002d56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d58:	1c7b      	adds	r3, r7, #1
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d60:	1cbb      	adds	r3, r7, #2
 8002d62:	881a      	ldrh	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d68:	e003      	b.n	8002d72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d6a:	1cbb      	adds	r3, r7, #2
 8002d6c:	881a      	ldrh	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b002      	add	sp, #8
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e303      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2201      	movs	r2, #1
 8002d94:	4013      	ands	r3, r2
 8002d96:	d100      	bne.n	8002d9a <HAL_RCC_OscConfig+0x1e>
 8002d98:	e08d      	b.n	8002eb6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d9a:	4bc4      	ldr	r3, [pc, #784]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	220c      	movs	r2, #12
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d00e      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002da6:	4bc1      	ldr	r3, [pc, #772]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	220c      	movs	r2, #12
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d116      	bne.n	8002de0 <HAL_RCC_OscConfig+0x64>
 8002db2:	4bbe      	ldr	r3, [pc, #760]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	025b      	lsls	r3, r3, #9
 8002dba:	401a      	ands	r2, r3
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	025b      	lsls	r3, r3, #9
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d10d      	bne.n	8002de0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	4bb9      	ldr	r3, [pc, #740]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x56>
 8002dd0:	e070      	b.n	8002eb4 <HAL_RCC_OscConfig+0x138>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d000      	beq.n	8002ddc <HAL_RCC_OscConfig+0x60>
 8002dda:	e06b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e2da      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_OscConfig+0x7c>
 8002de8:	4bb0      	ldr	r3, [pc, #704]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4baf      	ldr	r3, [pc, #700]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002dee:	2180      	movs	r1, #128	; 0x80
 8002df0:	0249      	lsls	r1, r1, #9
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e02f      	b.n	8002e58 <HAL_RCC_OscConfig+0xdc>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RCC_OscConfig+0x9e>
 8002e00:	4baa      	ldr	r3, [pc, #680]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4ba9      	ldr	r3, [pc, #676]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e06:	49aa      	ldr	r1, [pc, #680]	; (80030b0 <HAL_RCC_OscConfig+0x334>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	4ba7      	ldr	r3, [pc, #668]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4ba6      	ldr	r3, [pc, #664]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e12:	49a8      	ldr	r1, [pc, #672]	; (80030b4 <HAL_RCC_OscConfig+0x338>)
 8002e14:	400a      	ands	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	e01e      	b.n	8002e58 <HAL_RCC_OscConfig+0xdc>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d10e      	bne.n	8002e40 <HAL_RCC_OscConfig+0xc4>
 8002e22:	4ba2      	ldr	r3, [pc, #648]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4ba1      	ldr	r3, [pc, #644]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e28:	2180      	movs	r1, #128	; 0x80
 8002e2a:	02c9      	lsls	r1, r1, #11
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	4b9e      	ldr	r3, [pc, #632]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b9d      	ldr	r3, [pc, #628]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e36:	2180      	movs	r1, #128	; 0x80
 8002e38:	0249      	lsls	r1, r1, #9
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0xdc>
 8002e40:	4b9a      	ldr	r3, [pc, #616]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b99      	ldr	r3, [pc, #612]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e46:	499a      	ldr	r1, [pc, #616]	; (80030b0 <HAL_RCC_OscConfig+0x334>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	4b97      	ldr	r3, [pc, #604]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b96      	ldr	r3, [pc, #600]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e52:	4998      	ldr	r1, [pc, #608]	; (80030b4 <HAL_RCC_OscConfig+0x338>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d014      	beq.n	8002e8a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe fe90 	bl	8001b84 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6a:	f7fe fe8b 	bl	8001b84 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b64      	cmp	r3, #100	; 0x64
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e28c      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7c:	4b8b      	ldr	r3, [pc, #556]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	029b      	lsls	r3, r3, #10
 8002e84:	4013      	ands	r3, r2
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0xee>
 8002e88:	e015      	b.n	8002eb6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fe7b 	bl	8001b84 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe fe76 	bl	8001b84 <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e277      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	4b81      	ldr	r3, [pc, #516]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	029b      	lsls	r3, r3, #10
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x118>
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d100      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x146>
 8002ec0:	e069      	b.n	8002f96 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ec2:	4b7a      	ldr	r3, [pc, #488]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	220c      	movs	r2, #12
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ecc:	4b77      	ldr	r3, [pc, #476]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	220c      	movs	r2, #12
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d11c      	bne.n	8002f12 <HAL_RCC_OscConfig+0x196>
 8002ed8:	4b74      	ldr	r3, [pc, #464]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	025b      	lsls	r3, r3, #9
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d116      	bne.n	8002f12 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee4:	4b71      	ldr	r3, [pc, #452]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d005      	beq.n	8002efa <HAL_RCC_OscConfig+0x17e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e24d      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efa:	4b6c      	ldr	r3, [pc, #432]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	22f8      	movs	r2, #248	; 0xf8
 8002f00:	4393      	bics	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	00da      	lsls	r2, r3, #3
 8002f0a:	4b68      	ldr	r3, [pc, #416]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f10:	e041      	b.n	8002f96 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d024      	beq.n	8002f64 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f1a:	4b64      	ldr	r3, [pc, #400]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b63      	ldr	r3, [pc, #396]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002f20:	2101      	movs	r1, #1
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fe fe2d 	bl	8001b84 <HAL_GetTick>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fe fe28 	bl	8001b84 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e229      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	4b5a      	ldr	r3, [pc, #360]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2202      	movs	r2, #2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d0f1      	beq.n	8002f30 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	4b57      	ldr	r3, [pc, #348]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	22f8      	movs	r2, #248	; 0xf8
 8002f52:	4393      	bics	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	00da      	lsls	r2, r3, #3
 8002f5c:	4b53      	ldr	r3, [pc, #332]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e018      	b.n	8002f96 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f64:	4b51      	ldr	r3, [pc, #324]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b50      	ldr	r3, [pc, #320]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fe fe08 	bl	8001b84 <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f7a:	f7fe fe03 	bl	8001b84 <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e204      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8c:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2202      	movs	r2, #2
 8002f92:	4013      	ands	r3, r2
 8002f94:	d1f1      	bne.n	8002f7a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d036      	beq.n	800300e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d019      	beq.n	8002fdc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa8:	4b40      	ldr	r3, [pc, #256]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fac:	4b3f      	ldr	r3, [pc, #252]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002fae:	2101      	movs	r1, #1
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fde6 	bl	8001b84 <HAL_GetTick>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fde1 	bl	8001b84 <HAL_GetTick>
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e1e2      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd0:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d0f1      	beq.n	8002fbe <HAL_RCC_OscConfig+0x242>
 8002fda:	e018      	b.n	800300e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fdc:	4b33      	ldr	r3, [pc, #204]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe0:	4b32      	ldr	r3, [pc, #200]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	438a      	bics	r2, r1
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fdcc 	bl	8001b84 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff2:	f7fe fdc7 	bl	8001b84 <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e1c8      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	4b29      	ldr	r3, [pc, #164]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	2202      	movs	r2, #2
 800300a:	4013      	ands	r3, r2
 800300c:	d1f1      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2204      	movs	r2, #4
 8003014:	4013      	ands	r3, r2
 8003016:	d100      	bne.n	800301a <HAL_RCC_OscConfig+0x29e>
 8003018:	e0b6      	b.n	8003188 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301a:	231f      	movs	r3, #31
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	055b      	lsls	r3, r3, #21
 800302a:	4013      	ands	r3, r2
 800302c:	d111      	bne.n	8003052 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302e:	4b1f      	ldr	r3, [pc, #124]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	0549      	lsls	r1, r1, #21
 8003038:	430a      	orrs	r2, r1
 800303a:	61da      	str	r2, [r3, #28]
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	055b      	lsls	r3, r3, #21
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800304a:	231f      	movs	r3, #31
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_OscConfig+0x33c>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4013      	ands	r3, r2
 800305c:	d11a      	bne.n	8003094 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <HAL_RCC_OscConfig+0x33c>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_RCC_OscConfig+0x33c>)
 8003064:	2180      	movs	r1, #128	; 0x80
 8003066:	0049      	lsls	r1, r1, #1
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306c:	f7fe fd8a 	bl	8001b84 <HAL_GetTick>
 8003070:	0003      	movs	r3, r0
 8003072:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003076:	f7fe fd85 	bl	8001b84 <HAL_GetTick>
 800307a:	0002      	movs	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b64      	cmp	r3, #100	; 0x64
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e186      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_OscConfig+0x33c>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4013      	ands	r3, r2
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d10f      	bne.n	80030bc <HAL_RCC_OscConfig+0x340>
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 800309e:	6a1a      	ldr	r2, [r3, #32]
 80030a0:	4b02      	ldr	r3, [pc, #8]	; (80030ac <HAL_RCC_OscConfig+0x330>)
 80030a2:	2101      	movs	r1, #1
 80030a4:	430a      	orrs	r2, r1
 80030a6:	621a      	str	r2, [r3, #32]
 80030a8:	e036      	b.n	8003118 <HAL_RCC_OscConfig+0x39c>
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	40021000 	.word	0x40021000
 80030b0:	fffeffff 	.word	0xfffeffff
 80030b4:	fffbffff 	.word	0xfffbffff
 80030b8:	40007000 	.word	0x40007000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10c      	bne.n	80030de <HAL_RCC_OscConfig+0x362>
 80030c4:	4bb6      	ldr	r3, [pc, #728]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	4bb5      	ldr	r3, [pc, #724]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80030ca:	2101      	movs	r1, #1
 80030cc:	438a      	bics	r2, r1
 80030ce:	621a      	str	r2, [r3, #32]
 80030d0:	4bb3      	ldr	r3, [pc, #716]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80030d2:	6a1a      	ldr	r2, [r3, #32]
 80030d4:	4bb2      	ldr	r3, [pc, #712]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80030d6:	2104      	movs	r1, #4
 80030d8:	438a      	bics	r2, r1
 80030da:	621a      	str	r2, [r3, #32]
 80030dc:	e01c      	b.n	8003118 <HAL_RCC_OscConfig+0x39c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x384>
 80030e6:	4bae      	ldr	r3, [pc, #696]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80030e8:	6a1a      	ldr	r2, [r3, #32]
 80030ea:	4bad      	ldr	r3, [pc, #692]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80030ec:	2104      	movs	r1, #4
 80030ee:	430a      	orrs	r2, r1
 80030f0:	621a      	str	r2, [r3, #32]
 80030f2:	4bab      	ldr	r3, [pc, #684]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80030f4:	6a1a      	ldr	r2, [r3, #32]
 80030f6:	4baa      	ldr	r3, [pc, #680]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80030f8:	2101      	movs	r1, #1
 80030fa:	430a      	orrs	r2, r1
 80030fc:	621a      	str	r2, [r3, #32]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0x39c>
 8003100:	4ba7      	ldr	r3, [pc, #668]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003102:	6a1a      	ldr	r2, [r3, #32]
 8003104:	4ba6      	ldr	r3, [pc, #664]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003106:	2101      	movs	r1, #1
 8003108:	438a      	bics	r2, r1
 800310a:	621a      	str	r2, [r3, #32]
 800310c:	4ba4      	ldr	r3, [pc, #656]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 800310e:	6a1a      	ldr	r2, [r3, #32]
 8003110:	4ba3      	ldr	r3, [pc, #652]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003112:	2104      	movs	r1, #4
 8003114:	438a      	bics	r2, r1
 8003116:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d014      	beq.n	800314a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7fe fd30 	bl	8001b84 <HAL_GetTick>
 8003124:	0003      	movs	r3, r0
 8003126:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003128:	e009      	b.n	800313e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe fd2b 	bl	8001b84 <HAL_GetTick>
 800312e:	0002      	movs	r2, r0
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	4a9b      	ldr	r2, [pc, #620]	; (80033a4 <HAL_RCC_OscConfig+0x628>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e12b      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	4b98      	ldr	r3, [pc, #608]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	2202      	movs	r2, #2
 8003144:	4013      	ands	r3, r2
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x3ae>
 8003148:	e013      	b.n	8003172 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7fe fd1b 	bl	8001b84 <HAL_GetTick>
 800314e:	0003      	movs	r3, r0
 8003150:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003152:	e009      	b.n	8003168 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe fd16 	bl	8001b84 <HAL_GetTick>
 8003158:	0002      	movs	r2, r0
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	4a91      	ldr	r2, [pc, #580]	; (80033a4 <HAL_RCC_OscConfig+0x628>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e116      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003168:	4b8d      	ldr	r3, [pc, #564]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	2202      	movs	r2, #2
 800316e:	4013      	ands	r3, r2
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003172:	231f      	movs	r3, #31
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	4b87      	ldr	r3, [pc, #540]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003182:	4989      	ldr	r1, [pc, #548]	; (80033a8 <HAL_RCC_OscConfig+0x62c>)
 8003184:	400a      	ands	r2, r1
 8003186:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2210      	movs	r2, #16
 800318e:	4013      	ands	r3, r2
 8003190:	d063      	beq.n	800325a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d12a      	bne.n	80031f0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800319a:	4b81      	ldr	r3, [pc, #516]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 800319c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319e:	4b80      	ldr	r3, [pc, #512]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80031a0:	2104      	movs	r1, #4
 80031a2:	430a      	orrs	r2, r1
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80031a6:	4b7e      	ldr	r3, [pc, #504]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80031a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031aa:	4b7d      	ldr	r3, [pc, #500]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80031ac:	2101      	movs	r1, #1
 80031ae:	430a      	orrs	r2, r1
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7fe fce7 	bl	8001b84 <HAL_GetTick>
 80031b6:	0003      	movs	r3, r0
 80031b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031bc:	f7fe fce2 	bl	8001b84 <HAL_GetTick>
 80031c0:	0002      	movs	r2, r0
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0e3      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031ce:	4b74      	ldr	r3, [pc, #464]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	2202      	movs	r2, #2
 80031d4:	4013      	ands	r3, r2
 80031d6:	d0f1      	beq.n	80031bc <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031d8:	4b71      	ldr	r3, [pc, #452]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	22f8      	movs	r2, #248	; 0xf8
 80031de:	4393      	bics	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	00da      	lsls	r2, r3, #3
 80031e8:	4b6d      	ldr	r3, [pc, #436]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80031ea:	430a      	orrs	r2, r1
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34
 80031ee:	e034      	b.n	800325a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	3305      	adds	r3, #5
 80031f6:	d111      	bne.n	800321c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80031f8:	4b69      	ldr	r3, [pc, #420]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80031fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fc:	4b68      	ldr	r3, [pc, #416]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80031fe:	2104      	movs	r1, #4
 8003200:	438a      	bics	r2, r1
 8003202:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003204:	4b66      	ldr	r3, [pc, #408]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	22f8      	movs	r2, #248	; 0xf8
 800320a:	4393      	bics	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	00da      	lsls	r2, r3, #3
 8003214:	4b62      	ldr	r3, [pc, #392]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003216:	430a      	orrs	r2, r1
 8003218:	635a      	str	r2, [r3, #52]	; 0x34
 800321a:	e01e      	b.n	800325a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800321c:	4b60      	ldr	r3, [pc, #384]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 800321e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003220:	4b5f      	ldr	r3, [pc, #380]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003222:	2104      	movs	r1, #4
 8003224:	430a      	orrs	r2, r1
 8003226:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003228:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 800322a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322c:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 800322e:	2101      	movs	r1, #1
 8003230:	438a      	bics	r2, r1
 8003232:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003234:	f7fe fca6 	bl	8001b84 <HAL_GetTick>
 8003238:	0003      	movs	r3, r0
 800323a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800323e:	f7fe fca1 	bl	8001b84 <HAL_GetTick>
 8003242:	0002      	movs	r2, r0
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0a2      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003250:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	2202      	movs	r2, #2
 8003256:	4013      	ands	r3, r2
 8003258:	d1f1      	bne.n	800323e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d100      	bne.n	8003264 <HAL_RCC_OscConfig+0x4e8>
 8003262:	e097      	b.n	8003394 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003264:	4b4e      	ldr	r3, [pc, #312]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	220c      	movs	r2, #12
 800326a:	4013      	ands	r3, r2
 800326c:	2b08      	cmp	r3, #8
 800326e:	d100      	bne.n	8003272 <HAL_RCC_OscConfig+0x4f6>
 8003270:	e06b      	b.n	800334a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d14c      	bne.n	8003314 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	4b49      	ldr	r3, [pc, #292]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b48      	ldr	r3, [pc, #288]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003280:	494a      	ldr	r1, [pc, #296]	; (80033ac <HAL_RCC_OscConfig+0x630>)
 8003282:	400a      	ands	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003286:	f7fe fc7d 	bl	8001b84 <HAL_GetTick>
 800328a:	0003      	movs	r3, r0
 800328c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe fc78 	bl	8001b84 <HAL_GetTick>
 8003294:	0002      	movs	r2, r0
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e079      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a2:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	049b      	lsls	r3, r3, #18
 80032aa:	4013      	ands	r3, r2
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ae:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	220f      	movs	r2, #15
 80032b4:	4393      	bics	r3, r2
 80032b6:	0019      	movs	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80032be:	430a      	orrs	r2, r1
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032c2:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a3a      	ldr	r2, [pc, #232]	; (80033b0 <HAL_RCC_OscConfig+0x634>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	431a      	orrs	r2, r3
 80032d6:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80032d8:	430a      	orrs	r2, r1
 80032da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032dc:	4b30      	ldr	r3, [pc, #192]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 80032e2:	2180      	movs	r1, #128	; 0x80
 80032e4:	0449      	lsls	r1, r1, #17
 80032e6:	430a      	orrs	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fe fc4b 	bl	8001b84 <HAL_GetTick>
 80032ee:	0003      	movs	r3, r0
 80032f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fe fc46 	bl	8001b84 <HAL_GetTick>
 80032f8:	0002      	movs	r2, r0
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e047      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	049b      	lsls	r3, r3, #18
 800330e:	4013      	ands	r3, r2
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x578>
 8003312:	e03f      	b.n	8003394 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 800331a:	4924      	ldr	r1, [pc, #144]	; (80033ac <HAL_RCC_OscConfig+0x630>)
 800331c:	400a      	ands	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fe fc30 	bl	8001b84 <HAL_GetTick>
 8003324:	0003      	movs	r3, r0
 8003326:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332a:	f7fe fc2b 	bl	8001b84 <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e02c      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	049b      	lsls	r3, r3, #18
 8003344:	4013      	ands	r3, r2
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0x5ae>
 8003348:	e024      	b.n	8003394 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e01f      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800335c:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_RCC_OscConfig+0x624>)
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	025b      	lsls	r3, r3, #9
 8003368:	401a      	ands	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	429a      	cmp	r2, r3
 8003370:	d10e      	bne.n	8003390 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	220f      	movs	r2, #15
 8003376:	401a      	ands	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	23f0      	movs	r3, #240	; 0xf0
 8003384:	039b      	lsls	r3, r3, #14
 8003386:	401a      	ands	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b008      	add	sp, #32
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	40021000 	.word	0x40021000
 80033a4:	00001388 	.word	0x00001388
 80033a8:	efffffff 	.word	0xefffffff
 80033ac:	feffffff 	.word	0xfeffffff
 80033b0:	ffc2ffff 	.word	0xffc2ffff

080033b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0b3      	b.n	8003530 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <HAL_RCC_ClockConfig+0x184>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	4013      	ands	r3, r2
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d911      	bls.n	80033fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b58      	ldr	r3, [pc, #352]	; (8003538 <HAL_RCC_ClockConfig+0x184>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2201      	movs	r2, #1
 80033dc:	4393      	bics	r3, r2
 80033de:	0019      	movs	r1, r3
 80033e0:	4b55      	ldr	r3, [pc, #340]	; (8003538 <HAL_RCC_ClockConfig+0x184>)
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e8:	4b53      	ldr	r3, [pc, #332]	; (8003538 <HAL_RCC_ClockConfig+0x184>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	4013      	ands	r3, r2
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e09a      	b.n	8003530 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2202      	movs	r2, #2
 8003400:	4013      	ands	r3, r2
 8003402:	d015      	beq.n	8003430 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2204      	movs	r2, #4
 800340a:	4013      	ands	r3, r2
 800340c:	d006      	beq.n	800341c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800340e:	4b4b      	ldr	r3, [pc, #300]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 8003414:	21e0      	movs	r1, #224	; 0xe0
 8003416:	00c9      	lsls	r1, r1, #3
 8003418:	430a      	orrs	r2, r1
 800341a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b47      	ldr	r3, [pc, #284]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	22f0      	movs	r2, #240	; 0xf0
 8003422:	4393      	bics	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	4b44      	ldr	r3, [pc, #272]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2201      	movs	r2, #1
 8003436:	4013      	ands	r3, r2
 8003438:	d040      	beq.n	80034bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b3e      	ldr	r3, [pc, #248]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	029b      	lsls	r3, r3, #10
 800344a:	4013      	ands	r3, r2
 800344c:	d114      	bne.n	8003478 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e06e      	b.n	8003530 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b38      	ldr	r3, [pc, #224]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	049b      	lsls	r3, r3, #18
 8003462:	4013      	ands	r3, r2
 8003464:	d108      	bne.n	8003478 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e062      	b.n	8003530 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b34      	ldr	r3, [pc, #208]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2202      	movs	r2, #2
 8003470:	4013      	ands	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e05b      	b.n	8003530 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003478:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	4393      	bics	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800348c:	f7fe fb7a 	bl	8001b84 <HAL_GetTick>
 8003490:	0003      	movs	r3, r0
 8003492:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003494:	e009      	b.n	80034aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003496:	f7fe fb75 	bl	8001b84 <HAL_GetTick>
 800349a:	0002      	movs	r2, r0
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	4a27      	ldr	r2, [pc, #156]	; (8003540 <HAL_RCC_ClockConfig+0x18c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e042      	b.n	8003530 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	220c      	movs	r2, #12
 80034b0:	401a      	ands	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d1ec      	bne.n	8003496 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_RCC_ClockConfig+0x184>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2201      	movs	r2, #1
 80034c2:	4013      	ands	r3, r2
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d211      	bcs.n	80034ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_RCC_ClockConfig+0x184>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	4393      	bics	r3, r2
 80034d2:	0019      	movs	r1, r3
 80034d4:	4b18      	ldr	r3, [pc, #96]	; (8003538 <HAL_RCC_ClockConfig+0x184>)
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <HAL_RCC_ClockConfig+0x184>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2201      	movs	r2, #1
 80034e2:	4013      	ands	r3, r2
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e020      	b.n	8003530 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2204      	movs	r2, #4
 80034f4:	4013      	ands	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4a11      	ldr	r2, [pc, #68]	; (8003544 <HAL_RCC_ClockConfig+0x190>)
 80034fe:	4013      	ands	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800350c:	f000 f820 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 8003510:	0001      	movs	r1, r0
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCC_ClockConfig+0x188>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	220f      	movs	r2, #15
 800351a:	4013      	ands	r3, r2
 800351c:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <HAL_RCC_ClockConfig+0x194>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	000a      	movs	r2, r1
 8003522:	40da      	lsrs	r2, r3
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x198>)
 8003526:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003528:	2000      	movs	r0, #0
 800352a:	f7fe fae5 	bl	8001af8 <HAL_InitTick>
  
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b004      	add	sp, #16
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40022000 	.word	0x40022000
 800353c:	40021000 	.word	0x40021000
 8003540:	00001388 	.word	0x00001388
 8003544:	fffff8ff 	.word	0xfffff8ff
 8003548:	08004b9c 	.word	0x08004b9c
 800354c:	20000004 	.word	0x20000004

08003550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b08f      	sub	sp, #60	; 0x3c
 8003554:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003556:	2314      	movs	r3, #20
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <HAL_RCC_GetSysClockFreq+0xb8>)
 800355c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800355e:	c313      	stmia	r3!, {r0, r1, r4}
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	4a29      	ldr	r2, [pc, #164]	; (800360c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003568:	ca13      	ldmia	r2!, {r0, r1, r4}
 800356a:	c313      	stmia	r3!, {r0, r1, r4}
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003574:	2300      	movs	r3, #0
 8003576:	62bb      	str	r3, [r7, #40]	; 0x28
 8003578:	2300      	movs	r3, #0
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
 800357c:	2300      	movs	r3, #0
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003584:	4b22      	ldr	r3, [pc, #136]	; (8003610 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	220c      	movs	r2, #12
 800358e:	4013      	ands	r3, r2
 8003590:	2b04      	cmp	r3, #4
 8003592:	d002      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x4a>
 8003594:	2b08      	cmp	r3, #8
 8003596:	d003      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x50>
 8003598:	e02d      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <HAL_RCC_GetSysClockFreq+0xc4>)
 800359c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800359e:	e02d      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	0c9b      	lsrs	r3, r3, #18
 80035a4:	220f      	movs	r2, #15
 80035a6:	4013      	ands	r3, r2
 80035a8:	2214      	movs	r2, #20
 80035aa:	18ba      	adds	r2, r7, r2
 80035ac:	5cd3      	ldrb	r3, [r2, r3]
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80035b0:	4b17      	ldr	r3, [pc, #92]	; (8003610 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	220f      	movs	r2, #15
 80035b6:	4013      	ands	r3, r2
 80035b8:	1d3a      	adds	r2, r7, #4
 80035ba:	5cd3      	ldrb	r3, [r2, r3]
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	025b      	lsls	r3, r3, #9
 80035c4:	4013      	ands	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ca:	4812      	ldr	r0, [pc, #72]	; (8003614 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035cc:	f7fc fd9c 	bl	8000108 <__udivsi3>
 80035d0:	0003      	movs	r3, r0
 80035d2:	001a      	movs	r2, r3
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	4353      	muls	r3, r2
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
 80035da:	e009      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035de:	000a      	movs	r2, r1
 80035e0:	0152      	lsls	r2, r2, #5
 80035e2:	1a52      	subs	r2, r2, r1
 80035e4:	0193      	lsls	r3, r2, #6
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	185b      	adds	r3, r3, r1
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035f4:	e002      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b00f      	add	sp, #60	; 0x3c
 8003604:	bd90      	pop	{r4, r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	08004b7c 	.word	0x08004b7c
 800360c:	08004b8c 	.word	0x08004b8c
 8003610:	40021000 	.word	0x40021000
 8003614:	007a1200 	.word	0x007a1200

08003618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800361c:	4b02      	ldr	r3, [pc, #8]	; (8003628 <HAL_RCC_GetHCLKFreq+0x10>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	20000004 	.word	0x20000004

0800362c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003630:	f7ff fff2 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003634:	0001      	movs	r1, r0
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	2207      	movs	r2, #7
 800363e:	4013      	ands	r3, r2
 8003640:	4a04      	ldr	r2, [pc, #16]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003642:	5cd3      	ldrb	r3, [r2, r3]
 8003644:	40d9      	lsrs	r1, r3
 8003646:	000b      	movs	r3, r1
}    
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	40021000 	.word	0x40021000
 8003654:	08004bac 	.word	0x08004bac

08003658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	025b      	lsls	r3, r3, #9
 8003670:	4013      	ands	r3, r2
 8003672:	d100      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003674:	e08f      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003676:	2317      	movs	r3, #23
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	055b      	lsls	r3, r3, #21
 8003686:	4013      	ands	r3, r2
 8003688:	d111      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	4b5c      	ldr	r3, [pc, #368]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	4b5b      	ldr	r3, [pc, #364]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	0549      	lsls	r1, r1, #21
 8003694:	430a      	orrs	r2, r1
 8003696:	61da      	str	r2, [r3, #28]
 8003698:	4b58      	ldr	r3, [pc, #352]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	055b      	lsls	r3, r3, #21
 80036a0:	4013      	ands	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a6:	2317      	movs	r3, #23
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ae:	4b54      	ldr	r3, [pc, #336]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4013      	ands	r3, r2
 80036b8:	d11a      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ba:	4b51      	ldr	r3, [pc, #324]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b50      	ldr	r3, [pc, #320]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036c0:	2180      	movs	r1, #128	; 0x80
 80036c2:	0049      	lsls	r1, r1, #1
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c8:	f7fe fa5c 	bl	8001b84 <HAL_GetTick>
 80036cc:	0003      	movs	r3, r0
 80036ce:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	e008      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d2:	f7fe fa57 	bl	8001b84 <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b64      	cmp	r3, #100	; 0x64
 80036de:	d901      	bls.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e087      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	4b46      	ldr	r3, [pc, #280]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4013      	ands	r3, r2
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036f0:	4b42      	ldr	r3, [pc, #264]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036f2:	6a1a      	ldr	r2, [r3, #32]
 80036f4:	23c0      	movs	r3, #192	; 0xc0
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4013      	ands	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d034      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	23c0      	movs	r3, #192	; 0xc0
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4013      	ands	r3, r2
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	429a      	cmp	r2, r3
 8003710:	d02c      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003712:	4b3a      	ldr	r3, [pc, #232]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	4a3b      	ldr	r2, [pc, #236]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800371c:	4b37      	ldr	r3, [pc, #220]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800371e:	6a1a      	ldr	r2, [r3, #32]
 8003720:	4b36      	ldr	r3, [pc, #216]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003722:	2180      	movs	r1, #128	; 0x80
 8003724:	0249      	lsls	r1, r1, #9
 8003726:	430a      	orrs	r2, r1
 8003728:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800372c:	6a1a      	ldr	r2, [r3, #32]
 800372e:	4b33      	ldr	r3, [pc, #204]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003730:	4935      	ldr	r1, [pc, #212]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003732:	400a      	ands	r2, r1
 8003734:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003736:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	4013      	ands	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fa1e 	bl	8001b84 <HAL_GetTick>
 8003748:	0003      	movs	r3, r0
 800374a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374c:	e009      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fe fa19 	bl	8001b84 <HAL_GetTick>
 8003752:	0002      	movs	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	4a2c      	ldr	r2, [pc, #176]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e048      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003762:	4b26      	ldr	r3, [pc, #152]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	2202      	movs	r2, #2
 8003768:	4013      	ands	r3, r2
 800376a:	d0f0      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4a24      	ldr	r2, [pc, #144]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003772:	4013      	ands	r3, r2
 8003774:	0019      	movs	r1, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800377c:	430a      	orrs	r2, r1
 800377e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003780:	2317      	movs	r3, #23
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d105      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378a:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003790:	491f      	ldr	r1, [pc, #124]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003792:	400a      	ands	r2, r1
 8003794:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2201      	movs	r2, #1
 800379c:	4013      	ands	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	2203      	movs	r2, #3
 80037a6:	4393      	bics	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037b0:	430a      	orrs	r2, r1
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2220      	movs	r2, #32
 80037ba:	4013      	ands	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	2210      	movs	r2, #16
 80037c4:	4393      	bics	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037ce:	430a      	orrs	r2, r1
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4013      	ands	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	2240      	movs	r2, #64	; 0x40
 80037e4:	4393      	bics	r3, r2
 80037e6:	0019      	movs	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037ee:	430a      	orrs	r2, r1
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b006      	add	sp, #24
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000
 8003800:	40007000 	.word	0x40007000
 8003804:	fffffcff 	.word	0xfffffcff
 8003808:	fffeffff 	.word	0xfffeffff
 800380c:	00001388 	.word	0x00001388
 8003810:	efffffff 	.word	0xefffffff

08003814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e01e      	b.n	8003864 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	223d      	movs	r2, #61	; 0x3d
 800382a:	5c9b      	ldrb	r3, [r3, r2]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d107      	bne.n	8003842 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	223c      	movs	r2, #60	; 0x3c
 8003836:	2100      	movs	r1, #0
 8003838:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	0018      	movs	r0, r3
 800383e:	f7fd ff1d 	bl	800167c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	223d      	movs	r2, #61	; 0x3d
 8003846:	2102      	movs	r1, #2
 8003848:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3304      	adds	r3, #4
 8003852:	0019      	movs	r1, r3
 8003854:	0010      	movs	r0, r2
 8003856:	f000 fa27 	bl	8003ca8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	223d      	movs	r2, #61	; 0x3d
 800385e:	2101      	movs	r1, #1
 8003860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	b002      	add	sp, #8
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2101      	movs	r1, #1
 8003880:	430a      	orrs	r2, r1
 8003882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2207      	movs	r2, #7
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b06      	cmp	r3, #6
 8003894:	d007      	beq.n	80038a6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2101      	movs	r1, #1
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b004      	add	sp, #16
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2202      	movs	r2, #2
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d124      	bne.n	8003910 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2202      	movs	r2, #2
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d11d      	bne.n	8003910 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2203      	movs	r2, #3
 80038da:	4252      	negs	r2, r2
 80038dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2203      	movs	r2, #3
 80038ec:	4013      	ands	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 f9c0 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 80038f8:	e007      	b.n	800390a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 f9b3 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0018      	movs	r0, r3
 8003906:	f000 f9bf 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2204      	movs	r2, #4
 8003918:	4013      	ands	r3, r2
 800391a:	2b04      	cmp	r3, #4
 800391c:	d125      	bne.n	800396a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2204      	movs	r2, #4
 8003926:	4013      	ands	r3, r2
 8003928:	2b04      	cmp	r3, #4
 800392a:	d11e      	bne.n	800396a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2205      	movs	r2, #5
 8003932:	4252      	negs	r2, r2
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	23c0      	movs	r3, #192	; 0xc0
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4013      	ands	r3, r2
 8003948:	d004      	beq.n	8003954 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	0018      	movs	r0, r3
 800394e:	f000 f993 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003952:	e007      	b.n	8003964 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	0018      	movs	r0, r3
 8003958:	f000 f986 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	0018      	movs	r0, r3
 8003960:	f000 f992 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2208      	movs	r2, #8
 8003972:	4013      	ands	r3, r2
 8003974:	2b08      	cmp	r3, #8
 8003976:	d124      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2208      	movs	r2, #8
 8003980:	4013      	ands	r3, r2
 8003982:	2b08      	cmp	r3, #8
 8003984:	d11d      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2209      	movs	r2, #9
 800398c:	4252      	negs	r2, r2
 800398e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2204      	movs	r2, #4
 8003994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	2203      	movs	r2, #3
 800399e:	4013      	ands	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 f967 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 80039aa:	e007      	b.n	80039bc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 f95a 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	0018      	movs	r0, r3
 80039b8:	f000 f966 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2210      	movs	r2, #16
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d125      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2210      	movs	r2, #16
 80039d8:	4013      	ands	r3, r2
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d11e      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2211      	movs	r2, #17
 80039e4:	4252      	negs	r2, r2
 80039e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2208      	movs	r2, #8
 80039ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	23c0      	movs	r3, #192	; 0xc0
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4013      	ands	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	0018      	movs	r0, r3
 8003a00:	f000 f93a 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003a04:	e007      	b.n	8003a16 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 f92d 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 f939 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2201      	movs	r2, #1
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d10f      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d108      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	4252      	negs	r2, r2
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 f907 	bl	8003c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b80      	cmp	r3, #128	; 0x80
 8003a56:	d10f      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2280      	movs	r2, #128	; 0x80
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b80      	cmp	r3, #128	; 0x80
 8003a64:	d108      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2281      	movs	r2, #129	; 0x81
 8003a6c:	4252      	negs	r2, r2
 8003a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 fa98 	bl	8003fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2240      	movs	r2, #64	; 0x40
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d10f      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2240      	movs	r2, #64	; 0x40
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d108      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2241      	movs	r2, #65	; 0x41
 8003a9a:	4252      	negs	r2, r2
 8003a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f000 f8f9 	bl	8003c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2220      	movs	r2, #32
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d10f      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d108      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2221      	movs	r2, #33	; 0x21
 8003ac8:	4252      	negs	r2, r2
 8003aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 fa62 	bl	8003f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	223c      	movs	r2, #60	; 0x3c
 8003aea:	5c9b      	ldrb	r3, [r3, r2]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_TIM_ConfigClockSource+0x18>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e0ab      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x170>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	223c      	movs	r2, #60	; 0x3c
 8003af8:	2101      	movs	r1, #1
 8003afa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	223d      	movs	r2, #61	; 0x3d
 8003b00:	2102      	movs	r1, #2
 8003b02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2277      	movs	r2, #119	; 0x77
 8003b10:	4393      	bics	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a4f      	ldr	r2, [pc, #316]	; (8003c54 <HAL_TIM_ConfigClockSource+0x178>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d100      	bne.n	8003b2e <HAL_TIM_ConfigClockSource+0x52>
 8003b2c:	e06b      	b.n	8003c06 <HAL_TIM_ConfigClockSource+0x12a>
 8003b2e:	d80e      	bhi.n	8003b4e <HAL_TIM_ConfigClockSource+0x72>
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d100      	bne.n	8003b36 <HAL_TIM_ConfigClockSource+0x5a>
 8003b34:	e077      	b.n	8003c26 <HAL_TIM_ConfigClockSource+0x14a>
 8003b36:	d803      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x64>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d100      	bne.n	8003b3e <HAL_TIM_ConfigClockSource+0x62>
 8003b3c:	e073      	b.n	8003c26 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b3e:	e07c      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d100      	bne.n	8003b46 <HAL_TIM_ConfigClockSource+0x6a>
 8003b44:	e06f      	b.n	8003c26 <HAL_TIM_ConfigClockSource+0x14a>
 8003b46:	2b30      	cmp	r3, #48	; 0x30
 8003b48:	d100      	bne.n	8003b4c <HAL_TIM_ConfigClockSource+0x70>
 8003b4a:	e06c      	b.n	8003c26 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003b4c:	e075      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003b4e:	2b70      	cmp	r3, #112	; 0x70
 8003b50:	d00e      	beq.n	8003b70 <HAL_TIM_ConfigClockSource+0x94>
 8003b52:	d804      	bhi.n	8003b5e <HAL_TIM_ConfigClockSource+0x82>
 8003b54:	2b50      	cmp	r3, #80	; 0x50
 8003b56:	d036      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0xea>
 8003b58:	2b60      	cmp	r3, #96	; 0x60
 8003b5a:	d044      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003b5c:	e06d      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003b5e:	2280      	movs	r2, #128	; 0x80
 8003b60:	0152      	lsls	r2, r2, #5
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d068      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0x15c>
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	0192      	lsls	r2, r2, #6
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d017      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003b6e:	e064      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6899      	ldr	r1, [r3, #8]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f000 f98c 	bl	8003e9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2277      	movs	r2, #119	; 0x77
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	609a      	str	r2, [r3, #8]
      break;
 8003b9c:	e04d      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6899      	ldr	r1, [r3, #8]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f000 f975 	bl	8003e9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2180      	movs	r1, #128	; 0x80
 8003bbe:	01c9      	lsls	r1, r1, #7
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]
      break;
 8003bc4:	e039      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	f000 f8e8 	bl	8003da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2150      	movs	r1, #80	; 0x50
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 f942 	bl	8003e68 <TIM_ITRx_SetConfig>
      break;
 8003be4:	e029      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	001a      	movs	r2, r3
 8003bf4:	f000 f906 	bl	8003e04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2160      	movs	r1, #96	; 0x60
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 f932 	bl	8003e68 <TIM_ITRx_SetConfig>
      break;
 8003c04:	e019      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	001a      	movs	r2, r3
 8003c14:	f000 f8c8 	bl	8003da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2140      	movs	r1, #64	; 0x40
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 f922 	bl	8003e68 <TIM_ITRx_SetConfig>
      break;
 8003c24:	e009      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	0019      	movs	r1, r3
 8003c30:	0010      	movs	r0, r2
 8003c32:	f000 f919 	bl	8003e68 <TIM_ITRx_SetConfig>
      break;
 8003c36:	e000      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003c38:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	223d      	movs	r2, #61	; 0x3d
 8003c3e:	2101      	movs	r1, #1
 8003c40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	223c      	movs	r2, #60	; 0x3c
 8003c46:	2100      	movs	r1, #0
 8003c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b004      	add	sp, #16
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	ffff00ff 	.word	0xffff00ff

08003c58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b002      	add	sp, #8
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b002      	add	sp, #8
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b002      	add	sp, #8
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a34      	ldr	r2, [pc, #208]	; (8003d8c <TIM_Base_SetConfig+0xe4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d008      	beq.n	8003cd2 <TIM_Base_SetConfig+0x2a>
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	05db      	lsls	r3, r3, #23
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d003      	beq.n	8003cd2 <TIM_Base_SetConfig+0x2a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a30      	ldr	r2, [pc, #192]	; (8003d90 <TIM_Base_SetConfig+0xe8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d108      	bne.n	8003ce4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2270      	movs	r2, #112	; 0x70
 8003cd6:	4393      	bics	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a29      	ldr	r2, [pc, #164]	; (8003d8c <TIM_Base_SetConfig+0xe4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d018      	beq.n	8003d1e <TIM_Base_SetConfig+0x76>
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	05db      	lsls	r3, r3, #23
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d013      	beq.n	8003d1e <TIM_Base_SetConfig+0x76>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a25      	ldr	r2, [pc, #148]	; (8003d90 <TIM_Base_SetConfig+0xe8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00f      	beq.n	8003d1e <TIM_Base_SetConfig+0x76>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a24      	ldr	r2, [pc, #144]	; (8003d94 <TIM_Base_SetConfig+0xec>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00b      	beq.n	8003d1e <TIM_Base_SetConfig+0x76>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a23      	ldr	r2, [pc, #140]	; (8003d98 <TIM_Base_SetConfig+0xf0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d007      	beq.n	8003d1e <TIM_Base_SetConfig+0x76>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a22      	ldr	r2, [pc, #136]	; (8003d9c <TIM_Base_SetConfig+0xf4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d003      	beq.n	8003d1e <TIM_Base_SetConfig+0x76>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <TIM_Base_SetConfig+0xf8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d108      	bne.n	8003d30 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4a20      	ldr	r2, [pc, #128]	; (8003da4 <TIM_Base_SetConfig+0xfc>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	4393      	bics	r3, r2
 8003d36:	001a      	movs	r2, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <TIM_Base_SetConfig+0xe4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00b      	beq.n	8003d76 <TIM_Base_SetConfig+0xce>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <TIM_Base_SetConfig+0xf0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <TIM_Base_SetConfig+0xce>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a0c      	ldr	r2, [pc, #48]	; (8003d9c <TIM_Base_SetConfig+0xf4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_Base_SetConfig+0xce>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a0b      	ldr	r2, [pc, #44]	; (8003da0 <TIM_Base_SetConfig+0xf8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d103      	bne.n	8003d7e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	615a      	str	r2, [r3, #20]
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b004      	add	sp, #16
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40002000 	.word	0x40002000
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	40014800 	.word	0x40014800
 8003da4:	fffffcff 	.word	0xfffffcff

08003da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4393      	bics	r3, r2
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	22f0      	movs	r2, #240	; 0xf0
 8003dd2:	4393      	bics	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	220a      	movs	r2, #10
 8003de4:	4393      	bics	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	621a      	str	r2, [r3, #32]
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b006      	add	sp, #24
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	2210      	movs	r2, #16
 8003e16:	4393      	bics	r3, r2
 8003e18:	001a      	movs	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	4a0d      	ldr	r2, [pc, #52]	; (8003e64 <TIM_TI2_ConfigInputStage+0x60>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	031b      	lsls	r3, r3, #12
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	22a0      	movs	r2, #160	; 0xa0
 8003e40:	4393      	bics	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b006      	add	sp, #24
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	ffff0fff 	.word	0xffff0fff

08003e68 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2270      	movs	r2, #112	; 0x70
 8003e7c:	4393      	bics	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	2207      	movs	r2, #7
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	609a      	str	r2, [r3, #8]
}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b004      	add	sp, #16
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	4a09      	ldr	r2, [pc, #36]	; (8003ed8 <TIM_ETR_SetConfig+0x3c>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	021a      	lsls	r2, r3, #8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	609a      	str	r2, [r3, #8]
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b006      	add	sp, #24
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	ffff00ff 	.word	0xffff00ff

08003edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	223c      	movs	r2, #60	; 0x3c
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e047      	b.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	223c      	movs	r2, #60	; 0x3c
 8003ef8:	2101      	movs	r1, #1
 8003efa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	223d      	movs	r2, #61	; 0x3d
 8003f00:	2102      	movs	r1, #2
 8003f02:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2270      	movs	r2, #112	; 0x70
 8003f18:	4393      	bics	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00f      	beq.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	05db      	lsls	r3, r3, #23
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d009      	beq.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a11      	ldr	r2, [pc, #68]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d10c      	bne.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2280      	movs	r2, #128	; 0x80
 8003f5c:	4393      	bics	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	223d      	movs	r2, #61	; 0x3d
 8003f76:	2101      	movs	r1, #1
 8003f78:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	223c      	movs	r2, #60	; 0x3c
 8003f7e:	2100      	movs	r1, #0
 8003f80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	0018      	movs	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b004      	add	sp, #16
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40014000 	.word	0x40014000

08003f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e044      	b.n	8004054 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d107      	bne.n	8003fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2270      	movs	r2, #112	; 0x70
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fd fb9f 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2224      	movs	r2, #36	; 0x24
 8003fe6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	438a      	bics	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 fa24 	bl	8004448 <UART_SetConfig>
 8004000:	0003      	movs	r3, r0
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e024      	b.n	8004054 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0018      	movs	r0, r3
 8004016:	f000 fb9d 	bl	8004754 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	490d      	ldr	r1, [pc, #52]	; (800405c <HAL_UART_Init+0xa4>)
 8004026:	400a      	ands	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	212a      	movs	r1, #42	; 0x2a
 8004036:	438a      	bics	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2101      	movs	r1, #1
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0018      	movs	r0, r3
 800404e:	f000 fc35 	bl	80048bc <UART_CheckIdleState>
 8004052:	0003      	movs	r3, r0
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}
 800405c:	ffffb7ff 	.word	0xffffb7ff

08004060 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	1dbb      	adds	r3, r7, #6
 800406e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004074:	2b20      	cmp	r3, #32
 8004076:	d000      	beq.n	800407a <HAL_UART_Transmit+0x1a>
 8004078:	e095      	b.n	80041a6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_UART_Transmit+0x28>
 8004080:	1dbb      	adds	r3, r7, #6
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e08d      	b.n	80041a8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	015b      	lsls	r3, r3, #5
 8004094:	429a      	cmp	r2, r3
 8004096:	d109      	bne.n	80040ac <HAL_UART_Transmit+0x4c>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2201      	movs	r2, #1
 80040a4:	4013      	ands	r3, r2
 80040a6:	d001      	beq.n	80040ac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e07d      	b.n	80041a8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2270      	movs	r2, #112	; 0x70
 80040b0:	5c9b      	ldrb	r3, [r3, r2]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Transmit+0x5a>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e076      	b.n	80041a8 <HAL_UART_Transmit+0x148>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2270      	movs	r2, #112	; 0x70
 80040be:	2101      	movs	r1, #1
 80040c0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2221      	movs	r2, #33	; 0x21
 80040cc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80040ce:	f7fd fd59 	bl	8001b84 <HAL_GetTick>
 80040d2:	0003      	movs	r3, r0
 80040d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1dba      	adds	r2, r7, #6
 80040da:	2150      	movs	r1, #80	; 0x50
 80040dc:	8812      	ldrh	r2, [r2, #0]
 80040de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1dba      	adds	r2, r7, #6
 80040e4:	2152      	movs	r1, #82	; 0x52
 80040e6:	8812      	ldrh	r2, [r2, #0]
 80040e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	015b      	lsls	r3, r3, #5
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d108      	bne.n	8004108 <HAL_UART_Transmit+0xa8>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	e003      	b.n	8004110 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004110:	e02d      	b.n	800416e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	0013      	movs	r3, r2
 800411c:	2200      	movs	r2, #0
 800411e:	2180      	movs	r1, #128	; 0x80
 8004120:	f000 fc12 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d001      	beq.n	800412c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e03d      	b.n	80041a8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	881a      	ldrh	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	05d2      	lsls	r2, r2, #23
 800413c:	0dd2      	lsrs	r2, r2, #23
 800413e:	b292      	uxth	r2, r2
 8004140:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	3302      	adds	r3, #2
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	e008      	b.n	800415c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	b292      	uxth	r2, r2
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3301      	adds	r3, #1
 800415a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2252      	movs	r2, #82	; 0x52
 8004160:	5a9b      	ldrh	r3, [r3, r2]
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b299      	uxth	r1, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2252      	movs	r2, #82	; 0x52
 800416c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2252      	movs	r2, #82	; 0x52
 8004172:	5a9b      	ldrh	r3, [r3, r2]
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1cb      	bne.n	8004112 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	0013      	movs	r3, r2
 8004184:	2200      	movs	r2, #0
 8004186:	2140      	movs	r1, #64	; 0x40
 8004188:	f000 fbde 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 800418c:	1e03      	subs	r3, r0, #0
 800418e:	d001      	beq.n	8004194 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e009      	b.n	80041a8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2270      	movs	r2, #112	; 0x70
 800419e:	2100      	movs	r1, #0
 80041a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	0018      	movs	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b008      	add	sp, #32
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4a93      	ldr	r2, [pc, #588]	; (8004420 <HAL_UART_IRQHandler+0x270>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d112      	bne.n	8004204 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2220      	movs	r2, #32
 80041e2:	4013      	ands	r3, r2
 80041e4:	d00e      	beq.n	8004204 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2220      	movs	r2, #32
 80041ea:	4013      	ands	r3, r2
 80041ec:	d00a      	beq.n	8004204 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d100      	bne.n	80041f8 <HAL_UART_IRQHandler+0x48>
 80041f6:	e10b      	b.n	8004410 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	0010      	movs	r0, r2
 8004200:	4798      	blx	r3
      }
      return;
 8004202:	e105      	b.n	8004410 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d100      	bne.n	800420c <HAL_UART_IRQHandler+0x5c>
 800420a:	e0cd      	b.n	80043a8 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2201      	movs	r2, #1
 8004210:	4013      	ands	r3, r2
 8004212:	d105      	bne.n	8004220 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	2390      	movs	r3, #144	; 0x90
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4013      	ands	r3, r2
 800421c:	d100      	bne.n	8004220 <HAL_UART_IRQHandler+0x70>
 800421e:	e0c3      	b.n	80043a8 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2201      	movs	r2, #1
 8004224:	4013      	ands	r3, r2
 8004226:	d00e      	beq.n	8004246 <HAL_UART_IRQHandler+0x96>
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	4013      	ands	r3, r2
 8004230:	d009      	beq.n	8004246 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2201      	movs	r2, #1
 8004238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800423e:	2201      	movs	r2, #1
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2202      	movs	r2, #2
 800424a:	4013      	ands	r3, r2
 800424c:	d00d      	beq.n	800426a <HAL_UART_IRQHandler+0xba>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2201      	movs	r2, #1
 8004252:	4013      	ands	r3, r2
 8004254:	d009      	beq.n	800426a <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2202      	movs	r2, #2
 800425c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004262:	2204      	movs	r2, #4
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2204      	movs	r2, #4
 800426e:	4013      	ands	r3, r2
 8004270:	d00d      	beq.n	800428e <HAL_UART_IRQHandler+0xde>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2201      	movs	r2, #1
 8004276:	4013      	ands	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2204      	movs	r2, #4
 8004280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004286:	2202      	movs	r2, #2
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	2208      	movs	r2, #8
 8004292:	4013      	ands	r3, r2
 8004294:	d011      	beq.n	80042ba <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2220      	movs	r2, #32
 800429a:	4013      	ands	r3, r2
 800429c:	d103      	bne.n	80042a6 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2201      	movs	r2, #1
 80042a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042a4:	d009      	beq.n	80042ba <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2208      	movs	r2, #8
 80042ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b2:	2208      	movs	r2, #8
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	4013      	ands	r3, r2
 80042c2:	d00f      	beq.n	80042e4 <HAL_UART_IRQHandler+0x134>
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	04db      	lsls	r3, r3, #19
 80042ca:	4013      	ands	r3, r2
 80042cc:	d00a      	beq.n	80042e4 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2280      	movs	r2, #128	; 0x80
 80042d4:	0112      	lsls	r2, r2, #4
 80042d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042dc:	2220      	movs	r2, #32
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d100      	bne.n	80042ee <HAL_UART_IRQHandler+0x13e>
 80042ec:	e092      	b.n	8004414 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2220      	movs	r2, #32
 80042f2:	4013      	ands	r3, r2
 80042f4:	d00c      	beq.n	8004310 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2220      	movs	r2, #32
 80042fa:	4013      	ands	r3, r2
 80042fc:	d008      	beq.n	8004310 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004302:	2b00      	cmp	r3, #0
 8004304:	d004      	beq.n	8004310 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	0010      	movs	r0, r2
 800430e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004314:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2240      	movs	r2, #64	; 0x40
 800431e:	4013      	ands	r3, r2
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	d003      	beq.n	800432c <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2228      	movs	r2, #40	; 0x28
 8004328:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800432a:	d033      	beq.n	8004394 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	0018      	movs	r0, r3
 8004330:	f000 fb88 	bl	8004a44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2240      	movs	r2, #64	; 0x40
 800433c:	4013      	ands	r3, r2
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d123      	bne.n	800438a <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2140      	movs	r1, #64	; 0x40
 800434e:	438a      	bics	r2, r1
 8004350:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d012      	beq.n	8004380 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800435e:	4a31      	ldr	r2, [pc, #196]	; (8004424 <HAL_UART_IRQHandler+0x274>)
 8004360:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004366:	0018      	movs	r0, r3
 8004368:	f7fe fa4a 	bl	8002800 <HAL_DMA_Abort_IT>
 800436c:	1e03      	subs	r3, r0, #0
 800436e:	d019      	beq.n	80043a4 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437a:	0018      	movs	r0, r3
 800437c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437e:	e011      	b.n	80043a4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	0018      	movs	r0, r3
 8004384:	f000 f858 	bl	8004438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004388:	e00c      	b.n	80043a4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	0018      	movs	r0, r3
 800438e:	f000 f853 	bl	8004438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004392:	e007      	b.n	80043a4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	0018      	movs	r0, r3
 8004398:	f000 f84e 	bl	8004438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80043a2:	e037      	b.n	8004414 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	46c0      	nop			; (mov r8, r8)
    return;
 80043a6:	e035      	b.n	8004414 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	035b      	lsls	r3, r3, #13
 80043ae:	4013      	ands	r3, r2
 80043b0:	d00e      	beq.n	80043d0 <HAL_UART_IRQHandler+0x220>
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	03db      	lsls	r3, r3, #15
 80043b8:	4013      	ands	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2280      	movs	r2, #128	; 0x80
 80043c2:	0352      	lsls	r2, r2, #13
 80043c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f000 fb8c 	bl	8004ae6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043ce:	e024      	b.n	800441a <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	4013      	ands	r3, r2
 80043d6:	d00d      	beq.n	80043f4 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	4013      	ands	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d017      	beq.n	8004418 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	0010      	movs	r0, r2
 80043f0:	4798      	blx	r3
    }
    return;
 80043f2:	e011      	b.n	8004418 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2240      	movs	r2, #64	; 0x40
 80043f8:	4013      	ands	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_UART_IRQHandler+0x26a>
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2240      	movs	r2, #64	; 0x40
 8004400:	4013      	ands	r3, r2
 8004402:	d00a      	beq.n	800441a <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	0018      	movs	r0, r3
 8004408:	f000 fb53 	bl	8004ab2 <UART_EndTransmit_IT>
    return;
 800440c:	46c0      	nop			; (mov r8, r8)
 800440e:	e004      	b.n	800441a <HAL_UART_IRQHandler+0x26a>
      return;
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	e002      	b.n	800441a <HAL_UART_IRQHandler+0x26a>
    return;
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	e000      	b.n	800441a <HAL_UART_IRQHandler+0x26a>
    return;
 8004418:	46c0      	nop			; (mov r8, r8)
  }

}
 800441a:	46bd      	mov	sp, r7
 800441c:	b008      	add	sp, #32
 800441e:	bd80      	pop	{r7, pc}
 8004420:	0000080f 	.word	0x0000080f
 8004424:	08004a85 	.word	0x08004a85

08004428 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004430:	46c0      	nop			; (mov r8, r8)
 8004432:	46bd      	mov	sp, r7
 8004434:	b002      	add	sp, #8
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	46bd      	mov	sp, r7
 8004444:	b002      	add	sp, #8
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004450:	2300      	movs	r3, #0
 8004452:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004454:	2317      	movs	r3, #23
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4aad      	ldr	r2, [pc, #692]	; (8004730 <UART_SetConfig+0x2e8>)
 800447c:	4013      	ands	r3, r2
 800447e:	0019      	movs	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	430a      	orrs	r2, r1
 8004488:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4aa8      	ldr	r2, [pc, #672]	; (8004734 <UART_SetConfig+0x2ec>)
 8004492:	4013      	ands	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a9f      	ldr	r2, [pc, #636]	; (8004738 <UART_SetConfig+0x2f0>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	0019      	movs	r1, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a9b      	ldr	r2, [pc, #620]	; (800473c <UART_SetConfig+0x2f4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d125      	bne.n	800451e <UART_SetConfig+0xd6>
 80044d2:	4b9b      	ldr	r3, [pc, #620]	; (8004740 <UART_SetConfig+0x2f8>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	2203      	movs	r2, #3
 80044d8:	4013      	ands	r3, r2
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d00f      	beq.n	80044fe <UART_SetConfig+0xb6>
 80044de:	d304      	bcc.n	80044ea <UART_SetConfig+0xa2>
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d011      	beq.n	8004508 <UART_SetConfig+0xc0>
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d005      	beq.n	80044f4 <UART_SetConfig+0xac>
 80044e8:	e013      	b.n	8004512 <UART_SetConfig+0xca>
 80044ea:	231f      	movs	r3, #31
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e022      	b.n	800453a <UART_SetConfig+0xf2>
 80044f4:	231f      	movs	r3, #31
 80044f6:	18fb      	adds	r3, r7, r3
 80044f8:	2202      	movs	r2, #2
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	e01d      	b.n	800453a <UART_SetConfig+0xf2>
 80044fe:	231f      	movs	r3, #31
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	2204      	movs	r2, #4
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	e018      	b.n	800453a <UART_SetConfig+0xf2>
 8004508:	231f      	movs	r3, #31
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	2208      	movs	r2, #8
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	e013      	b.n	800453a <UART_SetConfig+0xf2>
 8004512:	231f      	movs	r3, #31
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	2210      	movs	r2, #16
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	e00d      	b.n	800453a <UART_SetConfig+0xf2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a88      	ldr	r2, [pc, #544]	; (8004744 <UART_SetConfig+0x2fc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d104      	bne.n	8004532 <UART_SetConfig+0xea>
 8004528:	231f      	movs	r3, #31
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e003      	b.n	800453a <UART_SetConfig+0xf2>
 8004532:	231f      	movs	r3, #31
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	2210      	movs	r2, #16
 8004538:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	429a      	cmp	r2, r3
 8004544:	d000      	beq.n	8004548 <UART_SetConfig+0x100>
 8004546:	e07d      	b.n	8004644 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8004548:	231f      	movs	r3, #31
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d01c      	beq.n	800458c <UART_SetConfig+0x144>
 8004552:	dc02      	bgt.n	800455a <UART_SetConfig+0x112>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <UART_SetConfig+0x11c>
 8004558:	e04b      	b.n	80045f2 <UART_SetConfig+0x1aa>
 800455a:	2b04      	cmp	r3, #4
 800455c:	d025      	beq.n	80045aa <UART_SetConfig+0x162>
 800455e:	2b08      	cmp	r3, #8
 8004560:	d037      	beq.n	80045d2 <UART_SetConfig+0x18a>
 8004562:	e046      	b.n	80045f2 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004564:	f7ff f862 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 8004568:	0003      	movs	r3, r0
 800456a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	005a      	lsls	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	18d2      	adds	r2, r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	0019      	movs	r1, r3
 800457e:	0010      	movs	r0, r2
 8004580:	f7fb fdc2 	bl	8000108 <__udivsi3>
 8004584:	0003      	movs	r3, r0
 8004586:	b29b      	uxth	r3, r3
 8004588:	61bb      	str	r3, [r7, #24]
        break;
 800458a:	e037      	b.n	80045fc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	4a6d      	ldr	r2, [pc, #436]	; (8004748 <UART_SetConfig+0x300>)
 8004594:	189a      	adds	r2, r3, r2
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	0019      	movs	r1, r3
 800459c:	0010      	movs	r0, r2
 800459e:	f7fb fdb3 	bl	8000108 <__udivsi3>
 80045a2:	0003      	movs	r3, r0
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	61bb      	str	r3, [r7, #24]
        break;
 80045a8:	e028      	b.n	80045fc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045aa:	f7fe ffd1 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 80045ae:	0003      	movs	r3, r0
 80045b0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	005a      	lsls	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	18d2      	adds	r2, r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	0019      	movs	r1, r3
 80045c4:	0010      	movs	r0, r2
 80045c6:	f7fb fd9f 	bl	8000108 <__udivsi3>
 80045ca:	0003      	movs	r3, r0
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	61bb      	str	r3, [r7, #24]
        break;
 80045d0:	e014      	b.n	80045fc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	085b      	lsrs	r3, r3, #1
 80045d8:	2280      	movs	r2, #128	; 0x80
 80045da:	0252      	lsls	r2, r2, #9
 80045dc:	189a      	adds	r2, r3, r2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	0019      	movs	r1, r3
 80045e4:	0010      	movs	r0, r2
 80045e6:	f7fb fd8f 	bl	8000108 <__udivsi3>
 80045ea:	0003      	movs	r3, r0
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	61bb      	str	r3, [r7, #24]
        break;
 80045f0:	e004      	b.n	80045fc <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80045f2:	2317      	movs	r3, #23
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
        break;
 80045fa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	d91b      	bls.n	800463a <UART_SetConfig+0x1f2>
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	4a51      	ldr	r2, [pc, #324]	; (800474c <UART_SetConfig+0x304>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d817      	bhi.n	800463a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	b29a      	uxth	r2, r3
 800460e:	200a      	movs	r0, #10
 8004610:	183b      	adds	r3, r7, r0
 8004612:	210f      	movs	r1, #15
 8004614:	438a      	bics	r2, r1
 8004616:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	b29b      	uxth	r3, r3
 800461e:	2207      	movs	r2, #7
 8004620:	4013      	ands	r3, r2
 8004622:	b299      	uxth	r1, r3
 8004624:	183b      	adds	r3, r7, r0
 8004626:	183a      	adds	r2, r7, r0
 8004628:	8812      	ldrh	r2, [r2, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	183a      	adds	r2, r7, r0
 8004634:	8812      	ldrh	r2, [r2, #0]
 8004636:	60da      	str	r2, [r3, #12]
 8004638:	e06c      	b.n	8004714 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800463a:	2317      	movs	r3, #23
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e067      	b.n	8004714 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8004644:	231f      	movs	r3, #31
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d01b      	beq.n	8004686 <UART_SetConfig+0x23e>
 800464e:	dc02      	bgt.n	8004656 <UART_SetConfig+0x20e>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <UART_SetConfig+0x218>
 8004654:	e049      	b.n	80046ea <UART_SetConfig+0x2a2>
 8004656:	2b04      	cmp	r3, #4
 8004658:	d024      	beq.n	80046a4 <UART_SetConfig+0x25c>
 800465a:	2b08      	cmp	r3, #8
 800465c:	d035      	beq.n	80046ca <UART_SetConfig+0x282>
 800465e:	e044      	b.n	80046ea <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004660:	f7fe ffe4 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 8004664:	0003      	movs	r3, r0
 8004666:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	085a      	lsrs	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	18d2      	adds	r2, r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	0019      	movs	r1, r3
 8004678:	0010      	movs	r0, r2
 800467a:	f7fb fd45 	bl	8000108 <__udivsi3>
 800467e:	0003      	movs	r3, r0
 8004680:	b29b      	uxth	r3, r3
 8004682:	61bb      	str	r3, [r7, #24]
        break;
 8004684:	e036      	b.n	80046f4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	085b      	lsrs	r3, r3, #1
 800468c:	4a30      	ldr	r2, [pc, #192]	; (8004750 <UART_SetConfig+0x308>)
 800468e:	189a      	adds	r2, r3, r2
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	0019      	movs	r1, r3
 8004696:	0010      	movs	r0, r2
 8004698:	f7fb fd36 	bl	8000108 <__udivsi3>
 800469c:	0003      	movs	r3, r0
 800469e:	b29b      	uxth	r3, r3
 80046a0:	61bb      	str	r3, [r7, #24]
        break;
 80046a2:	e027      	b.n	80046f4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a4:	f7fe ff54 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 80046a8:	0003      	movs	r3, r0
 80046aa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	085a      	lsrs	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	18d2      	adds	r2, r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	0019      	movs	r1, r3
 80046bc:	0010      	movs	r0, r2
 80046be:	f7fb fd23 	bl	8000108 <__udivsi3>
 80046c2:	0003      	movs	r3, r0
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	61bb      	str	r3, [r7, #24]
        break;
 80046c8:	e014      	b.n	80046f4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	2280      	movs	r2, #128	; 0x80
 80046d2:	0212      	lsls	r2, r2, #8
 80046d4:	189a      	adds	r2, r3, r2
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	0019      	movs	r1, r3
 80046dc:	0010      	movs	r0, r2
 80046de:	f7fb fd13 	bl	8000108 <__udivsi3>
 80046e2:	0003      	movs	r3, r0
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	61bb      	str	r3, [r7, #24]
        break;
 80046e8:	e004      	b.n	80046f4 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80046ea:	2317      	movs	r3, #23
 80046ec:	18fb      	adds	r3, r7, r3
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
        break;
 80046f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b0f      	cmp	r3, #15
 80046f8:	d908      	bls.n	800470c <UART_SetConfig+0x2c4>
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <UART_SetConfig+0x304>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d804      	bhi.n	800470c <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	e003      	b.n	8004714 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800470c:	2317      	movs	r3, #23
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004720:	2317      	movs	r3, #23
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	781b      	ldrb	r3, [r3, #0]
}
 8004726:	0018      	movs	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	b008      	add	sp, #32
 800472c:	bd80      	pop	{r7, pc}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	ffff69f3 	.word	0xffff69f3
 8004734:	ffffcfff 	.word	0xffffcfff
 8004738:	fffff4ff 	.word	0xfffff4ff
 800473c:	40013800 	.word	0x40013800
 8004740:	40021000 	.word	0x40021000
 8004744:	40004400 	.word	0x40004400
 8004748:	00f42400 	.word	0x00f42400
 800474c:	0000ffff 	.word	0x0000ffff
 8004750:	007a1200 	.word	0x007a1200

08004754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	2201      	movs	r2, #1
 8004762:	4013      	ands	r3, r2
 8004764:	d00b      	beq.n	800477e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	4a4a      	ldr	r2, [pc, #296]	; (8004898 <UART_AdvFeatureConfig+0x144>)
 800476e:	4013      	ands	r3, r2
 8004770:	0019      	movs	r1, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	2202      	movs	r2, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d00b      	beq.n	80047a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4a43      	ldr	r2, [pc, #268]	; (800489c <UART_AdvFeatureConfig+0x148>)
 8004790:	4013      	ands	r3, r2
 8004792:	0019      	movs	r1, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	2204      	movs	r2, #4
 80047a6:	4013      	ands	r3, r2
 80047a8:	d00b      	beq.n	80047c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4a3b      	ldr	r2, [pc, #236]	; (80048a0 <UART_AdvFeatureConfig+0x14c>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	0019      	movs	r1, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	2208      	movs	r2, #8
 80047c8:	4013      	ands	r3, r2
 80047ca:	d00b      	beq.n	80047e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	4a34      	ldr	r2, [pc, #208]	; (80048a4 <UART_AdvFeatureConfig+0x150>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	0019      	movs	r1, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	2210      	movs	r2, #16
 80047ea:	4013      	ands	r3, r2
 80047ec:	d00b      	beq.n	8004806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4a2c      	ldr	r2, [pc, #176]	; (80048a8 <UART_AdvFeatureConfig+0x154>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	0019      	movs	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	2220      	movs	r2, #32
 800480c:	4013      	ands	r3, r2
 800480e:	d00b      	beq.n	8004828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	4a25      	ldr	r2, [pc, #148]	; (80048ac <UART_AdvFeatureConfig+0x158>)
 8004818:	4013      	ands	r3, r2
 800481a:	0019      	movs	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	2240      	movs	r2, #64	; 0x40
 800482e:	4013      	ands	r3, r2
 8004830:	d01d      	beq.n	800486e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a1d      	ldr	r2, [pc, #116]	; (80048b0 <UART_AdvFeatureConfig+0x15c>)
 800483a:	4013      	ands	r3, r2
 800483c:	0019      	movs	r1, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	035b      	lsls	r3, r3, #13
 8004852:	429a      	cmp	r2, r3
 8004854:	d10b      	bne.n	800486e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	4a15      	ldr	r2, [pc, #84]	; (80048b4 <UART_AdvFeatureConfig+0x160>)
 800485e:	4013      	ands	r3, r2
 8004860:	0019      	movs	r1, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	2280      	movs	r2, #128	; 0x80
 8004874:	4013      	ands	r3, r2
 8004876:	d00b      	beq.n	8004890 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4a0e      	ldr	r2, [pc, #56]	; (80048b8 <UART_AdvFeatureConfig+0x164>)
 8004880:	4013      	ands	r3, r2
 8004882:	0019      	movs	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
  }
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	b002      	add	sp, #8
 8004896:	bd80      	pop	{r7, pc}
 8004898:	fffdffff 	.word	0xfffdffff
 800489c:	fffeffff 	.word	0xfffeffff
 80048a0:	fffbffff 	.word	0xfffbffff
 80048a4:	ffff7fff 	.word	0xffff7fff
 80048a8:	ffffefff 	.word	0xffffefff
 80048ac:	ffffdfff 	.word	0xffffdfff
 80048b0:	ffefffff 	.word	0xffefffff
 80048b4:	ff9fffff 	.word	0xff9fffff
 80048b8:	fff7ffff 	.word	0xfff7ffff

080048bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80048ca:	f7fd f95b 	bl	8001b84 <HAL_GetTick>
 80048ce:	0003      	movs	r3, r0
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2208      	movs	r2, #8
 80048da:	4013      	ands	r3, r2
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d10d      	bne.n	80048fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	2380      	movs	r3, #128	; 0x80
 80048e4:	0399      	lsls	r1, r3, #14
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4b16      	ldr	r3, [pc, #88]	; (8004944 <UART_CheckIdleState+0x88>)
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	0013      	movs	r3, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	f000 f82a 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 80048f4:	1e03      	subs	r3, r0, #0
 80048f6:	d001      	beq.n	80048fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e01f      	b.n	800493c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2204      	movs	r2, #4
 8004904:	4013      	ands	r3, r2
 8004906:	2b04      	cmp	r3, #4
 8004908:	d10d      	bne.n	8004926 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	03d9      	lsls	r1, r3, #15
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <UART_CheckIdleState+0x88>)
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	0013      	movs	r3, r2
 8004918:	2200      	movs	r2, #0
 800491a:	f000 f815 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 800491e:	1e03      	subs	r3, r0, #0
 8004920:	d001      	beq.n	8004926 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e00a      	b.n	800493c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2270      	movs	r2, #112	; 0x70
 8004936:	2100      	movs	r1, #0
 8004938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	b004      	add	sp, #16
 8004942:	bd80      	pop	{r7, pc}
 8004944:	01ffffff 	.word	0x01ffffff

08004948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	1dfb      	adds	r3, r7, #7
 8004956:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004958:	e05d      	b.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	3301      	adds	r3, #1
 800495e:	d05a      	beq.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004960:	f7fd f910 	bl	8001b84 <HAL_GetTick>
 8004964:	0002      	movs	r2, r0
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	429a      	cmp	r2, r3
 800496e:	d302      	bcc.n	8004976 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11b      	bne.n	80049ae <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	492f      	ldr	r1, [pc, #188]	; (8004a40 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004982:	400a      	ands	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2101      	movs	r1, #1
 8004992:	438a      	bics	r2, r1
 8004994:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2270      	movs	r2, #112	; 0x70
 80049a6:	2100      	movs	r1, #0
 80049a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e043      	b.n	8004a36 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2204      	movs	r2, #4
 80049b6:	4013      	ands	r3, r2
 80049b8:	d02d      	beq.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	401a      	ands	r2, r3
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d123      	bne.n	8004a16 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	0112      	lsls	r2, r2, #4
 80049d6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4917      	ldr	r1, [pc, #92]	; (8004a40 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80049e4:	400a      	ands	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2101      	movs	r1, #1
 80049f4:	438a      	bics	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2270      	movs	r2, #112	; 0x70
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e00f      	b.n	8004a36 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	425a      	negs	r2, r3
 8004a26:	4153      	adcs	r3, r2
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	001a      	movs	r2, r3
 8004a2c:	1dfb      	adds	r3, r7, #7
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d092      	beq.n	800495a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b004      	add	sp, #16
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	fffffe5f 	.word	0xfffffe5f

08004a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	490a      	ldr	r1, [pc, #40]	; (8004a80 <UART_EndRxTransfer+0x3c>)
 8004a58:	400a      	ands	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2101      	movs	r1, #1
 8004a68:	438a      	bics	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004a78:	46c0      	nop			; (mov r8, r8)
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b002      	add	sp, #8
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	fffffedf 	.word	0xfffffedf

08004a84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	225a      	movs	r2, #90	; 0x5a
 8004a96:	2100      	movs	r1, #0
 8004a98:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2252      	movs	r2, #82	; 0x52
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7ff fcc7 	bl	8004438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b004      	add	sp, #16
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	438a      	bics	r2, r1
 8004ac8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f7ff fca5 	bl	8004428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b002      	add	sp, #8
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <__libc_init_array>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	2600      	movs	r6, #0
 8004afc:	4d0c      	ldr	r5, [pc, #48]	; (8004b30 <__libc_init_array+0x38>)
 8004afe:	4c0d      	ldr	r4, [pc, #52]	; (8004b34 <__libc_init_array+0x3c>)
 8004b00:	1b64      	subs	r4, r4, r5
 8004b02:	10a4      	asrs	r4, r4, #2
 8004b04:	42a6      	cmp	r6, r4
 8004b06:	d109      	bne.n	8004b1c <__libc_init_array+0x24>
 8004b08:	2600      	movs	r6, #0
 8004b0a:	f000 f82b 	bl	8004b64 <_init>
 8004b0e:	4d0a      	ldr	r5, [pc, #40]	; (8004b38 <__libc_init_array+0x40>)
 8004b10:	4c0a      	ldr	r4, [pc, #40]	; (8004b3c <__libc_init_array+0x44>)
 8004b12:	1b64      	subs	r4, r4, r5
 8004b14:	10a4      	asrs	r4, r4, #2
 8004b16:	42a6      	cmp	r6, r4
 8004b18:	d105      	bne.n	8004b26 <__libc_init_array+0x2e>
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	00b3      	lsls	r3, r6, #2
 8004b1e:	58eb      	ldr	r3, [r5, r3]
 8004b20:	4798      	blx	r3
 8004b22:	3601      	adds	r6, #1
 8004b24:	e7ee      	b.n	8004b04 <__libc_init_array+0xc>
 8004b26:	00b3      	lsls	r3, r6, #2
 8004b28:	58eb      	ldr	r3, [r5, r3]
 8004b2a:	4798      	blx	r3
 8004b2c:	3601      	adds	r6, #1
 8004b2e:	e7f2      	b.n	8004b16 <__libc_init_array+0x1e>
 8004b30:	08004bb4 	.word	0x08004bb4
 8004b34:	08004bb4 	.word	0x08004bb4
 8004b38:	08004bb4 	.word	0x08004bb4
 8004b3c:	08004bb8 	.word	0x08004bb8

08004b40 <memcpy>:
 8004b40:	2300      	movs	r3, #0
 8004b42:	b510      	push	{r4, lr}
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d100      	bne.n	8004b4a <memcpy+0xa>
 8004b48:	bd10      	pop	{r4, pc}
 8004b4a:	5ccc      	ldrb	r4, [r1, r3]
 8004b4c:	54c4      	strb	r4, [r0, r3]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	e7f8      	b.n	8004b44 <memcpy+0x4>

08004b52 <memset>:
 8004b52:	0003      	movs	r3, r0
 8004b54:	1812      	adds	r2, r2, r0
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d100      	bne.n	8004b5c <memset+0xa>
 8004b5a:	4770      	bx	lr
 8004b5c:	7019      	strb	r1, [r3, #0]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	e7f9      	b.n	8004b56 <memset+0x4>
	...

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
