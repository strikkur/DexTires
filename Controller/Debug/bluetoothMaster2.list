
bluetoothMaster2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080050a4  080050a4  000150a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050fc  080050fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080050fc  080050fc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050fc  080050fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000010  08005114  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08005114  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eafa  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000248e  00000000  00000000  0002eb32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00030fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  00031d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010584  00000000  00000000  000329e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c624  00000000  00000000  00042f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005ab21  00000000  00000000  0004f590  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aa0b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003168  00000000  00000000  000aa12c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800508c 	.word	0x0800508c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800508c 	.word	0x0800508c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 fbfb 	bl	8000a24 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fb59 	bl	80008ec <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 f80a 	bl	800025c <__aeabi_dsub>
 8000248:	f000 fb50 	bl	80008ec <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dsub>:
 800025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	000c      	movs	r4, r1
 8000268:	0309      	lsls	r1, r1, #12
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0a49      	lsrs	r1, r1, #9
 800026e:	0f46      	lsrs	r6, r0, #29
 8000270:	005f      	lsls	r7, r3, #1
 8000272:	4331      	orrs	r1, r6
 8000274:	031e      	lsls	r6, r3, #12
 8000276:	0fdb      	lsrs	r3, r3, #31
 8000278:	0a76      	lsrs	r6, r6, #9
 800027a:	469b      	mov	fp, r3
 800027c:	0f53      	lsrs	r3, r2, #29
 800027e:	4333      	orrs	r3, r6
 8000280:	4ec8      	ldr	r6, [pc, #800]	; (80005a4 <__aeabi_dsub+0x348>)
 8000282:	0065      	lsls	r5, r4, #1
 8000284:	00c0      	lsls	r0, r0, #3
 8000286:	0fe4      	lsrs	r4, r4, #31
 8000288:	00d2      	lsls	r2, r2, #3
 800028a:	0d6d      	lsrs	r5, r5, #21
 800028c:	46a2      	mov	sl, r4
 800028e:	4681      	mov	r9, r0
 8000290:	0d7f      	lsrs	r7, r7, #21
 8000292:	469c      	mov	ip, r3
 8000294:	4690      	mov	r8, r2
 8000296:	42b7      	cmp	r7, r6
 8000298:	d100      	bne.n	800029c <__aeabi_dsub+0x40>
 800029a:	e0b9      	b.n	8000410 <__aeabi_dsub+0x1b4>
 800029c:	465b      	mov	r3, fp
 800029e:	2601      	movs	r6, #1
 80002a0:	4073      	eors	r3, r6
 80002a2:	469b      	mov	fp, r3
 80002a4:	1bee      	subs	r6, r5, r7
 80002a6:	45a3      	cmp	fp, r4
 80002a8:	d100      	bne.n	80002ac <__aeabi_dsub+0x50>
 80002aa:	e083      	b.n	80003b4 <__aeabi_dsub+0x158>
 80002ac:	2e00      	cmp	r6, #0
 80002ae:	dd63      	ble.n	8000378 <__aeabi_dsub+0x11c>
 80002b0:	2f00      	cmp	r7, #0
 80002b2:	d000      	beq.n	80002b6 <__aeabi_dsub+0x5a>
 80002b4:	e0b1      	b.n	800041a <__aeabi_dsub+0x1be>
 80002b6:	4663      	mov	r3, ip
 80002b8:	4313      	orrs	r3, r2
 80002ba:	d100      	bne.n	80002be <__aeabi_dsub+0x62>
 80002bc:	e123      	b.n	8000506 <__aeabi_dsub+0x2aa>
 80002be:	1e73      	subs	r3, r6, #1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d000      	beq.n	80002c6 <__aeabi_dsub+0x6a>
 80002c4:	e1ba      	b.n	800063c <__aeabi_dsub+0x3e0>
 80002c6:	1a86      	subs	r6, r0, r2
 80002c8:	4663      	mov	r3, ip
 80002ca:	42b0      	cmp	r0, r6
 80002cc:	4180      	sbcs	r0, r0
 80002ce:	2501      	movs	r5, #1
 80002d0:	1ac9      	subs	r1, r1, r3
 80002d2:	4240      	negs	r0, r0
 80002d4:	1a09      	subs	r1, r1, r0
 80002d6:	020b      	lsls	r3, r1, #8
 80002d8:	d400      	bmi.n	80002dc <__aeabi_dsub+0x80>
 80002da:	e147      	b.n	800056c <__aeabi_dsub+0x310>
 80002dc:	0249      	lsls	r1, r1, #9
 80002de:	0a4b      	lsrs	r3, r1, #9
 80002e0:	4698      	mov	r8, r3
 80002e2:	4643      	mov	r3, r8
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d100      	bne.n	80002ea <__aeabi_dsub+0x8e>
 80002e8:	e189      	b.n	80005fe <__aeabi_dsub+0x3a2>
 80002ea:	4640      	mov	r0, r8
 80002ec:	f000 fba4 	bl	8000a38 <__clzsi2>
 80002f0:	0003      	movs	r3, r0
 80002f2:	3b08      	subs	r3, #8
 80002f4:	2b1f      	cmp	r3, #31
 80002f6:	dd00      	ble.n	80002fa <__aeabi_dsub+0x9e>
 80002f8:	e17c      	b.n	80005f4 <__aeabi_dsub+0x398>
 80002fa:	2220      	movs	r2, #32
 80002fc:	0030      	movs	r0, r6
 80002fe:	1ad2      	subs	r2, r2, r3
 8000300:	4641      	mov	r1, r8
 8000302:	40d0      	lsrs	r0, r2
 8000304:	4099      	lsls	r1, r3
 8000306:	0002      	movs	r2, r0
 8000308:	409e      	lsls	r6, r3
 800030a:	430a      	orrs	r2, r1
 800030c:	429d      	cmp	r5, r3
 800030e:	dd00      	ble.n	8000312 <__aeabi_dsub+0xb6>
 8000310:	e16a      	b.n	80005e8 <__aeabi_dsub+0x38c>
 8000312:	1b5d      	subs	r5, r3, r5
 8000314:	1c6b      	adds	r3, r5, #1
 8000316:	2b1f      	cmp	r3, #31
 8000318:	dd00      	ble.n	800031c <__aeabi_dsub+0xc0>
 800031a:	e194      	b.n	8000646 <__aeabi_dsub+0x3ea>
 800031c:	2120      	movs	r1, #32
 800031e:	0010      	movs	r0, r2
 8000320:	0035      	movs	r5, r6
 8000322:	1ac9      	subs	r1, r1, r3
 8000324:	408e      	lsls	r6, r1
 8000326:	40da      	lsrs	r2, r3
 8000328:	4088      	lsls	r0, r1
 800032a:	40dd      	lsrs	r5, r3
 800032c:	1e71      	subs	r1, r6, #1
 800032e:	418e      	sbcs	r6, r1
 8000330:	0011      	movs	r1, r2
 8000332:	2207      	movs	r2, #7
 8000334:	4328      	orrs	r0, r5
 8000336:	2500      	movs	r5, #0
 8000338:	4306      	orrs	r6, r0
 800033a:	4032      	ands	r2, r6
 800033c:	2a00      	cmp	r2, #0
 800033e:	d009      	beq.n	8000354 <__aeabi_dsub+0xf8>
 8000340:	230f      	movs	r3, #15
 8000342:	4033      	ands	r3, r6
 8000344:	2b04      	cmp	r3, #4
 8000346:	d005      	beq.n	8000354 <__aeabi_dsub+0xf8>
 8000348:	1d33      	adds	r3, r6, #4
 800034a:	42b3      	cmp	r3, r6
 800034c:	41b6      	sbcs	r6, r6
 800034e:	4276      	negs	r6, r6
 8000350:	1989      	adds	r1, r1, r6
 8000352:	001e      	movs	r6, r3
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	d400      	bmi.n	800035a <__aeabi_dsub+0xfe>
 8000358:	e23d      	b.n	80007d6 <__aeabi_dsub+0x57a>
 800035a:	1c6a      	adds	r2, r5, #1
 800035c:	4b91      	ldr	r3, [pc, #580]	; (80005a4 <__aeabi_dsub+0x348>)
 800035e:	0555      	lsls	r5, r2, #21
 8000360:	0d6d      	lsrs	r5, r5, #21
 8000362:	429a      	cmp	r2, r3
 8000364:	d100      	bne.n	8000368 <__aeabi_dsub+0x10c>
 8000366:	e119      	b.n	800059c <__aeabi_dsub+0x340>
 8000368:	4a8f      	ldr	r2, [pc, #572]	; (80005a8 <__aeabi_dsub+0x34c>)
 800036a:	08f6      	lsrs	r6, r6, #3
 800036c:	400a      	ands	r2, r1
 800036e:	0757      	lsls	r7, r2, #29
 8000370:	0252      	lsls	r2, r2, #9
 8000372:	4337      	orrs	r7, r6
 8000374:	0b12      	lsrs	r2, r2, #12
 8000376:	e09b      	b.n	80004b0 <__aeabi_dsub+0x254>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d000      	beq.n	800037e <__aeabi_dsub+0x122>
 800037c:	e0c5      	b.n	800050a <__aeabi_dsub+0x2ae>
 800037e:	1c6e      	adds	r6, r5, #1
 8000380:	0576      	lsls	r6, r6, #21
 8000382:	0d76      	lsrs	r6, r6, #21
 8000384:	2e01      	cmp	r6, #1
 8000386:	dc00      	bgt.n	800038a <__aeabi_dsub+0x12e>
 8000388:	e148      	b.n	800061c <__aeabi_dsub+0x3c0>
 800038a:	4667      	mov	r7, ip
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	1bcb      	subs	r3, r1, r7
 8000390:	42b0      	cmp	r0, r6
 8000392:	41bf      	sbcs	r7, r7
 8000394:	427f      	negs	r7, r7
 8000396:	46b8      	mov	r8, r7
 8000398:	001f      	movs	r7, r3
 800039a:	4643      	mov	r3, r8
 800039c:	1aff      	subs	r7, r7, r3
 800039e:	003b      	movs	r3, r7
 80003a0:	46b8      	mov	r8, r7
 80003a2:	021b      	lsls	r3, r3, #8
 80003a4:	d500      	bpl.n	80003a8 <__aeabi_dsub+0x14c>
 80003a6:	e15f      	b.n	8000668 <__aeabi_dsub+0x40c>
 80003a8:	4337      	orrs	r7, r6
 80003aa:	d19a      	bne.n	80002e2 <__aeabi_dsub+0x86>
 80003ac:	2200      	movs	r2, #0
 80003ae:	2400      	movs	r4, #0
 80003b0:	2500      	movs	r5, #0
 80003b2:	e079      	b.n	80004a8 <__aeabi_dsub+0x24c>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	dc00      	bgt.n	80003ba <__aeabi_dsub+0x15e>
 80003b8:	e0fa      	b.n	80005b0 <__aeabi_dsub+0x354>
 80003ba:	2f00      	cmp	r7, #0
 80003bc:	d100      	bne.n	80003c0 <__aeabi_dsub+0x164>
 80003be:	e08d      	b.n	80004dc <__aeabi_dsub+0x280>
 80003c0:	4b78      	ldr	r3, [pc, #480]	; (80005a4 <__aeabi_dsub+0x348>)
 80003c2:	429d      	cmp	r5, r3
 80003c4:	d067      	beq.n	8000496 <__aeabi_dsub+0x23a>
 80003c6:	2380      	movs	r3, #128	; 0x80
 80003c8:	4667      	mov	r7, ip
 80003ca:	041b      	lsls	r3, r3, #16
 80003cc:	431f      	orrs	r7, r3
 80003ce:	46bc      	mov	ip, r7
 80003d0:	2e38      	cmp	r6, #56	; 0x38
 80003d2:	dc00      	bgt.n	80003d6 <__aeabi_dsub+0x17a>
 80003d4:	e152      	b.n	800067c <__aeabi_dsub+0x420>
 80003d6:	4663      	mov	r3, ip
 80003d8:	4313      	orrs	r3, r2
 80003da:	1e5a      	subs	r2, r3, #1
 80003dc:	4193      	sbcs	r3, r2
 80003de:	181e      	adds	r6, r3, r0
 80003e0:	4286      	cmp	r6, r0
 80003e2:	4180      	sbcs	r0, r0
 80003e4:	4240      	negs	r0, r0
 80003e6:	1809      	adds	r1, r1, r0
 80003e8:	020b      	lsls	r3, r1, #8
 80003ea:	d400      	bmi.n	80003ee <__aeabi_dsub+0x192>
 80003ec:	e0be      	b.n	800056c <__aeabi_dsub+0x310>
 80003ee:	4b6d      	ldr	r3, [pc, #436]	; (80005a4 <__aeabi_dsub+0x348>)
 80003f0:	3501      	adds	r5, #1
 80003f2:	429d      	cmp	r5, r3
 80003f4:	d100      	bne.n	80003f8 <__aeabi_dsub+0x19c>
 80003f6:	e0d2      	b.n	800059e <__aeabi_dsub+0x342>
 80003f8:	4a6b      	ldr	r2, [pc, #428]	; (80005a8 <__aeabi_dsub+0x34c>)
 80003fa:	0873      	lsrs	r3, r6, #1
 80003fc:	400a      	ands	r2, r1
 80003fe:	2101      	movs	r1, #1
 8000400:	400e      	ands	r6, r1
 8000402:	431e      	orrs	r6, r3
 8000404:	0851      	lsrs	r1, r2, #1
 8000406:	07d3      	lsls	r3, r2, #31
 8000408:	2207      	movs	r2, #7
 800040a:	431e      	orrs	r6, r3
 800040c:	4032      	ands	r2, r6
 800040e:	e795      	b.n	800033c <__aeabi_dsub+0xe0>
 8000410:	001e      	movs	r6, r3
 8000412:	4316      	orrs	r6, r2
 8000414:	d000      	beq.n	8000418 <__aeabi_dsub+0x1bc>
 8000416:	e745      	b.n	80002a4 <__aeabi_dsub+0x48>
 8000418:	e740      	b.n	800029c <__aeabi_dsub+0x40>
 800041a:	4b62      	ldr	r3, [pc, #392]	; (80005a4 <__aeabi_dsub+0x348>)
 800041c:	429d      	cmp	r5, r3
 800041e:	d03a      	beq.n	8000496 <__aeabi_dsub+0x23a>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	4667      	mov	r7, ip
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	431f      	orrs	r7, r3
 8000428:	46bc      	mov	ip, r7
 800042a:	2e38      	cmp	r6, #56	; 0x38
 800042c:	dd00      	ble.n	8000430 <__aeabi_dsub+0x1d4>
 800042e:	e0eb      	b.n	8000608 <__aeabi_dsub+0x3ac>
 8000430:	2e1f      	cmp	r6, #31
 8000432:	dc00      	bgt.n	8000436 <__aeabi_dsub+0x1da>
 8000434:	e13a      	b.n	80006ac <__aeabi_dsub+0x450>
 8000436:	0033      	movs	r3, r6
 8000438:	4667      	mov	r7, ip
 800043a:	3b20      	subs	r3, #32
 800043c:	40df      	lsrs	r7, r3
 800043e:	003b      	movs	r3, r7
 8000440:	2e20      	cmp	r6, #32
 8000442:	d005      	beq.n	8000450 <__aeabi_dsub+0x1f4>
 8000444:	2740      	movs	r7, #64	; 0x40
 8000446:	1bbf      	subs	r7, r7, r6
 8000448:	4666      	mov	r6, ip
 800044a:	40be      	lsls	r6, r7
 800044c:	4332      	orrs	r2, r6
 800044e:	4690      	mov	r8, r2
 8000450:	4646      	mov	r6, r8
 8000452:	1e72      	subs	r2, r6, #1
 8000454:	4196      	sbcs	r6, r2
 8000456:	4333      	orrs	r3, r6
 8000458:	e0da      	b.n	8000610 <__aeabi_dsub+0x3b4>
 800045a:	2b00      	cmp	r3, #0
 800045c:	d100      	bne.n	8000460 <__aeabi_dsub+0x204>
 800045e:	e214      	b.n	800088a <__aeabi_dsub+0x62e>
 8000460:	4663      	mov	r3, ip
 8000462:	4313      	orrs	r3, r2
 8000464:	d100      	bne.n	8000468 <__aeabi_dsub+0x20c>
 8000466:	e168      	b.n	800073a <__aeabi_dsub+0x4de>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	074e      	lsls	r6, r1, #29
 800046c:	08c0      	lsrs	r0, r0, #3
 800046e:	08c9      	lsrs	r1, r1, #3
 8000470:	031b      	lsls	r3, r3, #12
 8000472:	4306      	orrs	r6, r0
 8000474:	4219      	tst	r1, r3
 8000476:	d008      	beq.n	800048a <__aeabi_dsub+0x22e>
 8000478:	4660      	mov	r0, ip
 800047a:	08c0      	lsrs	r0, r0, #3
 800047c:	4218      	tst	r0, r3
 800047e:	d104      	bne.n	800048a <__aeabi_dsub+0x22e>
 8000480:	4663      	mov	r3, ip
 8000482:	0001      	movs	r1, r0
 8000484:	08d2      	lsrs	r2, r2, #3
 8000486:	075e      	lsls	r6, r3, #29
 8000488:	4316      	orrs	r6, r2
 800048a:	00f3      	lsls	r3, r6, #3
 800048c:	4699      	mov	r9, r3
 800048e:	00c9      	lsls	r1, r1, #3
 8000490:	0f72      	lsrs	r2, r6, #29
 8000492:	4d44      	ldr	r5, [pc, #272]	; (80005a4 <__aeabi_dsub+0x348>)
 8000494:	4311      	orrs	r1, r2
 8000496:	464b      	mov	r3, r9
 8000498:	08de      	lsrs	r6, r3, #3
 800049a:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <__aeabi_dsub+0x348>)
 800049c:	074f      	lsls	r7, r1, #29
 800049e:	4337      	orrs	r7, r6
 80004a0:	08ca      	lsrs	r2, r1, #3
 80004a2:	429d      	cmp	r5, r3
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dsub+0x24c>
 80004a6:	e06e      	b.n	8000586 <__aeabi_dsub+0x32a>
 80004a8:	0312      	lsls	r2, r2, #12
 80004aa:	056d      	lsls	r5, r5, #21
 80004ac:	0b12      	lsrs	r2, r2, #12
 80004ae:	0d6d      	lsrs	r5, r5, #21
 80004b0:	2100      	movs	r1, #0
 80004b2:	0312      	lsls	r2, r2, #12
 80004b4:	0b13      	lsrs	r3, r2, #12
 80004b6:	0d0a      	lsrs	r2, r1, #20
 80004b8:	0512      	lsls	r2, r2, #20
 80004ba:	431a      	orrs	r2, r3
 80004bc:	4b3b      	ldr	r3, [pc, #236]	; (80005ac <__aeabi_dsub+0x350>)
 80004be:	052d      	lsls	r5, r5, #20
 80004c0:	4013      	ands	r3, r2
 80004c2:	432b      	orrs	r3, r5
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	07e4      	lsls	r4, r4, #31
 80004c8:	085b      	lsrs	r3, r3, #1
 80004ca:	4323      	orrs	r3, r4
 80004cc:	0038      	movs	r0, r7
 80004ce:	0019      	movs	r1, r3
 80004d0:	bc3c      	pop	{r2, r3, r4, r5}
 80004d2:	4690      	mov	r8, r2
 80004d4:	4699      	mov	r9, r3
 80004d6:	46a2      	mov	sl, r4
 80004d8:	46ab      	mov	fp, r5
 80004da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004dc:	4663      	mov	r3, ip
 80004de:	4313      	orrs	r3, r2
 80004e0:	d011      	beq.n	8000506 <__aeabi_dsub+0x2aa>
 80004e2:	1e73      	subs	r3, r6, #1
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d000      	beq.n	80004ea <__aeabi_dsub+0x28e>
 80004e8:	e107      	b.n	80006fa <__aeabi_dsub+0x49e>
 80004ea:	1886      	adds	r6, r0, r2
 80004ec:	4286      	cmp	r6, r0
 80004ee:	4180      	sbcs	r0, r0
 80004f0:	4461      	add	r1, ip
 80004f2:	4240      	negs	r0, r0
 80004f4:	1809      	adds	r1, r1, r0
 80004f6:	2501      	movs	r5, #1
 80004f8:	020b      	lsls	r3, r1, #8
 80004fa:	d537      	bpl.n	800056c <__aeabi_dsub+0x310>
 80004fc:	2502      	movs	r5, #2
 80004fe:	e77b      	b.n	80003f8 <__aeabi_dsub+0x19c>
 8000500:	003e      	movs	r6, r7
 8000502:	4661      	mov	r1, ip
 8000504:	4691      	mov	r9, r2
 8000506:	0035      	movs	r5, r6
 8000508:	e7c5      	b.n	8000496 <__aeabi_dsub+0x23a>
 800050a:	465c      	mov	r4, fp
 800050c:	2d00      	cmp	r5, #0
 800050e:	d000      	beq.n	8000512 <__aeabi_dsub+0x2b6>
 8000510:	e0e1      	b.n	80006d6 <__aeabi_dsub+0x47a>
 8000512:	000b      	movs	r3, r1
 8000514:	4303      	orrs	r3, r0
 8000516:	d0f3      	beq.n	8000500 <__aeabi_dsub+0x2a4>
 8000518:	1c73      	adds	r3, r6, #1
 800051a:	d100      	bne.n	800051e <__aeabi_dsub+0x2c2>
 800051c:	e1ac      	b.n	8000878 <__aeabi_dsub+0x61c>
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <__aeabi_dsub+0x348>)
 8000520:	429f      	cmp	r7, r3
 8000522:	d100      	bne.n	8000526 <__aeabi_dsub+0x2ca>
 8000524:	e13a      	b.n	800079c <__aeabi_dsub+0x540>
 8000526:	43f3      	mvns	r3, r6
 8000528:	2b38      	cmp	r3, #56	; 0x38
 800052a:	dd00      	ble.n	800052e <__aeabi_dsub+0x2d2>
 800052c:	e16f      	b.n	800080e <__aeabi_dsub+0x5b2>
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dsub+0x2d8>
 8000532:	e18c      	b.n	800084e <__aeabi_dsub+0x5f2>
 8000534:	2520      	movs	r5, #32
 8000536:	000e      	movs	r6, r1
 8000538:	1aed      	subs	r5, r5, r3
 800053a:	40ae      	lsls	r6, r5
 800053c:	46b0      	mov	r8, r6
 800053e:	0006      	movs	r6, r0
 8000540:	46aa      	mov	sl, r5
 8000542:	40de      	lsrs	r6, r3
 8000544:	4645      	mov	r5, r8
 8000546:	4335      	orrs	r5, r6
 8000548:	002e      	movs	r6, r5
 800054a:	4655      	mov	r5, sl
 800054c:	40d9      	lsrs	r1, r3
 800054e:	40a8      	lsls	r0, r5
 8000550:	4663      	mov	r3, ip
 8000552:	1e45      	subs	r5, r0, #1
 8000554:	41a8      	sbcs	r0, r5
 8000556:	1a5b      	subs	r3, r3, r1
 8000558:	469c      	mov	ip, r3
 800055a:	4330      	orrs	r0, r6
 800055c:	1a16      	subs	r6, r2, r0
 800055e:	42b2      	cmp	r2, r6
 8000560:	4192      	sbcs	r2, r2
 8000562:	4663      	mov	r3, ip
 8000564:	4252      	negs	r2, r2
 8000566:	1a99      	subs	r1, r3, r2
 8000568:	003d      	movs	r5, r7
 800056a:	e6b4      	b.n	80002d6 <__aeabi_dsub+0x7a>
 800056c:	2207      	movs	r2, #7
 800056e:	4032      	ands	r2, r6
 8000570:	2a00      	cmp	r2, #0
 8000572:	d000      	beq.n	8000576 <__aeabi_dsub+0x31a>
 8000574:	e6e4      	b.n	8000340 <__aeabi_dsub+0xe4>
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <__aeabi_dsub+0x348>)
 8000578:	08f6      	lsrs	r6, r6, #3
 800057a:	074f      	lsls	r7, r1, #29
 800057c:	4337      	orrs	r7, r6
 800057e:	08ca      	lsrs	r2, r1, #3
 8000580:	429d      	cmp	r5, r3
 8000582:	d000      	beq.n	8000586 <__aeabi_dsub+0x32a>
 8000584:	e790      	b.n	80004a8 <__aeabi_dsub+0x24c>
 8000586:	003b      	movs	r3, r7
 8000588:	4313      	orrs	r3, r2
 800058a:	d100      	bne.n	800058e <__aeabi_dsub+0x332>
 800058c:	e1a6      	b.n	80008dc <__aeabi_dsub+0x680>
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	031b      	lsls	r3, r3, #12
 8000592:	431a      	orrs	r2, r3
 8000594:	0312      	lsls	r2, r2, #12
 8000596:	0b12      	lsrs	r2, r2, #12
 8000598:	4d02      	ldr	r5, [pc, #8]	; (80005a4 <__aeabi_dsub+0x348>)
 800059a:	e789      	b.n	80004b0 <__aeabi_dsub+0x254>
 800059c:	0015      	movs	r5, r2
 800059e:	2200      	movs	r2, #0
 80005a0:	2700      	movs	r7, #0
 80005a2:	e785      	b.n	80004b0 <__aeabi_dsub+0x254>
 80005a4:	000007ff 	.word	0x000007ff
 80005a8:	ff7fffff 	.word	0xff7fffff
 80005ac:	800fffff 	.word	0x800fffff
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d000      	beq.n	80005b6 <__aeabi_dsub+0x35a>
 80005b4:	e0c7      	b.n	8000746 <__aeabi_dsub+0x4ea>
 80005b6:	1c6b      	adds	r3, r5, #1
 80005b8:	055e      	lsls	r6, r3, #21
 80005ba:	0d76      	lsrs	r6, r6, #21
 80005bc:	2e01      	cmp	r6, #1
 80005be:	dc00      	bgt.n	80005c2 <__aeabi_dsub+0x366>
 80005c0:	e0f0      	b.n	80007a4 <__aeabi_dsub+0x548>
 80005c2:	4dc8      	ldr	r5, [pc, #800]	; (80008e4 <__aeabi_dsub+0x688>)
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d100      	bne.n	80005ca <__aeabi_dsub+0x36e>
 80005c8:	e0b9      	b.n	800073e <__aeabi_dsub+0x4e2>
 80005ca:	1885      	adds	r5, r0, r2
 80005cc:	000a      	movs	r2, r1
 80005ce:	4285      	cmp	r5, r0
 80005d0:	4189      	sbcs	r1, r1
 80005d2:	4462      	add	r2, ip
 80005d4:	4249      	negs	r1, r1
 80005d6:	1851      	adds	r1, r2, r1
 80005d8:	2207      	movs	r2, #7
 80005da:	07ce      	lsls	r6, r1, #31
 80005dc:	086d      	lsrs	r5, r5, #1
 80005de:	432e      	orrs	r6, r5
 80005e0:	0849      	lsrs	r1, r1, #1
 80005e2:	4032      	ands	r2, r6
 80005e4:	001d      	movs	r5, r3
 80005e6:	e6a9      	b.n	800033c <__aeabi_dsub+0xe0>
 80005e8:	49bf      	ldr	r1, [pc, #764]	; (80008e8 <__aeabi_dsub+0x68c>)
 80005ea:	1aed      	subs	r5, r5, r3
 80005ec:	4011      	ands	r1, r2
 80005ee:	2207      	movs	r2, #7
 80005f0:	4032      	ands	r2, r6
 80005f2:	e6a3      	b.n	800033c <__aeabi_dsub+0xe0>
 80005f4:	0032      	movs	r2, r6
 80005f6:	3828      	subs	r0, #40	; 0x28
 80005f8:	4082      	lsls	r2, r0
 80005fa:	2600      	movs	r6, #0
 80005fc:	e686      	b.n	800030c <__aeabi_dsub+0xb0>
 80005fe:	0030      	movs	r0, r6
 8000600:	f000 fa1a 	bl	8000a38 <__clzsi2>
 8000604:	3020      	adds	r0, #32
 8000606:	e673      	b.n	80002f0 <__aeabi_dsub+0x94>
 8000608:	4663      	mov	r3, ip
 800060a:	4313      	orrs	r3, r2
 800060c:	1e5a      	subs	r2, r3, #1
 800060e:	4193      	sbcs	r3, r2
 8000610:	1ac6      	subs	r6, r0, r3
 8000612:	42b0      	cmp	r0, r6
 8000614:	4180      	sbcs	r0, r0
 8000616:	4240      	negs	r0, r0
 8000618:	1a09      	subs	r1, r1, r0
 800061a:	e65c      	b.n	80002d6 <__aeabi_dsub+0x7a>
 800061c:	000e      	movs	r6, r1
 800061e:	4667      	mov	r7, ip
 8000620:	4306      	orrs	r6, r0
 8000622:	4317      	orrs	r7, r2
 8000624:	2d00      	cmp	r5, #0
 8000626:	d15e      	bne.n	80006e6 <__aeabi_dsub+0x48a>
 8000628:	2e00      	cmp	r6, #0
 800062a:	d000      	beq.n	800062e <__aeabi_dsub+0x3d2>
 800062c:	e0f3      	b.n	8000816 <__aeabi_dsub+0x5ba>
 800062e:	2f00      	cmp	r7, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_dsub+0x3d8>
 8000632:	e11e      	b.n	8000872 <__aeabi_dsub+0x616>
 8000634:	465c      	mov	r4, fp
 8000636:	4661      	mov	r1, ip
 8000638:	4691      	mov	r9, r2
 800063a:	e72c      	b.n	8000496 <__aeabi_dsub+0x23a>
 800063c:	4fa9      	ldr	r7, [pc, #676]	; (80008e4 <__aeabi_dsub+0x688>)
 800063e:	42be      	cmp	r6, r7
 8000640:	d07b      	beq.n	800073a <__aeabi_dsub+0x4de>
 8000642:	001e      	movs	r6, r3
 8000644:	e6f1      	b.n	800042a <__aeabi_dsub+0x1ce>
 8000646:	0010      	movs	r0, r2
 8000648:	3d1f      	subs	r5, #31
 800064a:	40e8      	lsrs	r0, r5
 800064c:	2b20      	cmp	r3, #32
 800064e:	d003      	beq.n	8000658 <__aeabi_dsub+0x3fc>
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	1acb      	subs	r3, r1, r3
 8000654:	409a      	lsls	r2, r3
 8000656:	4316      	orrs	r6, r2
 8000658:	1e73      	subs	r3, r6, #1
 800065a:	419e      	sbcs	r6, r3
 800065c:	2207      	movs	r2, #7
 800065e:	4306      	orrs	r6, r0
 8000660:	4032      	ands	r2, r6
 8000662:	2100      	movs	r1, #0
 8000664:	2500      	movs	r5, #0
 8000666:	e783      	b.n	8000570 <__aeabi_dsub+0x314>
 8000668:	1a16      	subs	r6, r2, r0
 800066a:	4663      	mov	r3, ip
 800066c:	42b2      	cmp	r2, r6
 800066e:	4180      	sbcs	r0, r0
 8000670:	1a59      	subs	r1, r3, r1
 8000672:	4240      	negs	r0, r0
 8000674:	1a0b      	subs	r3, r1, r0
 8000676:	4698      	mov	r8, r3
 8000678:	465c      	mov	r4, fp
 800067a:	e632      	b.n	80002e2 <__aeabi_dsub+0x86>
 800067c:	2e1f      	cmp	r6, #31
 800067e:	dd00      	ble.n	8000682 <__aeabi_dsub+0x426>
 8000680:	e0ab      	b.n	80007da <__aeabi_dsub+0x57e>
 8000682:	2720      	movs	r7, #32
 8000684:	1bbb      	subs	r3, r7, r6
 8000686:	469a      	mov	sl, r3
 8000688:	4663      	mov	r3, ip
 800068a:	4657      	mov	r7, sl
 800068c:	40bb      	lsls	r3, r7
 800068e:	4699      	mov	r9, r3
 8000690:	0013      	movs	r3, r2
 8000692:	464f      	mov	r7, r9
 8000694:	40f3      	lsrs	r3, r6
 8000696:	431f      	orrs	r7, r3
 8000698:	003b      	movs	r3, r7
 800069a:	4657      	mov	r7, sl
 800069c:	40ba      	lsls	r2, r7
 800069e:	1e57      	subs	r7, r2, #1
 80006a0:	41ba      	sbcs	r2, r7
 80006a2:	4313      	orrs	r3, r2
 80006a4:	4662      	mov	r2, ip
 80006a6:	40f2      	lsrs	r2, r6
 80006a8:	1889      	adds	r1, r1, r2
 80006aa:	e698      	b.n	80003de <__aeabi_dsub+0x182>
 80006ac:	2720      	movs	r7, #32
 80006ae:	1bbb      	subs	r3, r7, r6
 80006b0:	469a      	mov	sl, r3
 80006b2:	4663      	mov	r3, ip
 80006b4:	4657      	mov	r7, sl
 80006b6:	40bb      	lsls	r3, r7
 80006b8:	4699      	mov	r9, r3
 80006ba:	0013      	movs	r3, r2
 80006bc:	464f      	mov	r7, r9
 80006be:	40f3      	lsrs	r3, r6
 80006c0:	431f      	orrs	r7, r3
 80006c2:	003b      	movs	r3, r7
 80006c4:	4657      	mov	r7, sl
 80006c6:	40ba      	lsls	r2, r7
 80006c8:	1e57      	subs	r7, r2, #1
 80006ca:	41ba      	sbcs	r2, r7
 80006cc:	4313      	orrs	r3, r2
 80006ce:	4662      	mov	r2, ip
 80006d0:	40f2      	lsrs	r2, r6
 80006d2:	1a89      	subs	r1, r1, r2
 80006d4:	e79c      	b.n	8000610 <__aeabi_dsub+0x3b4>
 80006d6:	4b83      	ldr	r3, [pc, #524]	; (80008e4 <__aeabi_dsub+0x688>)
 80006d8:	429f      	cmp	r7, r3
 80006da:	d05f      	beq.n	800079c <__aeabi_dsub+0x540>
 80006dc:	2580      	movs	r5, #128	; 0x80
 80006de:	042d      	lsls	r5, r5, #16
 80006e0:	4273      	negs	r3, r6
 80006e2:	4329      	orrs	r1, r5
 80006e4:	e720      	b.n	8000528 <__aeabi_dsub+0x2cc>
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d10c      	bne.n	8000704 <__aeabi_dsub+0x4a8>
 80006ea:	2f00      	cmp	r7, #0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_dsub+0x494>
 80006ee:	e0d0      	b.n	8000892 <__aeabi_dsub+0x636>
 80006f0:	465c      	mov	r4, fp
 80006f2:	4661      	mov	r1, ip
 80006f4:	4691      	mov	r9, r2
 80006f6:	4d7b      	ldr	r5, [pc, #492]	; (80008e4 <__aeabi_dsub+0x688>)
 80006f8:	e6cd      	b.n	8000496 <__aeabi_dsub+0x23a>
 80006fa:	4f7a      	ldr	r7, [pc, #488]	; (80008e4 <__aeabi_dsub+0x688>)
 80006fc:	42be      	cmp	r6, r7
 80006fe:	d01c      	beq.n	800073a <__aeabi_dsub+0x4de>
 8000700:	001e      	movs	r6, r3
 8000702:	e665      	b.n	80003d0 <__aeabi_dsub+0x174>
 8000704:	2f00      	cmp	r7, #0
 8000706:	d018      	beq.n	800073a <__aeabi_dsub+0x4de>
 8000708:	08c0      	lsrs	r0, r0, #3
 800070a:	074e      	lsls	r6, r1, #29
 800070c:	4306      	orrs	r6, r0
 800070e:	2080      	movs	r0, #128	; 0x80
 8000710:	08c9      	lsrs	r1, r1, #3
 8000712:	0300      	lsls	r0, r0, #12
 8000714:	4201      	tst	r1, r0
 8000716:	d008      	beq.n	800072a <__aeabi_dsub+0x4ce>
 8000718:	4663      	mov	r3, ip
 800071a:	08dc      	lsrs	r4, r3, #3
 800071c:	4204      	tst	r4, r0
 800071e:	d104      	bne.n	800072a <__aeabi_dsub+0x4ce>
 8000720:	0021      	movs	r1, r4
 8000722:	46da      	mov	sl, fp
 8000724:	08d2      	lsrs	r2, r2, #3
 8000726:	075e      	lsls	r6, r3, #29
 8000728:	4316      	orrs	r6, r2
 800072a:	00f3      	lsls	r3, r6, #3
 800072c:	4699      	mov	r9, r3
 800072e:	2401      	movs	r4, #1
 8000730:	4653      	mov	r3, sl
 8000732:	00c9      	lsls	r1, r1, #3
 8000734:	0f72      	lsrs	r2, r6, #29
 8000736:	4311      	orrs	r1, r2
 8000738:	401c      	ands	r4, r3
 800073a:	4d6a      	ldr	r5, [pc, #424]	; (80008e4 <__aeabi_dsub+0x688>)
 800073c:	e6ab      	b.n	8000496 <__aeabi_dsub+0x23a>
 800073e:	001d      	movs	r5, r3
 8000740:	2200      	movs	r2, #0
 8000742:	2700      	movs	r7, #0
 8000744:	e6b4      	b.n	80004b0 <__aeabi_dsub+0x254>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d159      	bne.n	80007fe <__aeabi_dsub+0x5a2>
 800074a:	000b      	movs	r3, r1
 800074c:	4303      	orrs	r3, r0
 800074e:	d100      	bne.n	8000752 <__aeabi_dsub+0x4f6>
 8000750:	e6d6      	b.n	8000500 <__aeabi_dsub+0x2a4>
 8000752:	1c73      	adds	r3, r6, #1
 8000754:	d100      	bne.n	8000758 <__aeabi_dsub+0x4fc>
 8000756:	e0b2      	b.n	80008be <__aeabi_dsub+0x662>
 8000758:	4b62      	ldr	r3, [pc, #392]	; (80008e4 <__aeabi_dsub+0x688>)
 800075a:	429f      	cmp	r7, r3
 800075c:	d01e      	beq.n	800079c <__aeabi_dsub+0x540>
 800075e:	43f3      	mvns	r3, r6
 8000760:	2b38      	cmp	r3, #56	; 0x38
 8000762:	dc6f      	bgt.n	8000844 <__aeabi_dsub+0x5e8>
 8000764:	2b1f      	cmp	r3, #31
 8000766:	dd00      	ble.n	800076a <__aeabi_dsub+0x50e>
 8000768:	e097      	b.n	800089a <__aeabi_dsub+0x63e>
 800076a:	2520      	movs	r5, #32
 800076c:	000e      	movs	r6, r1
 800076e:	1aed      	subs	r5, r5, r3
 8000770:	40ae      	lsls	r6, r5
 8000772:	46b0      	mov	r8, r6
 8000774:	0006      	movs	r6, r0
 8000776:	46aa      	mov	sl, r5
 8000778:	40de      	lsrs	r6, r3
 800077a:	4645      	mov	r5, r8
 800077c:	4335      	orrs	r5, r6
 800077e:	002e      	movs	r6, r5
 8000780:	4655      	mov	r5, sl
 8000782:	40a8      	lsls	r0, r5
 8000784:	40d9      	lsrs	r1, r3
 8000786:	1e45      	subs	r5, r0, #1
 8000788:	41a8      	sbcs	r0, r5
 800078a:	448c      	add	ip, r1
 800078c:	4306      	orrs	r6, r0
 800078e:	18b6      	adds	r6, r6, r2
 8000790:	4296      	cmp	r6, r2
 8000792:	4192      	sbcs	r2, r2
 8000794:	4251      	negs	r1, r2
 8000796:	4461      	add	r1, ip
 8000798:	003d      	movs	r5, r7
 800079a:	e625      	b.n	80003e8 <__aeabi_dsub+0x18c>
 800079c:	003d      	movs	r5, r7
 800079e:	4661      	mov	r1, ip
 80007a0:	4691      	mov	r9, r2
 80007a2:	e678      	b.n	8000496 <__aeabi_dsub+0x23a>
 80007a4:	000b      	movs	r3, r1
 80007a6:	4303      	orrs	r3, r0
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	d000      	beq.n	80007ae <__aeabi_dsub+0x552>
 80007ac:	e655      	b.n	800045a <__aeabi_dsub+0x1fe>
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0f5      	beq.n	800079e <__aeabi_dsub+0x542>
 80007b2:	4663      	mov	r3, ip
 80007b4:	4313      	orrs	r3, r2
 80007b6:	d100      	bne.n	80007ba <__aeabi_dsub+0x55e>
 80007b8:	e66d      	b.n	8000496 <__aeabi_dsub+0x23a>
 80007ba:	1886      	adds	r6, r0, r2
 80007bc:	4286      	cmp	r6, r0
 80007be:	4180      	sbcs	r0, r0
 80007c0:	4461      	add	r1, ip
 80007c2:	4240      	negs	r0, r0
 80007c4:	1809      	adds	r1, r1, r0
 80007c6:	2200      	movs	r2, #0
 80007c8:	020b      	lsls	r3, r1, #8
 80007ca:	d400      	bmi.n	80007ce <__aeabi_dsub+0x572>
 80007cc:	e6d0      	b.n	8000570 <__aeabi_dsub+0x314>
 80007ce:	4b46      	ldr	r3, [pc, #280]	; (80008e8 <__aeabi_dsub+0x68c>)
 80007d0:	3501      	adds	r5, #1
 80007d2:	4019      	ands	r1, r3
 80007d4:	e5b2      	b.n	800033c <__aeabi_dsub+0xe0>
 80007d6:	46b1      	mov	r9, r6
 80007d8:	e65d      	b.n	8000496 <__aeabi_dsub+0x23a>
 80007da:	0033      	movs	r3, r6
 80007dc:	4667      	mov	r7, ip
 80007de:	3b20      	subs	r3, #32
 80007e0:	40df      	lsrs	r7, r3
 80007e2:	003b      	movs	r3, r7
 80007e4:	2e20      	cmp	r6, #32
 80007e6:	d005      	beq.n	80007f4 <__aeabi_dsub+0x598>
 80007e8:	2740      	movs	r7, #64	; 0x40
 80007ea:	1bbf      	subs	r7, r7, r6
 80007ec:	4666      	mov	r6, ip
 80007ee:	40be      	lsls	r6, r7
 80007f0:	4332      	orrs	r2, r6
 80007f2:	4690      	mov	r8, r2
 80007f4:	4646      	mov	r6, r8
 80007f6:	1e72      	subs	r2, r6, #1
 80007f8:	4196      	sbcs	r6, r2
 80007fa:	4333      	orrs	r3, r6
 80007fc:	e5ef      	b.n	80003de <__aeabi_dsub+0x182>
 80007fe:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <__aeabi_dsub+0x688>)
 8000800:	429f      	cmp	r7, r3
 8000802:	d0cb      	beq.n	800079c <__aeabi_dsub+0x540>
 8000804:	2580      	movs	r5, #128	; 0x80
 8000806:	042d      	lsls	r5, r5, #16
 8000808:	4273      	negs	r3, r6
 800080a:	4329      	orrs	r1, r5
 800080c:	e7a8      	b.n	8000760 <__aeabi_dsub+0x504>
 800080e:	4308      	orrs	r0, r1
 8000810:	1e41      	subs	r1, r0, #1
 8000812:	4188      	sbcs	r0, r1
 8000814:	e6a2      	b.n	800055c <__aeabi_dsub+0x300>
 8000816:	2f00      	cmp	r7, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dsub+0x5c0>
 800081a:	e63c      	b.n	8000496 <__aeabi_dsub+0x23a>
 800081c:	4663      	mov	r3, ip
 800081e:	1a86      	subs	r6, r0, r2
 8000820:	1acf      	subs	r7, r1, r3
 8000822:	42b0      	cmp	r0, r6
 8000824:	419b      	sbcs	r3, r3
 8000826:	425b      	negs	r3, r3
 8000828:	1afb      	subs	r3, r7, r3
 800082a:	4698      	mov	r8, r3
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	d54e      	bpl.n	80008ce <__aeabi_dsub+0x672>
 8000830:	1a16      	subs	r6, r2, r0
 8000832:	4663      	mov	r3, ip
 8000834:	42b2      	cmp	r2, r6
 8000836:	4192      	sbcs	r2, r2
 8000838:	1a59      	subs	r1, r3, r1
 800083a:	4252      	negs	r2, r2
 800083c:	1a89      	subs	r1, r1, r2
 800083e:	465c      	mov	r4, fp
 8000840:	2200      	movs	r2, #0
 8000842:	e57b      	b.n	800033c <__aeabi_dsub+0xe0>
 8000844:	4301      	orrs	r1, r0
 8000846:	000e      	movs	r6, r1
 8000848:	1e71      	subs	r1, r6, #1
 800084a:	418e      	sbcs	r6, r1
 800084c:	e79f      	b.n	800078e <__aeabi_dsub+0x532>
 800084e:	001d      	movs	r5, r3
 8000850:	000e      	movs	r6, r1
 8000852:	3d20      	subs	r5, #32
 8000854:	40ee      	lsrs	r6, r5
 8000856:	46b0      	mov	r8, r6
 8000858:	2b20      	cmp	r3, #32
 800085a:	d004      	beq.n	8000866 <__aeabi_dsub+0x60a>
 800085c:	2540      	movs	r5, #64	; 0x40
 800085e:	1aeb      	subs	r3, r5, r3
 8000860:	4099      	lsls	r1, r3
 8000862:	4308      	orrs	r0, r1
 8000864:	4681      	mov	r9, r0
 8000866:	4648      	mov	r0, r9
 8000868:	4643      	mov	r3, r8
 800086a:	1e41      	subs	r1, r0, #1
 800086c:	4188      	sbcs	r0, r1
 800086e:	4318      	orrs	r0, r3
 8000870:	e674      	b.n	800055c <__aeabi_dsub+0x300>
 8000872:	2200      	movs	r2, #0
 8000874:	2400      	movs	r4, #0
 8000876:	e617      	b.n	80004a8 <__aeabi_dsub+0x24c>
 8000878:	1a16      	subs	r6, r2, r0
 800087a:	4663      	mov	r3, ip
 800087c:	42b2      	cmp	r2, r6
 800087e:	4192      	sbcs	r2, r2
 8000880:	1a59      	subs	r1, r3, r1
 8000882:	4252      	negs	r2, r2
 8000884:	1a89      	subs	r1, r1, r2
 8000886:	003d      	movs	r5, r7
 8000888:	e525      	b.n	80002d6 <__aeabi_dsub+0x7a>
 800088a:	4661      	mov	r1, ip
 800088c:	4691      	mov	r9, r2
 800088e:	4d15      	ldr	r5, [pc, #84]	; (80008e4 <__aeabi_dsub+0x688>)
 8000890:	e601      	b.n	8000496 <__aeabi_dsub+0x23a>
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	0312      	lsls	r2, r2, #12
 8000898:	e679      	b.n	800058e <__aeabi_dsub+0x332>
 800089a:	001d      	movs	r5, r3
 800089c:	000e      	movs	r6, r1
 800089e:	3d20      	subs	r5, #32
 80008a0:	40ee      	lsrs	r6, r5
 80008a2:	46b0      	mov	r8, r6
 80008a4:	2b20      	cmp	r3, #32
 80008a6:	d004      	beq.n	80008b2 <__aeabi_dsub+0x656>
 80008a8:	2540      	movs	r5, #64	; 0x40
 80008aa:	1aeb      	subs	r3, r5, r3
 80008ac:	4099      	lsls	r1, r3
 80008ae:	4308      	orrs	r0, r1
 80008b0:	4681      	mov	r9, r0
 80008b2:	464e      	mov	r6, r9
 80008b4:	4643      	mov	r3, r8
 80008b6:	1e71      	subs	r1, r6, #1
 80008b8:	418e      	sbcs	r6, r1
 80008ba:	431e      	orrs	r6, r3
 80008bc:	e767      	b.n	800078e <__aeabi_dsub+0x532>
 80008be:	1886      	adds	r6, r0, r2
 80008c0:	4296      	cmp	r6, r2
 80008c2:	419b      	sbcs	r3, r3
 80008c4:	4461      	add	r1, ip
 80008c6:	425b      	negs	r3, r3
 80008c8:	18c9      	adds	r1, r1, r3
 80008ca:	003d      	movs	r5, r7
 80008cc:	e58c      	b.n	80003e8 <__aeabi_dsub+0x18c>
 80008ce:	4647      	mov	r7, r8
 80008d0:	4337      	orrs	r7, r6
 80008d2:	d0ce      	beq.n	8000872 <__aeabi_dsub+0x616>
 80008d4:	2207      	movs	r2, #7
 80008d6:	4641      	mov	r1, r8
 80008d8:	4032      	ands	r2, r6
 80008da:	e649      	b.n	8000570 <__aeabi_dsub+0x314>
 80008dc:	2700      	movs	r7, #0
 80008de:	003a      	movs	r2, r7
 80008e0:	e5e6      	b.n	80004b0 <__aeabi_dsub+0x254>
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	000007ff 	.word	0x000007ff
 80008e8:	ff7fffff 	.word	0xff7fffff

080008ec <__aeabi_d2iz>:
 80008ec:	b530      	push	{r4, r5, lr}
 80008ee:	4d14      	ldr	r5, [pc, #80]	; (8000940 <__aeabi_d2iz+0x54>)
 80008f0:	030a      	lsls	r2, r1, #12
 80008f2:	004b      	lsls	r3, r1, #1
 80008f4:	0b12      	lsrs	r2, r2, #12
 80008f6:	0d5b      	lsrs	r3, r3, #21
 80008f8:	0fc9      	lsrs	r1, r1, #31
 80008fa:	2400      	movs	r4, #0
 80008fc:	42ab      	cmp	r3, r5
 80008fe:	dd11      	ble.n	8000924 <__aeabi_d2iz+0x38>
 8000900:	4c10      	ldr	r4, [pc, #64]	; (8000944 <__aeabi_d2iz+0x58>)
 8000902:	42a3      	cmp	r3, r4
 8000904:	dc10      	bgt.n	8000928 <__aeabi_d2iz+0x3c>
 8000906:	2480      	movs	r4, #128	; 0x80
 8000908:	0364      	lsls	r4, r4, #13
 800090a:	4322      	orrs	r2, r4
 800090c:	4c0e      	ldr	r4, [pc, #56]	; (8000948 <__aeabi_d2iz+0x5c>)
 800090e:	1ae4      	subs	r4, r4, r3
 8000910:	2c1f      	cmp	r4, #31
 8000912:	dd0c      	ble.n	800092e <__aeabi_d2iz+0x42>
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <__aeabi_d2iz+0x60>)
 8000916:	1ac3      	subs	r3, r0, r3
 8000918:	40da      	lsrs	r2, r3
 800091a:	0013      	movs	r3, r2
 800091c:	425c      	negs	r4, r3
 800091e:	2900      	cmp	r1, #0
 8000920:	d100      	bne.n	8000924 <__aeabi_d2iz+0x38>
 8000922:	001c      	movs	r4, r3
 8000924:	0020      	movs	r0, r4
 8000926:	bd30      	pop	{r4, r5, pc}
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <__aeabi_d2iz+0x64>)
 800092a:	18cc      	adds	r4, r1, r3
 800092c:	e7fa      	b.n	8000924 <__aeabi_d2iz+0x38>
 800092e:	4d09      	ldr	r5, [pc, #36]	; (8000954 <__aeabi_d2iz+0x68>)
 8000930:	40e0      	lsrs	r0, r4
 8000932:	46ac      	mov	ip, r5
 8000934:	4463      	add	r3, ip
 8000936:	409a      	lsls	r2, r3
 8000938:	0013      	movs	r3, r2
 800093a:	4303      	orrs	r3, r0
 800093c:	e7ee      	b.n	800091c <__aeabi_d2iz+0x30>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	000003fe 	.word	0x000003fe
 8000944:	0000041d 	.word	0x0000041d
 8000948:	00000433 	.word	0x00000433
 800094c:	00000413 	.word	0x00000413
 8000950:	7fffffff 	.word	0x7fffffff
 8000954:	fffffbed 	.word	0xfffffbed

08000958 <__aeabi_ui2d>:
 8000958:	b510      	push	{r4, lr}
 800095a:	1e04      	subs	r4, r0, #0
 800095c:	d025      	beq.n	80009aa <__aeabi_ui2d+0x52>
 800095e:	f000 f86b 	bl	8000a38 <__clzsi2>
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <__aeabi_ui2d+0x5c>)
 8000964:	1a1b      	subs	r3, r3, r0
 8000966:	055b      	lsls	r3, r3, #21
 8000968:	0d5b      	lsrs	r3, r3, #21
 800096a:	280a      	cmp	r0, #10
 800096c:	dd12      	ble.n	8000994 <__aeabi_ui2d+0x3c>
 800096e:	380b      	subs	r0, #11
 8000970:	4084      	lsls	r4, r0
 8000972:	2200      	movs	r2, #0
 8000974:	0324      	lsls	r4, r4, #12
 8000976:	0b24      	lsrs	r4, r4, #12
 8000978:	2100      	movs	r1, #0
 800097a:	0010      	movs	r0, r2
 800097c:	0324      	lsls	r4, r4, #12
 800097e:	0d0a      	lsrs	r2, r1, #20
 8000980:	0b24      	lsrs	r4, r4, #12
 8000982:	0512      	lsls	r2, r2, #20
 8000984:	4322      	orrs	r2, r4
 8000986:	4c0c      	ldr	r4, [pc, #48]	; (80009b8 <__aeabi_ui2d+0x60>)
 8000988:	051b      	lsls	r3, r3, #20
 800098a:	4022      	ands	r2, r4
 800098c:	4313      	orrs	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	0859      	lsrs	r1, r3, #1
 8000992:	bd10      	pop	{r4, pc}
 8000994:	0002      	movs	r2, r0
 8000996:	0021      	movs	r1, r4
 8000998:	3215      	adds	r2, #21
 800099a:	4091      	lsls	r1, r2
 800099c:	000a      	movs	r2, r1
 800099e:	210b      	movs	r1, #11
 80009a0:	1a08      	subs	r0, r1, r0
 80009a2:	40c4      	lsrs	r4, r0
 80009a4:	0324      	lsls	r4, r4, #12
 80009a6:	0b24      	lsrs	r4, r4, #12
 80009a8:	e7e6      	b.n	8000978 <__aeabi_ui2d+0x20>
 80009aa:	2300      	movs	r3, #0
 80009ac:	2400      	movs	r4, #0
 80009ae:	2200      	movs	r2, #0
 80009b0:	e7e2      	b.n	8000978 <__aeabi_ui2d+0x20>
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	0000041e 	.word	0x0000041e
 80009b8:	800fffff 	.word	0x800fffff

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	1c10      	adds	r0, r2, #0
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	1c19      	adds	r1, r3, #0
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	46c0      	nop			; (mov r8, r8)

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80009ce:	f000 f8f1 	bl	8000bb4 <__ledf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d401      	bmi.n	80009da <__aeabi_cdcmpeq+0xe>
 80009d6:	2100      	movs	r1, #0
 80009d8:	42c8      	cmn	r0, r1
 80009da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	b510      	push	{r4, lr}
 80009de:	f000 f849 	bl	8000a74 <__eqdf2>
 80009e2:	4240      	negs	r0, r0
 80009e4:	3001      	adds	r0, #1
 80009e6:	bd10      	pop	{r4, pc}

080009e8 <__aeabi_dcmplt>:
 80009e8:	b510      	push	{r4, lr}
 80009ea:	f000 f8e3 	bl	8000bb4 <__ledf2>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	db01      	blt.n	80009f6 <__aeabi_dcmplt+0xe>
 80009f2:	2000      	movs	r0, #0
 80009f4:	bd10      	pop	{r4, pc}
 80009f6:	2001      	movs	r0, #1
 80009f8:	bd10      	pop	{r4, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)

080009fc <__aeabi_dcmple>:
 80009fc:	b510      	push	{r4, lr}
 80009fe:	f000 f8d9 	bl	8000bb4 <__ledf2>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	dd01      	ble.n	8000a0a <__aeabi_dcmple+0xe>
 8000a06:	2000      	movs	r0, #0
 8000a08:	bd10      	pop	{r4, pc}
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	bd10      	pop	{r4, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)

08000a10 <__aeabi_dcmpgt>:
 8000a10:	b510      	push	{r4, lr}
 8000a12:	f000 f86b 	bl	8000aec <__gedf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	dc01      	bgt.n	8000a1e <__aeabi_dcmpgt+0xe>
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	bd10      	pop	{r4, pc}
 8000a1e:	2001      	movs	r0, #1
 8000a20:	bd10      	pop	{r4, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)

08000a24 <__aeabi_dcmpge>:
 8000a24:	b510      	push	{r4, lr}
 8000a26:	f000 f861 	bl	8000aec <__gedf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	da01      	bge.n	8000a32 <__aeabi_dcmpge+0xe>
 8000a2e:	2000      	movs	r0, #0
 8000a30:	bd10      	pop	{r4, pc}
 8000a32:	2001      	movs	r0, #1
 8000a34:	bd10      	pop	{r4, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)

08000a38 <__clzsi2>:
 8000a38:	211c      	movs	r1, #28
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	041b      	lsls	r3, r3, #16
 8000a3e:	4298      	cmp	r0, r3
 8000a40:	d301      	bcc.n	8000a46 <__clzsi2+0xe>
 8000a42:	0c00      	lsrs	r0, r0, #16
 8000a44:	3910      	subs	r1, #16
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	4298      	cmp	r0, r3
 8000a4a:	d301      	bcc.n	8000a50 <__clzsi2+0x18>
 8000a4c:	0a00      	lsrs	r0, r0, #8
 8000a4e:	3908      	subs	r1, #8
 8000a50:	091b      	lsrs	r3, r3, #4
 8000a52:	4298      	cmp	r0, r3
 8000a54:	d301      	bcc.n	8000a5a <__clzsi2+0x22>
 8000a56:	0900      	lsrs	r0, r0, #4
 8000a58:	3904      	subs	r1, #4
 8000a5a:	a202      	add	r2, pc, #8	; (adr r2, 8000a64 <__clzsi2+0x2c>)
 8000a5c:	5c10      	ldrb	r0, [r2, r0]
 8000a5e:	1840      	adds	r0, r0, r1
 8000a60:	4770      	bx	lr
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	02020304 	.word	0x02020304
 8000a68:	01010101 	.word	0x01010101
	...

08000a74 <__eqdf2>:
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	464f      	mov	r7, r9
 8000a78:	4646      	mov	r6, r8
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	b5c0      	push	{r6, r7, lr}
 8000a80:	4680      	mov	r8, r0
 8000a82:	4e19      	ldr	r6, [pc, #100]	; (8000ae8 <__eqdf2+0x74>)
 8000a84:	0318      	lsls	r0, r3, #12
 8000a86:	030f      	lsls	r7, r1, #12
 8000a88:	004d      	lsls	r5, r1, #1
 8000a8a:	0b00      	lsrs	r0, r0, #12
 8000a8c:	005c      	lsls	r4, r3, #1
 8000a8e:	4682      	mov	sl, r0
 8000a90:	0b3f      	lsrs	r7, r7, #12
 8000a92:	0d6d      	lsrs	r5, r5, #21
 8000a94:	0fc9      	lsrs	r1, r1, #31
 8000a96:	4691      	mov	r9, r2
 8000a98:	0d64      	lsrs	r4, r4, #21
 8000a9a:	0fdb      	lsrs	r3, r3, #31
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	42b5      	cmp	r5, r6
 8000aa0:	d00a      	beq.n	8000ab8 <__eqdf2+0x44>
 8000aa2:	42b4      	cmp	r4, r6
 8000aa4:	d003      	beq.n	8000aae <__eqdf2+0x3a>
 8000aa6:	42a5      	cmp	r5, r4
 8000aa8:	d101      	bne.n	8000aae <__eqdf2+0x3a>
 8000aaa:	4557      	cmp	r7, sl
 8000aac:	d00c      	beq.n	8000ac8 <__eqdf2+0x54>
 8000aae:	bc1c      	pop	{r2, r3, r4}
 8000ab0:	4690      	mov	r8, r2
 8000ab2:	4699      	mov	r9, r3
 8000ab4:	46a2      	mov	sl, r4
 8000ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab8:	4666      	mov	r6, ip
 8000aba:	433e      	orrs	r6, r7
 8000abc:	d1f7      	bne.n	8000aae <__eqdf2+0x3a>
 8000abe:	42ac      	cmp	r4, r5
 8000ac0:	d1f5      	bne.n	8000aae <__eqdf2+0x3a>
 8000ac2:	4654      	mov	r4, sl
 8000ac4:	4314      	orrs	r4, r2
 8000ac6:	d1f2      	bne.n	8000aae <__eqdf2+0x3a>
 8000ac8:	2001      	movs	r0, #1
 8000aca:	45c8      	cmp	r8, r9
 8000acc:	d1ef      	bne.n	8000aae <__eqdf2+0x3a>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d007      	beq.n	8000ae2 <__eqdf2+0x6e>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d1eb      	bne.n	8000aae <__eqdf2+0x3a>
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	0038      	movs	r0, r7
 8000adc:	1e47      	subs	r7, r0, #1
 8000ade:	41b8      	sbcs	r0, r7
 8000ae0:	e7e5      	b.n	8000aae <__eqdf2+0x3a>
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e7e3      	b.n	8000aae <__eqdf2+0x3a>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	000007ff 	.word	0x000007ff

08000aec <__gedf2>:
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	464f      	mov	r7, r9
 8000af0:	4646      	mov	r6, r8
 8000af2:	46d6      	mov	lr, sl
 8000af4:	004d      	lsls	r5, r1, #1
 8000af6:	b5c0      	push	{r6, r7, lr}
 8000af8:	030e      	lsls	r6, r1, #12
 8000afa:	0fc9      	lsrs	r1, r1, #31
 8000afc:	468a      	mov	sl, r1
 8000afe:	492c      	ldr	r1, [pc, #176]	; (8000bb0 <__gedf2+0xc4>)
 8000b00:	031f      	lsls	r7, r3, #12
 8000b02:	005c      	lsls	r4, r3, #1
 8000b04:	4680      	mov	r8, r0
 8000b06:	0b36      	lsrs	r6, r6, #12
 8000b08:	0d6d      	lsrs	r5, r5, #21
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	0b3f      	lsrs	r7, r7, #12
 8000b0e:	0d64      	lsrs	r4, r4, #21
 8000b10:	0fdb      	lsrs	r3, r3, #31
 8000b12:	428d      	cmp	r5, r1
 8000b14:	d01e      	beq.n	8000b54 <__gedf2+0x68>
 8000b16:	428c      	cmp	r4, r1
 8000b18:	d016      	beq.n	8000b48 <__gedf2+0x5c>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d11e      	bne.n	8000b5c <__gedf2+0x70>
 8000b1e:	4330      	orrs	r0, r6
 8000b20:	4684      	mov	ip, r0
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d101      	bne.n	8000b2a <__gedf2+0x3e>
 8000b26:	433a      	orrs	r2, r7
 8000b28:	d023      	beq.n	8000b72 <__gedf2+0x86>
 8000b2a:	4662      	mov	r2, ip
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d01a      	beq.n	8000b66 <__gedf2+0x7a>
 8000b30:	459a      	cmp	sl, r3
 8000b32:	d029      	beq.n	8000b88 <__gedf2+0x9c>
 8000b34:	4651      	mov	r1, sl
 8000b36:	2002      	movs	r0, #2
 8000b38:	3901      	subs	r1, #1
 8000b3a:	4008      	ands	r0, r1
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	bc1c      	pop	{r2, r3, r4}
 8000b40:	4690      	mov	r8, r2
 8000b42:	4699      	mov	r9, r3
 8000b44:	46a2      	mov	sl, r4
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b48:	0039      	movs	r1, r7
 8000b4a:	4311      	orrs	r1, r2
 8000b4c:	d0e5      	beq.n	8000b1a <__gedf2+0x2e>
 8000b4e:	2002      	movs	r0, #2
 8000b50:	4240      	negs	r0, r0
 8000b52:	e7f4      	b.n	8000b3e <__gedf2+0x52>
 8000b54:	4330      	orrs	r0, r6
 8000b56:	d1fa      	bne.n	8000b4e <__gedf2+0x62>
 8000b58:	42ac      	cmp	r4, r5
 8000b5a:	d00f      	beq.n	8000b7c <__gedf2+0x90>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d10f      	bne.n	8000b80 <__gedf2+0x94>
 8000b60:	433a      	orrs	r2, r7
 8000b62:	d0e7      	beq.n	8000b34 <__gedf2+0x48>
 8000b64:	e00c      	b.n	8000b80 <__gedf2+0x94>
 8000b66:	2201      	movs	r2, #1
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	4393      	bics	r3, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	3001      	adds	r0, #1
 8000b70:	e7e5      	b.n	8000b3e <__gedf2+0x52>
 8000b72:	4663      	mov	r3, ip
 8000b74:	2000      	movs	r0, #0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0e1      	beq.n	8000b3e <__gedf2+0x52>
 8000b7a:	e7db      	b.n	8000b34 <__gedf2+0x48>
 8000b7c:	433a      	orrs	r2, r7
 8000b7e:	d1e6      	bne.n	8000b4e <__gedf2+0x62>
 8000b80:	459a      	cmp	sl, r3
 8000b82:	d1d7      	bne.n	8000b34 <__gedf2+0x48>
 8000b84:	42a5      	cmp	r5, r4
 8000b86:	dcd5      	bgt.n	8000b34 <__gedf2+0x48>
 8000b88:	42a5      	cmp	r5, r4
 8000b8a:	db05      	blt.n	8000b98 <__gedf2+0xac>
 8000b8c:	42be      	cmp	r6, r7
 8000b8e:	d8d1      	bhi.n	8000b34 <__gedf2+0x48>
 8000b90:	d008      	beq.n	8000ba4 <__gedf2+0xb8>
 8000b92:	2000      	movs	r0, #0
 8000b94:	42be      	cmp	r6, r7
 8000b96:	d2d2      	bcs.n	8000b3e <__gedf2+0x52>
 8000b98:	4650      	mov	r0, sl
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	3801      	subs	r0, #1
 8000b9e:	4398      	bics	r0, r3
 8000ba0:	3001      	adds	r0, #1
 8000ba2:	e7cc      	b.n	8000b3e <__gedf2+0x52>
 8000ba4:	45c8      	cmp	r8, r9
 8000ba6:	d8c5      	bhi.n	8000b34 <__gedf2+0x48>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	45c8      	cmp	r8, r9
 8000bac:	d3f4      	bcc.n	8000b98 <__gedf2+0xac>
 8000bae:	e7c6      	b.n	8000b3e <__gedf2+0x52>
 8000bb0:	000007ff 	.word	0x000007ff

08000bb4 <__ledf2>:
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	464f      	mov	r7, r9
 8000bb8:	4646      	mov	r6, r8
 8000bba:	46d6      	mov	lr, sl
 8000bbc:	004d      	lsls	r5, r1, #1
 8000bbe:	b5c0      	push	{r6, r7, lr}
 8000bc0:	030e      	lsls	r6, r1, #12
 8000bc2:	0fc9      	lsrs	r1, r1, #31
 8000bc4:	468a      	mov	sl, r1
 8000bc6:	492e      	ldr	r1, [pc, #184]	; (8000c80 <__ledf2+0xcc>)
 8000bc8:	031f      	lsls	r7, r3, #12
 8000bca:	005c      	lsls	r4, r3, #1
 8000bcc:	4680      	mov	r8, r0
 8000bce:	0b36      	lsrs	r6, r6, #12
 8000bd0:	0d6d      	lsrs	r5, r5, #21
 8000bd2:	4691      	mov	r9, r2
 8000bd4:	0b3f      	lsrs	r7, r7, #12
 8000bd6:	0d64      	lsrs	r4, r4, #21
 8000bd8:	0fdb      	lsrs	r3, r3, #31
 8000bda:	428d      	cmp	r5, r1
 8000bdc:	d018      	beq.n	8000c10 <__ledf2+0x5c>
 8000bde:	428c      	cmp	r4, r1
 8000be0:	d011      	beq.n	8000c06 <__ledf2+0x52>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	d118      	bne.n	8000c18 <__ledf2+0x64>
 8000be6:	4330      	orrs	r0, r6
 8000be8:	4684      	mov	ip, r0
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d11e      	bne.n	8000c2c <__ledf2+0x78>
 8000bee:	433a      	orrs	r2, r7
 8000bf0:	d11c      	bne.n	8000c2c <__ledf2+0x78>
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d030      	beq.n	8000c5c <__ledf2+0xa8>
 8000bfa:	4651      	mov	r1, sl
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	3901      	subs	r1, #1
 8000c00:	4008      	ands	r0, r1
 8000c02:	3801      	subs	r0, #1
 8000c04:	e02a      	b.n	8000c5c <__ledf2+0xa8>
 8000c06:	0039      	movs	r1, r7
 8000c08:	4311      	orrs	r1, r2
 8000c0a:	d0ea      	beq.n	8000be2 <__ledf2+0x2e>
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	e025      	b.n	8000c5c <__ledf2+0xa8>
 8000c10:	4330      	orrs	r0, r6
 8000c12:	d1fb      	bne.n	8000c0c <__ledf2+0x58>
 8000c14:	42ac      	cmp	r4, r5
 8000c16:	d026      	beq.n	8000c66 <__ledf2+0xb2>
 8000c18:	2c00      	cmp	r4, #0
 8000c1a:	d126      	bne.n	8000c6a <__ledf2+0xb6>
 8000c1c:	433a      	orrs	r2, r7
 8000c1e:	d124      	bne.n	8000c6a <__ledf2+0xb6>
 8000c20:	4651      	mov	r1, sl
 8000c22:	2002      	movs	r0, #2
 8000c24:	3901      	subs	r1, #1
 8000c26:	4008      	ands	r0, r1
 8000c28:	3801      	subs	r0, #1
 8000c2a:	e017      	b.n	8000c5c <__ledf2+0xa8>
 8000c2c:	4662      	mov	r2, ip
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d00f      	beq.n	8000c52 <__ledf2+0x9e>
 8000c32:	459a      	cmp	sl, r3
 8000c34:	d1e1      	bne.n	8000bfa <__ledf2+0x46>
 8000c36:	42a5      	cmp	r5, r4
 8000c38:	db05      	blt.n	8000c46 <__ledf2+0x92>
 8000c3a:	42be      	cmp	r6, r7
 8000c3c:	d8dd      	bhi.n	8000bfa <__ledf2+0x46>
 8000c3e:	d019      	beq.n	8000c74 <__ledf2+0xc0>
 8000c40:	2000      	movs	r0, #0
 8000c42:	42be      	cmp	r6, r7
 8000c44:	d20a      	bcs.n	8000c5c <__ledf2+0xa8>
 8000c46:	4650      	mov	r0, sl
 8000c48:	2301      	movs	r3, #1
 8000c4a:	3801      	subs	r0, #1
 8000c4c:	4398      	bics	r0, r3
 8000c4e:	3001      	adds	r0, #1
 8000c50:	e004      	b.n	8000c5c <__ledf2+0xa8>
 8000c52:	2201      	movs	r2, #1
 8000c54:	3b01      	subs	r3, #1
 8000c56:	4393      	bics	r3, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	3001      	adds	r0, #1
 8000c5c:	bc1c      	pop	{r2, r3, r4}
 8000c5e:	4690      	mov	r8, r2
 8000c60:	4699      	mov	r9, r3
 8000c62:	46a2      	mov	sl, r4
 8000c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c66:	433a      	orrs	r2, r7
 8000c68:	d1d0      	bne.n	8000c0c <__ledf2+0x58>
 8000c6a:	459a      	cmp	sl, r3
 8000c6c:	d1c5      	bne.n	8000bfa <__ledf2+0x46>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	dcc3      	bgt.n	8000bfa <__ledf2+0x46>
 8000c72:	e7e0      	b.n	8000c36 <__ledf2+0x82>
 8000c74:	45c8      	cmp	r8, r9
 8000c76:	d8c0      	bhi.n	8000bfa <__ledf2+0x46>
 8000c78:	2000      	movs	r0, #0
 8000c7a:	45c8      	cmp	r8, r9
 8000c7c:	d3e3      	bcc.n	8000c46 <__ledf2+0x92>
 8000c7e:	e7ed      	b.n	8000c5c <__ledf2+0xa8>
 8000c80:	000007ff 	.word	0x000007ff

08000c84 <statemachine>:
/* void statemachine(UART_HandleTypeDef huart, uint8_t set_state)
 * implements the calibration state machine that indicates to car which threshold value we are
 * currently calculating, takes the average value of user input adc value for 3 secs and updates the
 * appropriate global threshold variable. speed = 1 for resting pressure, speed = 2 for max pressure.
 * */
void statemachine(UART_HandleTypeDef huart, CalibrationState set_state) {
 8000c84:	b084      	sub	sp, #16
 8000c86:	b590      	push	{r4, r7, lr}
 8000c88:	b0a1      	sub	sp, #132	; 0x84
 8000c8a:	af20      	add	r7, sp, #128	; 0x80
 8000c8c:	2410      	movs	r4, #16
 8000c8e:	193c      	adds	r4, r7, r4
 8000c90:	6020      	str	r0, [r4, #0]
 8000c92:	6061      	str	r1, [r4, #4]
 8000c94:	60a2      	str	r2, [r4, #8]
 8000c96:	60e3      	str	r3, [r4, #12]

	switch(set_state) {
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	4694      	mov	ip, r2
 8000c9e:	44bc      	add	ip, r7
 8000ca0:	4463      	add	r3, ip
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b07      	cmp	r3, #7
 8000ca6:	d900      	bls.n	8000caa <statemachine+0x26>
 8000ca8:	e14c      	b.n	8000f44 <statemachine+0x2c0>
 8000caa:	009a      	lsls	r2, r3, #2
 8000cac:	4bb4      	ldr	r3, [pc, #720]	; (8000f80 <statemachine+0x2fc>)
 8000cae:	18d3      	adds	r3, r2, r3
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	469f      	mov	pc, r3
		case FORWARD_REST:
			transmission_handler(huart, 3, 1, mode);
 8000cb4:	4bb3      	ldr	r3, [pc, #716]	; (8000f84 <statemachine+0x300>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2210      	movs	r2, #16
 8000cba:	18bc      	adds	r4, r7, r2
 8000cbc:	931e      	str	r3, [sp, #120]	; 0x78
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	931d      	str	r3, [sp, #116]	; 0x74
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	931c      	str	r3, [sp, #112]	; 0x70
 8000cc6:	466b      	mov	r3, sp
 8000cc8:	0018      	movs	r0, r3
 8000cca:	0023      	movs	r3, r4
 8000ccc:	3310      	adds	r3, #16
 8000cce:	2270      	movs	r2, #112	; 0x70
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	f004 f9c9 	bl	8005068 <memcpy>
 8000cd6:	6820      	ldr	r0, [r4, #0]
 8000cd8:	6861      	ldr	r1, [r4, #4]
 8000cda:	68a2      	ldr	r2, [r4, #8]
 8000cdc:	68e3      	ldr	r3, [r4, #12]
 8000cde:	f001 f8f9 	bl	8001ed4 <transmission_handler>
			frontTr = calADCavg / 300; //sum of ADC_avg values every 10ms for 3 secs / 300;
 8000ce2:	4ba9      	ldr	r3, [pc, #676]	; (8000f88 <statemachine+0x304>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	2396      	movs	r3, #150	; 0x96
 8000ce8:	0059      	lsls	r1, r3, #1
 8000cea:	0010      	movs	r0, r2
 8000cec:	f7ff fa0c 	bl	8000108 <__udivsi3>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	4ba5      	ldr	r3, [pc, #660]	; (8000f8c <statemachine+0x308>)
 8000cf6:	601a      	str	r2, [r3, #0]
			calADCavg = 0;
 8000cf8:	4ba3      	ldr	r3, [pc, #652]	; (8000f88 <statemachine+0x304>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
			last_state_completed = 0;
 8000cfe:	4ba4      	ldr	r3, [pc, #656]	; (8000f90 <statemachine+0x30c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
			break;
 8000d04:	e134      	b.n	8000f70 <statemachine+0x2ec>
		case FORWARD_MAX:
			transmission_handler(huart, 3, 2, mode);
 8000d06:	4b9f      	ldr	r3, [pc, #636]	; (8000f84 <statemachine+0x300>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	18bc      	adds	r4, r7, r2
 8000d0e:	931e      	str	r3, [sp, #120]	; 0x78
 8000d10:	2302      	movs	r3, #2
 8000d12:	931d      	str	r3, [sp, #116]	; 0x74
 8000d14:	2303      	movs	r3, #3
 8000d16:	931c      	str	r3, [sp, #112]	; 0x70
 8000d18:	466b      	mov	r3, sp
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	0023      	movs	r3, r4
 8000d1e:	3310      	adds	r3, #16
 8000d20:	2270      	movs	r2, #112	; 0x70
 8000d22:	0019      	movs	r1, r3
 8000d24:	f004 f9a0 	bl	8005068 <memcpy>
 8000d28:	6820      	ldr	r0, [r4, #0]
 8000d2a:	6861      	ldr	r1, [r4, #4]
 8000d2c:	68a2      	ldr	r2, [r4, #8]
 8000d2e:	68e3      	ldr	r3, [r4, #12]
 8000d30:	f001 f8d0 	bl	8001ed4 <transmission_handler>
			frontTmax = calADCavg / 300;
 8000d34:	4b94      	ldr	r3, [pc, #592]	; (8000f88 <statemachine+0x304>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	2396      	movs	r3, #150	; 0x96
 8000d3a:	0059      	lsls	r1, r3, #1
 8000d3c:	0010      	movs	r0, r2
 8000d3e:	f7ff f9e3 	bl	8000108 <__udivsi3>
 8000d42:	0003      	movs	r3, r0
 8000d44:	001a      	movs	r2, r3
 8000d46:	4b93      	ldr	r3, [pc, #588]	; (8000f94 <statemachine+0x310>)
 8000d48:	601a      	str	r2, [r3, #0]
			calADCavg = 0;
 8000d4a:	4b8f      	ldr	r3, [pc, #572]	; (8000f88 <statemachine+0x304>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
			last_state_completed = 0;
 8000d50:	4b8f      	ldr	r3, [pc, #572]	; (8000f90 <statemachine+0x30c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
			break;
 8000d56:	e10b      	b.n	8000f70 <statemachine+0x2ec>
		case REVERSE_REST:
			transmission_handler(huart, 0, 1, mode);
 8000d58:	4b8a      	ldr	r3, [pc, #552]	; (8000f84 <statemachine+0x300>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2210      	movs	r2, #16
 8000d5e:	18bc      	adds	r4, r7, r2
 8000d60:	931e      	str	r3, [sp, #120]	; 0x78
 8000d62:	2301      	movs	r3, #1
 8000d64:	931d      	str	r3, [sp, #116]	; 0x74
 8000d66:	2300      	movs	r3, #0
 8000d68:	931c      	str	r3, [sp, #112]	; 0x70
 8000d6a:	466b      	mov	r3, sp
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	0023      	movs	r3, r4
 8000d70:	3310      	adds	r3, #16
 8000d72:	2270      	movs	r2, #112	; 0x70
 8000d74:	0019      	movs	r1, r3
 8000d76:	f004 f977 	bl	8005068 <memcpy>
 8000d7a:	6820      	ldr	r0, [r4, #0]
 8000d7c:	6861      	ldr	r1, [r4, #4]
 8000d7e:	68a2      	ldr	r2, [r4, #8]
 8000d80:	68e3      	ldr	r3, [r4, #12]
 8000d82:	f001 f8a7 	bl	8001ed4 <transmission_handler>
			reverseTr = calADCavg / 300;
 8000d86:	4b80      	ldr	r3, [pc, #512]	; (8000f88 <statemachine+0x304>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	2396      	movs	r3, #150	; 0x96
 8000d8c:	0059      	lsls	r1, r3, #1
 8000d8e:	0010      	movs	r0, r2
 8000d90:	f7ff f9ba 	bl	8000108 <__udivsi3>
 8000d94:	0003      	movs	r3, r0
 8000d96:	001a      	movs	r2, r3
 8000d98:	4b7f      	ldr	r3, [pc, #508]	; (8000f98 <statemachine+0x314>)
 8000d9a:	601a      	str	r2, [r3, #0]
			calADCavg = 0;
 8000d9c:	4b7a      	ldr	r3, [pc, #488]	; (8000f88 <statemachine+0x304>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
			last_state_completed = 0;
 8000da2:	4b7b      	ldr	r3, [pc, #492]	; (8000f90 <statemachine+0x30c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
			break;
 8000da8:	e0e2      	b.n	8000f70 <statemachine+0x2ec>
		case REVERSE_MAX:
			transmission_handler(huart, 0, 2, mode);
 8000daa:	4b76      	ldr	r3, [pc, #472]	; (8000f84 <statemachine+0x300>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2210      	movs	r2, #16
 8000db0:	18bc      	adds	r4, r7, r2
 8000db2:	931e      	str	r3, [sp, #120]	; 0x78
 8000db4:	2302      	movs	r3, #2
 8000db6:	931d      	str	r3, [sp, #116]	; 0x74
 8000db8:	2300      	movs	r3, #0
 8000dba:	931c      	str	r3, [sp, #112]	; 0x70
 8000dbc:	466b      	mov	r3, sp
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	0023      	movs	r3, r4
 8000dc2:	3310      	adds	r3, #16
 8000dc4:	2270      	movs	r2, #112	; 0x70
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	f004 f94e 	bl	8005068 <memcpy>
 8000dcc:	6820      	ldr	r0, [r4, #0]
 8000dce:	6861      	ldr	r1, [r4, #4]
 8000dd0:	68a2      	ldr	r2, [r4, #8]
 8000dd2:	68e3      	ldr	r3, [r4, #12]
 8000dd4:	f001 f87e 	bl	8001ed4 <transmission_handler>
			reverseTmax = calADCavg / 300;
 8000dd8:	4b6b      	ldr	r3, [pc, #428]	; (8000f88 <statemachine+0x304>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	2396      	movs	r3, #150	; 0x96
 8000dde:	0059      	lsls	r1, r3, #1
 8000de0:	0010      	movs	r0, r2
 8000de2:	f7ff f991 	bl	8000108 <__udivsi3>
 8000de6:	0003      	movs	r3, r0
 8000de8:	001a      	movs	r2, r3
 8000dea:	4b6c      	ldr	r3, [pc, #432]	; (8000f9c <statemachine+0x318>)
 8000dec:	601a      	str	r2, [r3, #0]
			calADCavg = 0;
 8000dee:	4b66      	ldr	r3, [pc, #408]	; (8000f88 <statemachine+0x304>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
			last_state_completed = 0;
 8000df4:	4b66      	ldr	r3, [pc, #408]	; (8000f90 <statemachine+0x30c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
			break;
 8000dfa:	e0b9      	b.n	8000f70 <statemachine+0x2ec>
		case LEFT_REST:
			transmission_handler(huart, 2, 1, mode);
 8000dfc:	4b61      	ldr	r3, [pc, #388]	; (8000f84 <statemachine+0x300>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2210      	movs	r2, #16
 8000e02:	18bc      	adds	r4, r7, r2
 8000e04:	931e      	str	r3, [sp, #120]	; 0x78
 8000e06:	2301      	movs	r3, #1
 8000e08:	931d      	str	r3, [sp, #116]	; 0x74
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	931c      	str	r3, [sp, #112]	; 0x70
 8000e0e:	466b      	mov	r3, sp
 8000e10:	0018      	movs	r0, r3
 8000e12:	0023      	movs	r3, r4
 8000e14:	3310      	adds	r3, #16
 8000e16:	2270      	movs	r2, #112	; 0x70
 8000e18:	0019      	movs	r1, r3
 8000e1a:	f004 f925 	bl	8005068 <memcpy>
 8000e1e:	6820      	ldr	r0, [r4, #0]
 8000e20:	6861      	ldr	r1, [r4, #4]
 8000e22:	68a2      	ldr	r2, [r4, #8]
 8000e24:	68e3      	ldr	r3, [r4, #12]
 8000e26:	f001 f855 	bl	8001ed4 <transmission_handler>
			leftTr = calADCavg / 300;
 8000e2a:	4b57      	ldr	r3, [pc, #348]	; (8000f88 <statemachine+0x304>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	2396      	movs	r3, #150	; 0x96
 8000e30:	0059      	lsls	r1, r3, #1
 8000e32:	0010      	movs	r0, r2
 8000e34:	f7ff f968 	bl	8000108 <__udivsi3>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	4b58      	ldr	r3, [pc, #352]	; (8000fa0 <statemachine+0x31c>)
 8000e3e:	601a      	str	r2, [r3, #0]
			calADCavg = 0;
 8000e40:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <statemachine+0x304>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
			last_state_completed = 0;
 8000e46:	4b52      	ldr	r3, [pc, #328]	; (8000f90 <statemachine+0x30c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
			break;
 8000e4c:	e090      	b.n	8000f70 <statemachine+0x2ec>
		case LEFT_MAX:
			transmission_handler(huart, 2, 2, mode);
 8000e4e:	4b4d      	ldr	r3, [pc, #308]	; (8000f84 <statemachine+0x300>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2210      	movs	r2, #16
 8000e54:	18bc      	adds	r4, r7, r2
 8000e56:	931e      	str	r3, [sp, #120]	; 0x78
 8000e58:	2302      	movs	r3, #2
 8000e5a:	931d      	str	r3, [sp, #116]	; 0x74
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	931c      	str	r3, [sp, #112]	; 0x70
 8000e60:	466b      	mov	r3, sp
 8000e62:	0018      	movs	r0, r3
 8000e64:	0023      	movs	r3, r4
 8000e66:	3310      	adds	r3, #16
 8000e68:	2270      	movs	r2, #112	; 0x70
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	f004 f8fc 	bl	8005068 <memcpy>
 8000e70:	6820      	ldr	r0, [r4, #0]
 8000e72:	6861      	ldr	r1, [r4, #4]
 8000e74:	68a2      	ldr	r2, [r4, #8]
 8000e76:	68e3      	ldr	r3, [r4, #12]
 8000e78:	f001 f82c 	bl	8001ed4 <transmission_handler>
			leftTmax = calADCavg / 300;
 8000e7c:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <statemachine+0x304>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2396      	movs	r3, #150	; 0x96
 8000e82:	0059      	lsls	r1, r3, #1
 8000e84:	0010      	movs	r0, r2
 8000e86:	f7ff f93f 	bl	8000108 <__udivsi3>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	4b45      	ldr	r3, [pc, #276]	; (8000fa4 <statemachine+0x320>)
 8000e90:	601a      	str	r2, [r3, #0]
			calADCavg = 0;
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <statemachine+0x304>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
			last_state_completed = 0;
 8000e98:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <statemachine+0x30c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
			break;
 8000e9e:	e067      	b.n	8000f70 <statemachine+0x2ec>
		case RIGHT_REST:
			transmission_handler(huart, 1, 1, mode);
 8000ea0:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <statemachine+0x300>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	18bc      	adds	r4, r7, r2
 8000ea8:	931e      	str	r3, [sp, #120]	; 0x78
 8000eaa:	2301      	movs	r3, #1
 8000eac:	931d      	str	r3, [sp, #116]	; 0x74
 8000eae:	2301      	movs	r3, #1
 8000eb0:	931c      	str	r3, [sp, #112]	; 0x70
 8000eb2:	466b      	mov	r3, sp
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	0023      	movs	r3, r4
 8000eb8:	3310      	adds	r3, #16
 8000eba:	2270      	movs	r2, #112	; 0x70
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	f004 f8d3 	bl	8005068 <memcpy>
 8000ec2:	6820      	ldr	r0, [r4, #0]
 8000ec4:	6861      	ldr	r1, [r4, #4]
 8000ec6:	68a2      	ldr	r2, [r4, #8]
 8000ec8:	68e3      	ldr	r3, [r4, #12]
 8000eca:	f001 f803 	bl	8001ed4 <transmission_handler>
			rightTr = calADCavg / 300;
 8000ece:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <statemachine+0x304>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	2396      	movs	r3, #150	; 0x96
 8000ed4:	0059      	lsls	r1, r3, #1
 8000ed6:	0010      	movs	r0, r2
 8000ed8:	f7ff f916 	bl	8000108 <__udivsi3>
 8000edc:	0003      	movs	r3, r0
 8000ede:	001a      	movs	r2, r3
 8000ee0:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <statemachine+0x324>)
 8000ee2:	601a      	str	r2, [r3, #0]
			calADCavg = 0;
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <statemachine+0x304>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
			last_state_completed = 0;
 8000eea:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <statemachine+0x30c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
			break;
 8000ef0:	e03e      	b.n	8000f70 <statemachine+0x2ec>
		case RIGHT_MAX:
			transmission_handler(huart, 1, 2, mode);
 8000ef2:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <statemachine+0x300>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	18bc      	adds	r4, r7, r2
 8000efa:	931e      	str	r3, [sp, #120]	; 0x78
 8000efc:	2302      	movs	r3, #2
 8000efe:	931d      	str	r3, [sp, #116]	; 0x74
 8000f00:	2301      	movs	r3, #1
 8000f02:	931c      	str	r3, [sp, #112]	; 0x70
 8000f04:	466b      	mov	r3, sp
 8000f06:	0018      	movs	r0, r3
 8000f08:	0023      	movs	r3, r4
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	2270      	movs	r2, #112	; 0x70
 8000f0e:	0019      	movs	r1, r3
 8000f10:	f004 f8aa 	bl	8005068 <memcpy>
 8000f14:	6820      	ldr	r0, [r4, #0]
 8000f16:	6861      	ldr	r1, [r4, #4]
 8000f18:	68a2      	ldr	r2, [r4, #8]
 8000f1a:	68e3      	ldr	r3, [r4, #12]
 8000f1c:	f000 ffda 	bl	8001ed4 <transmission_handler>
			rightTmax = calADCavg / 300;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <statemachine+0x304>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	2396      	movs	r3, #150	; 0x96
 8000f26:	0059      	lsls	r1, r3, #1
 8000f28:	0010      	movs	r0, r2
 8000f2a:	f7ff f8ed 	bl	8000108 <__udivsi3>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	001a      	movs	r2, r3
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <statemachine+0x328>)
 8000f34:	601a      	str	r2, [r3, #0]
			calADCavg = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <statemachine+0x304>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
			last_state_completed = 1;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <statemachine+0x30c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
			break;
 8000f42:	e015      	b.n	8000f70 <statemachine+0x2ec>
		default:
			// we should never reach here...statemachine should always work properly!!
			// the following transmission should never happen; we need to have a fail-safe/error handling for that
			transmission_handler(huart, 0, 0, 0);
 8000f44:	2310      	movs	r3, #16
 8000f46:	18fc      	adds	r4, r7, r3
 8000f48:	2300      	movs	r3, #0
 8000f4a:	931e      	str	r3, [sp, #120]	; 0x78
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	931d      	str	r3, [sp, #116]	; 0x74
 8000f50:	2300      	movs	r3, #0
 8000f52:	931c      	str	r3, [sp, #112]	; 0x70
 8000f54:	466b      	mov	r3, sp
 8000f56:	0018      	movs	r0, r3
 8000f58:	0023      	movs	r3, r4
 8000f5a:	3310      	adds	r3, #16
 8000f5c:	2270      	movs	r2, #112	; 0x70
 8000f5e:	0019      	movs	r1, r3
 8000f60:	f004 f882 	bl	8005068 <memcpy>
 8000f64:	6820      	ldr	r0, [r4, #0]
 8000f66:	6861      	ldr	r1, [r4, #4]
 8000f68:	68a2      	ldr	r2, [r4, #8]
 8000f6a:	68e3      	ldr	r3, [r4, #12]
 8000f6c:	f000 ffb2 	bl	8001ed4 <transmission_handler>
	}
	return;
 8000f70:	46c0      	nop			; (mov r8, r8)
}
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b001      	add	sp, #4
 8000f76:	bc90      	pop	{r4, r7}
 8000f78:	bc08      	pop	{r3}
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4718      	bx	r3
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	080050c4 	.word	0x080050c4
 8000f84:	20000000 	.word	0x20000000
 8000f88:	2000034c 	.word	0x2000034c
 8000f8c:	20000150 	.word	0x20000150
 8000f90:	2000002d 	.word	0x2000002d
 8000f94:	20000334 	.word	0x20000334
 8000f98:	2000033c 	.word	0x2000033c
 8000f9c:	20000358 	.word	0x20000358
 8000fa0:	200003a0 	.word	0x200003a0
 8000fa4:	20000090 	.word	0x20000090
 8000fa8:	200003e4 	.word	0x200003e4
 8000fac:	20000044 	.word	0x20000044

08000fb0 <controlScheme>:
 * uint8_t controlScheme(uint32_t *ADCValueArr)
 *  Takes in the RawFSRInput array and determines what the user input
 *  hand motion is and returns corresponding direction value. See function
 *  for control scheme values.
 *  */
uint8_t controlScheme(uint32_t * ADCValueArr){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

	uint32_t indexfinger = ADCValueArr[0];
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61fb      	str	r3, [r7, #28]
	uint32_t middle = ADCValueArr[1];
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
	uint32_t ring = ADCValueArr[2];
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	617b      	str	r3, [r7, #20]
	uint32_t pinky = ADCValueArr[3];
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	613b      	str	r3, [r7, #16]
	uint32_t thumb = ADCValueArr[4];
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	60fb      	str	r3, [r7, #12]

	if ((indexfinger > ADCintialvalue) && (middle > ADCintialvalue) && (ring > ADCintialvalue) && (pinky > ADCintialvalue) && (thumb > ADCintialvalue)){
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00d      	beq.n	8000ff8 <controlScheme+0x48>
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00a      	beq.n	8000ff8 <controlScheme+0x48>
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <controlScheme+0x48>
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <controlScheme+0x48>
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <controlScheme+0x48>
		// hand motion is forward
		return 3;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e033      	b.n	8001060 <controlScheme+0xb0>
	}
	else if((indexfinger == ADCintialvalue) && (middle > ADCintialvalue) && (ring > ADCintialvalue) && (pinky > ADCintialvalue) && (thumb > ADCintialvalue)){
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10d      	bne.n	800101a <controlScheme+0x6a>
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00a      	beq.n	800101a <controlScheme+0x6a>
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d007      	beq.n	800101a <controlScheme+0x6a>
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <controlScheme+0x6a>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <controlScheme+0x6a>
		// hand motion is right
		return 1;
 8001016:	2301      	movs	r3, #1
 8001018:	e022      	b.n	8001060 <controlScheme+0xb0>
	}
	else if((indexfinger > ADCintialvalue) && (middle > ADCintialvalue) && (ring > ADCintialvalue) && (pinky == ADCintialvalue) && (thumb > ADCintialvalue)){
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00d      	beq.n	800103c <controlScheme+0x8c>
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00a      	beq.n	800103c <controlScheme+0x8c>
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d007      	beq.n	800103c <controlScheme+0x8c>
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d104      	bne.n	800103c <controlScheme+0x8c>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <controlScheme+0x8c>
		// hand motion is left
		return 2;
 8001038:	2302      	movs	r3, #2
 800103a:	e011      	b.n	8001060 <controlScheme+0xb0>
	}
	else if((indexfinger == ADCintialvalue) && (middle > ADCintialvalue) && (ring > ADCintialvalue) && (pinky == ADCintialvalue) && (thumb > ADCintialvalue)){
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10d      	bne.n	800105e <controlScheme+0xae>
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00a      	beq.n	800105e <controlScheme+0xae>
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <controlScheme+0xae>
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d104      	bne.n	800105e <controlScheme+0xae>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <controlScheme+0xae>
		// hand motion is reverse
		return 0;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <controlScheme+0xb0>
	}
	else{
		// hand motion is invalid; so send forward by default
		return 3;
 800105e:	2303      	movs	r3, #3
	}

}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b008      	add	sp, #32
 8001066:	bd80      	pop	{r7, pc}

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
// Setting frontTr and frontTmax for testing
frontTr = 10;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <main+0x68>)
 800106e:	220a      	movs	r2, #10
 8001070:	601a      	str	r2, [r3, #0]
frontTmax = 300;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <main+0x6c>)
 8001074:	2296      	movs	r2, #150	; 0x96
 8001076:	0052      	lsls	r2, r2, #1
 8001078:	601a      	str	r2, [r3, #0]
reverseTr = 10;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <main+0x70>)
 800107c:	220a      	movs	r2, #10
 800107e:	601a      	str	r2, [r3, #0]
reverseTmax = 300;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <main+0x74>)
 8001082:	2296      	movs	r2, #150	; 0x96
 8001084:	0052      	lsls	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]
leftTr = 10;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <main+0x78>)
 800108a:	220a      	movs	r2, #10
 800108c:	601a      	str	r2, [r3, #0]
leftTmax = 300;
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <main+0x7c>)
 8001090:	2296      	movs	r2, #150	; 0x96
 8001092:	0052      	lsls	r2, r2, #1
 8001094:	601a      	str	r2, [r3, #0]
rightTr = 10;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <main+0x80>)
 8001098:	220a      	movs	r2, #10
 800109a:	601a      	str	r2, [r3, #0]
rightTmax = 300;
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <main+0x84>)
 800109e:	2296      	movs	r2, #150	; 0x96
 80010a0:	0052      	lsls	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a4:	f000 ff82 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a8:	f000 f824 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ac:	f000 fa18 	bl	80014e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b0:	f000 f9f8 	bl	80014a4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80010b4:	f000 f9c6 	bl	8001444 <MX_USART1_UART_Init>
  MX_ADC_Init();
 80010b8:	f000 f884 	bl	80011c4 <MX_ADC_Init>
  MX_TIM3_Init();
 80010bc:	f000 f912 	bl	80012e4 <MX_TIM3_Init>
  MX_TIM15_Init();
 80010c0:	f000 f966 	bl	8001390 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  // Begin TIM3 to enable continuous Bluetooth transmission every 10ms
  HAL_TIM_Base_Start_IT(&htim3);
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <main+0x88>)
 80010c6:	0018      	movs	r0, r3
 80010c8:	f002 fe64 	bl	8003d94 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x64>
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	20000150 	.word	0x20000150
 80010d4:	20000334 	.word	0x20000334
 80010d8:	2000033c 	.word	0x2000033c
 80010dc:	20000358 	.word	0x20000358
 80010e0:	200003a0 	.word	0x200003a0
 80010e4:	20000090 	.word	0x20000090
 80010e8:	200003e4 	.word	0x200003e4
 80010ec:	20000044 	.word	0x20000044
 80010f0:	20000110 	.word	0x20000110

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b097      	sub	sp, #92	; 0x5c
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	2428      	movs	r4, #40	; 0x28
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	0018      	movs	r0, r3
 8001100:	2330      	movs	r3, #48	; 0x30
 8001102:	001a      	movs	r2, r3
 8001104:	2100      	movs	r1, #0
 8001106:	f003 ffb8 	bl	800507a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110a:	2318      	movs	r3, #24
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	0018      	movs	r0, r3
 8001110:	2310      	movs	r3, #16
 8001112:	001a      	movs	r2, r3
 8001114:	2100      	movs	r1, #0
 8001116:	f003 ffb0 	bl	800507a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	0018      	movs	r0, r3
 800111e:	2314      	movs	r3, #20
 8001120:	001a      	movs	r2, r3
 8001122:	2100      	movs	r1, #0
 8001124:	f003 ffa9 	bl	800507a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001128:	0021      	movs	r1, r4
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2212      	movs	r2, #18
 800112e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2201      	movs	r2, #1
 8001134:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001136:	187b      	adds	r3, r7, r1
 8001138:	2201      	movs	r2, #1
 800113a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2210      	movs	r2, #16
 8001140:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2210      	movs	r2, #16
 8001146:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001148:	187b      	adds	r3, r7, r1
 800114a:	2202      	movs	r2, #2
 800114c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	22a0      	movs	r2, #160	; 0xa0
 8001158:	0392      	lsls	r2, r2, #14
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2200      	movs	r2, #0
 8001160:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001162:	187b      	adds	r3, r7, r1
 8001164:	0018      	movs	r0, r3
 8001166:	f002 f89d 	bl	80032a4 <HAL_RCC_OscConfig>
 800116a:	1e03      	subs	r3, r0, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800116e:	f000 fa1b 	bl	80015a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	2118      	movs	r1, #24
 8001174:	187b      	adds	r3, r7, r1
 8001176:	2207      	movs	r2, #7
 8001178:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2202      	movs	r2, #2
 800117e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2101      	movs	r1, #1
 8001190:	0018      	movs	r0, r3
 8001192:	f002 fba3 	bl	80038dc <HAL_RCC_ClockConfig>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800119a:	f000 fa05 	bl	80015a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	0018      	movs	r0, r3
 80011ae:	f002 fce7 	bl	8003b80 <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	1e03      	subs	r3, r0, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011b6:	f000 f9f7 	bl	80015a8 <Error_Handler>
  }
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b017      	add	sp, #92	; 0x5c
 80011c0:	bd90      	pop	{r4, r7, pc}
	...

080011c4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	0018      	movs	r0, r3
 80011ce:	230c      	movs	r3, #12
 80011d0:	001a      	movs	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	f003 ff51 	bl	800507a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80011d8:	4b40      	ldr	r3, [pc, #256]	; (80012dc <MX_ADC_Init+0x118>)
 80011da:	4a41      	ldr	r2, [pc, #260]	; (80012e0 <MX_ADC_Init+0x11c>)
 80011dc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <MX_ADC_Init+0x118>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80011e4:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <MX_ADC_Init+0x118>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ea:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <MX_ADC_Init+0x118>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80011f0:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <MX_ADC_Init+0x118>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f6:	4b39      	ldr	r3, [pc, #228]	; (80012dc <MX_ADC_Init+0x118>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <MX_ADC_Init+0x118>)
 80011fe:	2200      	movs	r2, #0
 8001200:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001202:	4b36      	ldr	r3, [pc, #216]	; (80012dc <MX_ADC_Init+0x118>)
 8001204:	2200      	movs	r2, #0
 8001206:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <MX_ADC_Init+0x118>)
 800120a:	2201      	movs	r2, #1
 800120c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <MX_ADC_Init+0x118>)
 8001210:	2200      	movs	r2, #0
 8001212:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001214:	4b31      	ldr	r3, [pc, #196]	; (80012dc <MX_ADC_Init+0x118>)
 8001216:	22c2      	movs	r2, #194	; 0xc2
 8001218:	32ff      	adds	r2, #255	; 0xff
 800121a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <MX_ADC_Init+0x118>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <MX_ADC_Init+0x118>)
 8001224:	2224      	movs	r2, #36	; 0x24
 8001226:	2100      	movs	r1, #0
 8001228:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <MX_ADC_Init+0x118>)
 800122c:	2201      	movs	r2, #1
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <MX_ADC_Init+0x118>)
 8001232:	0018      	movs	r0, r3
 8001234:	f000 ff1e 	bl	8002074 <HAL_ADC_Init>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800123c:	f000 f9b4 	bl	80015a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	0152      	lsls	r2, r2, #5
 800124c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	0552      	lsls	r2, r2, #21
 8001254:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001256:	1d3a      	adds	r2, r7, #4
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_ADC_Init+0x118>)
 800125a:	0011      	movs	r1, r2
 800125c:	0018      	movs	r0, r3
 800125e:	f001 f9a3 	bl	80025a8 <HAL_ADC_ConfigChannel>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001266:	f000 f99f 	bl	80015a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2202      	movs	r2, #2
 800126e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001270:	1d3a      	adds	r2, r7, #4
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_ADC_Init+0x118>)
 8001274:	0011      	movs	r1, r2
 8001276:	0018      	movs	r0, r3
 8001278:	f001 f996 	bl	80025a8 <HAL_ADC_ConfigChannel>
 800127c:	1e03      	subs	r3, r0, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001280:	f000 f992 	bl	80015a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2203      	movs	r2, #3
 8001288:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800128a:	1d3a      	adds	r2, r7, #4
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_ADC_Init+0x118>)
 800128e:	0011      	movs	r1, r2
 8001290:	0018      	movs	r0, r3
 8001292:	f001 f989 	bl	80025a8 <HAL_ADC_ConfigChannel>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800129a:	f000 f985 	bl	80015a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2204      	movs	r2, #4
 80012a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012a4:	1d3a      	adds	r2, r7, #4
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_ADC_Init+0x118>)
 80012a8:	0011      	movs	r1, r2
 80012aa:	0018      	movs	r0, r3
 80012ac:	f001 f97c 	bl	80025a8 <HAL_ADC_ConfigChannel>
 80012b0:	1e03      	subs	r3, r0, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80012b4:	f000 f978 	bl	80015a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2205      	movs	r2, #5
 80012bc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012be:	1d3a      	adds	r2, r7, #4
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_ADC_Init+0x118>)
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f001 f96f 	bl	80025a8 <HAL_ADC_ConfigChannel>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 80012ce:	f000 f96b 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	200003a4 	.word	0x200003a4
 80012e0:	40012400 	.word	0x40012400

080012e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	2308      	movs	r3, #8
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	0018      	movs	r0, r3
 80012f0:	2310      	movs	r3, #16
 80012f2:	001a      	movs	r2, r3
 80012f4:	2100      	movs	r1, #0
 80012f6:	f003 fec0 	bl	800507a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fa:	003b      	movs	r3, r7
 80012fc:	0018      	movs	r0, r3
 80012fe:	2308      	movs	r3, #8
 8001300:	001a      	movs	r2, r3
 8001302:	2100      	movs	r1, #0
 8001304:	f003 feb9 	bl	800507a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_TIM3_Init+0xa0>)
 800130a:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <MX_TIM3_Init+0xa4>)
 800130c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001310:	4a1e      	ldr	r2, [pc, #120]	; (800138c <MX_TIM3_Init+0xa8>)
 8001312:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_TIM3_Init+0xa0>)
 800131c:	2263      	movs	r2, #99	; 0x63
 800131e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_TIM3_Init+0xa0>)
 800132e:	0018      	movs	r0, r3
 8001330:	f002 fd04 	bl	8003d3c <HAL_TIM_Base_Init>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001338:	f000 f936 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133c:	2108      	movs	r1, #8
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	0152      	lsls	r2, r2, #5
 8001344:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001346:	187a      	adds	r2, r7, r1
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_TIM3_Init+0xa0>)
 800134a:	0011      	movs	r1, r2
 800134c:	0018      	movs	r0, r3
 800134e:	f002 fe59 	bl	8004004 <HAL_TIM_ConfigClockSource>
 8001352:	1e03      	subs	r3, r0, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001356:	f000 f927 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	003b      	movs	r3, r7
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	003b      	movs	r3, r7
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001366:	003a      	movs	r2, r7
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_TIM3_Init+0xa0>)
 800136a:	0011      	movs	r1, r2
 800136c:	0018      	movs	r0, r3
 800136e:	f003 f849 	bl	8004404 <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	1e03      	subs	r3, r0, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001376:	f000 f917 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b006      	add	sp, #24
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	20000110 	.word	0x20000110
 8001388:	40000400 	.word	0x40000400
 800138c:	0000bb80 	.word	0x0000bb80

08001390 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	2308      	movs	r3, #8
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	0018      	movs	r0, r3
 800139c:	2310      	movs	r3, #16
 800139e:	001a      	movs	r2, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	f003 fe6a 	bl	800507a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a6:	003b      	movs	r3, r7
 80013a8:	0018      	movs	r0, r3
 80013aa:	2308      	movs	r3, #8
 80013ac:	001a      	movs	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	f003 fe63 	bl	800507a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_TIM15_Init+0xa4>)
 80013b6:	4a20      	ldr	r2, [pc, #128]	; (8001438 <MX_TIM15_Init+0xa8>)
 80013b8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48000;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <MX_TIM15_Init+0xa4>)
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <MX_TIM15_Init+0xac>)
 80013be:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <MX_TIM15_Init+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_TIM15_Init+0xa4>)
 80013c8:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <MX_TIM15_Init+0xb0>)
 80013ca:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_TIM15_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_TIM15_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_TIM15_Init+0xa4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_TIM15_Init+0xa4>)
 80013e0:	0018      	movs	r0, r3
 80013e2:	f002 fcab 	bl	8003d3c <HAL_TIM_Base_Init>
 80013e6:	1e03      	subs	r3, r0, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 80013ea:	f000 f8dd 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	2108      	movs	r1, #8
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	0152      	lsls	r2, r2, #5
 80013f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80013f8:	187a      	adds	r2, r7, r1
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_TIM15_Init+0xa4>)
 80013fc:	0011      	movs	r1, r2
 80013fe:	0018      	movs	r0, r3
 8001400:	f002 fe00 	bl	8004004 <HAL_TIM_ConfigClockSource>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d001      	beq.n	800140c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001408:	f000 f8ce 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	003b      	movs	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	003b      	movs	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001418:	003a      	movs	r2, r7
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_TIM15_Init+0xa4>)
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f002 fff0 	bl	8004404 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	1e03      	subs	r3, r0, #0
 8001426:	d001      	beq.n	800142c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001428:	f000 f8be 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b006      	add	sp, #24
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000050 	.word	0x20000050
 8001438:	40014000 	.word	0x40014000
 800143c:	0000bb80 	.word	0x0000bb80
 8001440:	0000ffff 	.word	0x0000ffff

08001444 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_USART1_UART_Init+0x58>)
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <MX_USART1_UART_Init+0x5c>)
 800144c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <MX_USART1_UART_Init+0x58>)
 8001450:	2296      	movs	r2, #150	; 0x96
 8001452:	0192      	lsls	r2, r2, #6
 8001454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_USART1_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_USART1_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_USART1_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_USART1_UART_Init+0x58>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_USART1_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_USART1_UART_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_USART1_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_USART1_UART_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <MX_USART1_UART_Init+0x58>)
 8001488:	0018      	movs	r0, r3
 800148a:	f003 f829 	bl	80044e0 <HAL_UART_Init>
 800148e:	1e03      	subs	r3, r0, #0
 8001490:	d001      	beq.n	8001496 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001492:	f000 f889 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200001cc 	.word	0x200001cc
 80014a0:	40013800 	.word	0x40013800

080014a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_DMA_Init+0x38>)
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <MX_DMA_Init+0x38>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	430a      	orrs	r2, r1
 80014b4:	615a      	str	r2, [r3, #20]
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_DMA_Init+0x38>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	2201      	movs	r2, #1
 80014bc:	4013      	ands	r3, r2
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2009      	movs	r0, #9
 80014c8:	f001 fb28 	bl	8002b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014cc:	2009      	movs	r0, #9
 80014ce:	f001 fb3a 	bl	8002b46 <HAL_NVIC_EnableIRQ>

}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	40021000 	.word	0x40021000

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	240c      	movs	r4, #12
 80014e8:	193b      	adds	r3, r7, r4
 80014ea:	0018      	movs	r0, r3
 80014ec:	2314      	movs	r3, #20
 80014ee:	001a      	movs	r2, r3
 80014f0:	2100      	movs	r1, #0
 80014f2:	f003 fdc2 	bl	800507a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <MX_GPIO_Init+0xbc>)
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <MX_GPIO_Init+0xbc>)
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	0289      	lsls	r1, r1, #10
 8001500:	430a      	orrs	r2, r1
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <MX_GPIO_Init+0xbc>)
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	029b      	lsls	r3, r3, #10
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <MX_GPIO_Init+0xbc>)
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_GPIO_Init+0xbc>)
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	0309      	lsls	r1, r1, #12
 800151c:	430a      	orrs	r2, r1
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <MX_GPIO_Init+0xbc>)
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	031b      	lsls	r3, r3, #12
 8001528:	4013      	ands	r3, r2
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800152e:	23c0      	movs	r3, #192	; 0xc0
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <MX_GPIO_Init+0xc0>)
 8001534:	2200      	movs	r2, #0
 8001536:	0019      	movs	r1, r3
 8001538:	f001 fe70 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800153c:	193b      	adds	r3, r7, r4
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001542:	193b      	adds	r3, r7, r4
 8001544:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <MX_GPIO_Init+0xc4>)
 8001546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	193b      	adds	r3, r7, r4
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	193a      	adds	r2, r7, r4
 8001550:	2390      	movs	r3, #144	; 0x90
 8001552:	05db      	lsls	r3, r3, #23
 8001554:	0011      	movs	r1, r2
 8001556:	0018      	movs	r0, r3
 8001558:	f001 fcf0 	bl	8002f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800155c:	0021      	movs	r1, r4
 800155e:	187b      	adds	r3, r7, r1
 8001560:	22c0      	movs	r2, #192	; 0xc0
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2201      	movs	r2, #1
 800156a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001578:	187b      	adds	r3, r7, r1
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <MX_GPIO_Init+0xc0>)
 800157c:	0019      	movs	r1, r3
 800157e:	0010      	movs	r0, r2
 8001580:	f001 fcdc 	bl	8002f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	2005      	movs	r0, #5
 800158a:	f001 fac7 	bl	8002b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800158e:	2005      	movs	r0, #5
 8001590:	f001 fad9 	bl	8002b46 <HAL_NVIC_EnableIRQ>

}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b009      	add	sp, #36	; 0x24
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000800 	.word	0x48000800
 80015a4:	10110000 	.word	0x10110000

080015a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <conditional>:
 * Checks which range the user input ADC value is in and appropriately sets speed.
 * If ADCavg is less than resting threshold of corresponding hand motion, then speed is 0.
 * If ADCavg is in between resting threshold and average threshold of corresponding hand motion, then speed is MIN_SPEED.
 * If ADCAvg is more than maximum threshold, then speed is MAX_SPEED.
 * Else, need to compute speed as it lies in our "bucket range" for acceleration computation. */
int conditional(uint32_t Tr, uint32_t Tmax, uint32_t ADC_avg, int* pressurearray){
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	603b      	str	r3, [r7, #0]

	// calculation Tavg
	int speed = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
	uint32_t Tavg = (Tr + Tmax) / 2;
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	18d3      	adds	r3, r2, r3
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	613b      	str	r3, [r7, #16]

	if (ADC_avg < Tr){
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d202      	bcs.n	80015dc <conditional+0x2a>
		speed = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e021      	b.n	8001620 <conditional+0x6e>
	}
	else if (ADC_avg >= Tmax){
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d302      	bcc.n	80015ea <conditional+0x38>
		speed = MAX_SPEED;
 80015e4:	231f      	movs	r3, #31
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e01a      	b.n	8001620 <conditional+0x6e>
	}
	else if ((ADC_avg > Tr) && (ADC_avg < Tavg)){
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d906      	bls.n	8001600 <conditional+0x4e>
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d202      	bcs.n	8001600 <conditional+0x4e>
		speed = MIN_SPEED;
 80015fa:	2301      	movs	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	e00f      	b.n	8001620 <conditional+0x6e>
	}
	else if ((ADC_avg >= Tavg) && (ADC_avg < Tmax)){
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d30b      	bcc.n	8001620 <conditional+0x6e>
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	429a      	cmp	r2, r3
 800160e:	d207      	bcs.n	8001620 <conditional+0x6e>
			speed = speedcalc(Tavg, Tmax, pressurearray);
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	0018      	movs	r0, r3
 8001618:	f000 f808 	bl	800162c <speedcalc>
 800161c:	0003      	movs	r3, r0
 800161e:	617b      	str	r3, [r7, #20]
	}
	return speed;
 8001620:	697b      	ldr	r3, [r7, #20]

}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b006      	add	sp, #24
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <speedcalc>:
/* int speedcalc(uint32_t Tavg, uint32_t Tmax, int* pressurearray)
 * Speed is deemed as lying in "bucket range" for acceleration computation.
 * Refers to corresponding pressure array for correct hand motion and assigns the
 * correct 5-bits. This is returned. If function returns -1, it entails that a speed bucket
 * could not be found, i.e. something is WRONG!! */
int speedcalc(uint32_t Tavg, uint32_t Tmax, int * pressurearray){
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]

	// The (j + 2) is offsetting for the lower two already assigned values; (0 speed and MIN_SPEED of 1).

	for (int j = 0; j < 29; j++){
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e02f      	b.n	800169e <speedcalc+0x72>
		// if current pressure exceeds last bucket but not max threshold, then return 30.
		if (j == 28){
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b1c      	cmp	r3, #28
 8001642:	d111      	bne.n	8001668 <speedcalc+0x3c>
			if ((RawFSRAvg >= pressurearray[j]) && (RawFSRAvg < Tmax)) {
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	18d3      	adds	r3, r2, r3
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	001a      	movs	r2, r3
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <speedcalc+0x84>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d807      	bhi.n	8001668 <speedcalc+0x3c>
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <speedcalc+0x84>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	429a      	cmp	r2, r3
 8001660:	d902      	bls.n	8001668 <speedcalc+0x3c>
						return j + 2;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3302      	adds	r3, #2
 8001666:	e01f      	b.n	80016a8 <speedcalc+0x7c>
			}
		}
		// if current pressure lies between two buckets, then return corresponding current speed.
		if ((RawFSRAvg >= pressurearray[j]) && (RawFSRAvg < pressurearray[j + 1])) {
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	18d3      	adds	r3, r2, r3
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	001a      	movs	r2, r3
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <speedcalc+0x84>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d80d      	bhi.n	8001698 <speedcalc+0x6c>
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	001a      	movs	r2, r3
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <speedcalc+0x84>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d902      	bls.n	8001698 <speedcalc+0x6c>
			return j + 2;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3302      	adds	r3, #2
 8001696:	e007      	b.n	80016a8 <speedcalc+0x7c>
	for (int j = 0; j < 29; j++){
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b1c      	cmp	r3, #28
 80016a2:	ddcc      	ble.n	800163e <speedcalc+0x12>
		}
	}

	return -1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	425b      	negs	r3, r3
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b006      	add	sp, #24
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000048 	.word	0x20000048

080016b4 <Tavgcalc>:

/* FUNCTIONS */

/* uint32_t Tavgcalc(uint32_t Tmax, uint32_t Tr)
 * Function that computes the average threshold pressure for each hand motion. */
uint32_t Tavgcalc(uint32_t Tmax, uint32_t Tr){
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
	return floor((Tmax+Tr)/2);
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	18d3      	adds	r3, r2, r3
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7ff f946 	bl	8000958 <__aeabi_ui2d>
 80016cc:	0003      	movs	r3, r0
 80016ce:	000c      	movs	r4, r1
 80016d0:	0018      	movs	r0, r3
 80016d2:	0021      	movs	r1, r4
 80016d4:	f7fe fda4 	bl	8000220 <__aeabi_d2uiz>
 80016d8:	0003      	movs	r3, r0
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	b003      	add	sp, #12
 80016e0:	bd90      	pop	{r4, r7, pc}

080016e2 <kcalc>:

/* int kcalc(uint32_t Tavg, uint32_t Tmax)
 * Function that computes length of bucket (marked as k-value) for each hand motion. */
int kcalc(uint32_t Tavg, uint32_t Tmax){
 80016e2:	b590      	push	{r4, r7, lr}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
	return floor((Tmax - Tavg)/29);
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	211d      	movs	r1, #29
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7fe fd07 	bl	8000108 <__udivsi3>
 80016fa:	0003      	movs	r3, r0
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff f92b 	bl	8000958 <__aeabi_ui2d>
 8001702:	0003      	movs	r3, r0
 8001704:	000c      	movs	r4, r1
 8001706:	0018      	movs	r0, r3
 8001708:	0021      	movs	r1, r4
 800170a:	f7ff f8ef 	bl	80008ec <__aeabi_d2iz>
 800170e:	0003      	movs	r3, r0
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b003      	add	sp, #12
 8001716:	bd90      	pop	{r4, r7, pc}

08001718 <fourTavg>:

/* void fourTavg()
 * Function that sets global Tavg values for each hand motion (Tavgcalc gets called four different times). */
void fourTavg(){
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	frontTavg = Tavgcalc(frontTmax, frontTr);
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <fourTavg+0x64>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <fourTavg+0x68>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0019      	movs	r1, r3
 8001726:	0010      	movs	r0, r2
 8001728:	f7ff ffc4 	bl	80016b4 <Tavgcalc>
 800172c:	0002      	movs	r2, r0
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <fourTavg+0x6c>)
 8001730:	601a      	str	r2, [r3, #0]
	reverseTavg = Tavgcalc(reverseTmax, reverseTr);
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <fourTavg+0x70>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <fourTavg+0x74>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0019      	movs	r1, r3
 800173c:	0010      	movs	r0, r2
 800173e:	f7ff ffb9 	bl	80016b4 <Tavgcalc>
 8001742:	0002      	movs	r2, r0
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <fourTavg+0x78>)
 8001746:	601a      	str	r2, [r3, #0]
	leftTavg = Tavgcalc(leftTmax, leftTr);
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <fourTavg+0x7c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <fourTavg+0x80>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0019      	movs	r1, r3
 8001752:	0010      	movs	r0, r2
 8001754:	f7ff ffae 	bl	80016b4 <Tavgcalc>
 8001758:	0002      	movs	r2, r0
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <fourTavg+0x84>)
 800175c:	601a      	str	r2, [r3, #0]
	rightTavg = Tavgcalc(rightTmax, rightTr);
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <fourTavg+0x88>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <fourTavg+0x8c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0019      	movs	r1, r3
 8001768:	0010      	movs	r0, r2
 800176a:	f7ff ffa3 	bl	80016b4 <Tavgcalc>
 800176e:	0002      	movs	r2, r0
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <fourTavg+0x90>)
 8001772:	601a      	str	r2, [r3, #0]
}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	20000334 	.word	0x20000334
 8001780:	20000150 	.word	0x20000150
 8001784:	2000004c 	.word	0x2000004c
 8001788:	20000358 	.word	0x20000358
 800178c:	2000033c 	.word	0x2000033c
 8001790:	20000340 	.word	0x20000340
 8001794:	20000090 	.word	0x20000090
 8001798:	200003a0 	.word	0x200003a0
 800179c:	20000348 	.word	0x20000348
 80017a0:	20000044 	.word	0x20000044
 80017a4:	200003e4 	.word	0x200003e4
 80017a8:	20000338 	.word	0x20000338

080017ac <fourk>:

/* void fourk()
 * Function that sets global k-values for each hand motion (kcalc gets called four different times). */
void fourk(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	frontk = kcalc(frontTavg, frontTmax);
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <fourk+0x64>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <fourk+0x68>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0019      	movs	r1, r3
 80017ba:	0010      	movs	r0, r2
 80017bc:	f7ff ff91 	bl	80016e2 <kcalc>
 80017c0:	0002      	movs	r2, r0
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <fourk+0x6c>)
 80017c4:	601a      	str	r2, [r3, #0]
	reversek = kcalc(reverseTavg, reverseTmax);
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <fourk+0x70>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <fourk+0x74>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0019      	movs	r1, r3
 80017d0:	0010      	movs	r0, r2
 80017d2:	f7ff ff86 	bl	80016e2 <kcalc>
 80017d6:	0002      	movs	r2, r0
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <fourk+0x78>)
 80017da:	601a      	str	r2, [r3, #0]
	leftk = kcalc(leftTavg, leftTmax);
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <fourk+0x7c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <fourk+0x80>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0019      	movs	r1, r3
 80017e6:	0010      	movs	r0, r2
 80017e8:	f7ff ff7b 	bl	80016e2 <kcalc>
 80017ec:	0002      	movs	r2, r0
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <fourk+0x84>)
 80017f0:	601a      	str	r2, [r3, #0]
	rightk = kcalc(rightTavg, rightTavg);
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <fourk+0x88>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <fourk+0x88>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0019      	movs	r1, r3
 80017fc:	0010      	movs	r0, r2
 80017fe:	f7ff ff70 	bl	80016e2 <kcalc>
 8001802:	0002      	movs	r2, r0
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <fourk+0x8c>)
 8001806:	601a      	str	r2, [r3, #0]
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	2000004c 	.word	0x2000004c
 8001814:	20000334 	.word	0x20000334
 8001818:	20000098 	.word	0x20000098
 800181c:	20000340 	.word	0x20000340
 8001820:	20000358 	.word	0x20000358
 8001824:	20000094 	.word	0x20000094
 8001828:	20000348 	.word	0x20000348
 800182c:	20000090 	.word	0x20000090
 8001830:	20000344 	.word	0x20000344
 8001834:	20000338 	.word	0x20000338
 8001838:	20000350 	.word	0x20000350

0800183c <pressureArrayInit>:

/* void pressureArrayInit()
 * Function that sets global pressure array values based on k-length bucket for each hand motion.
 * Should only get called once all four k-values and Tavg values are calculated.
 * These arrays will be used as lookup tables during speed value transmission. */
void pressureArrayInit() {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < 29; i++){
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	e010      	b.n	800186a <pressureArrayInit+0x2e>
		pressurefront[i] = frontTavg + ((i + 1) * frontk);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <pressureArrayInit+0xc8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4353      	muls	r3, r2
 8001852:	001a      	movs	r2, r3
 8001854:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <pressureArrayInit+0xcc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	18d3      	adds	r3, r2, r3
 800185a:	0019      	movs	r1, r3
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <pressureArrayInit+0xd0>)
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 29; i++){
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3301      	adds	r3, #1
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b1c      	cmp	r3, #28
 800186e:	ddeb      	ble.n	8001848 <pressureArrayInit+0xc>
	}
	for (i = 0; i < 29; i++){
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	e010      	b.n	8001898 <pressureArrayInit+0x5c>
			pressurereverse[i] = reverseTavg + ((i + 1) * reversek);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <pressureArrayInit+0xd4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4353      	muls	r3, r2
 8001880:	001a      	movs	r2, r3
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <pressureArrayInit+0xd8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	18d3      	adds	r3, r2, r3
 8001888:	0019      	movs	r1, r3
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <pressureArrayInit+0xdc>)
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	0092      	lsls	r2, r2, #2
 8001890:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 29; i++){
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3301      	adds	r3, #1
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b1c      	cmp	r3, #28
 800189c:	ddeb      	ble.n	8001876 <pressureArrayInit+0x3a>
		}
	for (i = 0; i < 29; i++){
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	e010      	b.n	80018c6 <pressureArrayInit+0x8a>
			pressureleft[i] = leftTavg + ((i + 1) * leftk);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <pressureArrayInit+0xe0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4353      	muls	r3, r2
 80018ae:	001a      	movs	r2, r3
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <pressureArrayInit+0xe4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	18d3      	adds	r3, r2, r3
 80018b6:	0019      	movs	r1, r3
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <pressureArrayInit+0xe8>)
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 29; i++){
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3301      	adds	r3, #1
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b1c      	cmp	r3, #28
 80018ca:	ddeb      	ble.n	80018a4 <pressureArrayInit+0x68>
		}
	for (i = 0; i < 29; i++){
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	e010      	b.n	80018f4 <pressureArrayInit+0xb8>
			pressureright[i] = rightTavg + ((i + 1) * rightk);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <pressureArrayInit+0xec>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4353      	muls	r3, r2
 80018dc:	001a      	movs	r2, r3
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <pressureArrayInit+0xf0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	18d3      	adds	r3, r2, r3
 80018e4:	0019      	movs	r1, r3
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <pressureArrayInit+0xf4>)
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < 29; i++){
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3301      	adds	r3, #1
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b1c      	cmp	r3, #28
 80018f8:	ddeb      	ble.n	80018d2 <pressureArrayInit+0x96>
		}
}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	20000098 	.word	0x20000098
 8001908:	2000004c 	.word	0x2000004c
 800190c:	200002c0 	.word	0x200002c0
 8001910:	20000094 	.word	0x20000094
 8001914:	20000340 	.word	0x20000340
 8001918:	20000158 	.word	0x20000158
 800191c:	20000344 	.word	0x20000344
 8001920:	20000348 	.word	0x20000348
 8001924:	2000009c 	.word	0x2000009c
 8001928:	20000350 	.word	0x20000350
 800192c:	20000338 	.word	0x20000338
 8001930:	2000024c 	.word	0x2000024c

08001934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_MspInit+0x44>)
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_MspInit+0x44>)
 8001940:	2101      	movs	r1, #1
 8001942:	430a      	orrs	r2, r1
 8001944:	619a      	str	r2, [r3, #24]
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_MspInit+0x44>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2201      	movs	r2, #1
 800194c:	4013      	ands	r3, r2
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_MspInit+0x44>)
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_MspInit+0x44>)
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	0549      	lsls	r1, r1, #21
 800195c:	430a      	orrs	r2, r1
 800195e:	61da      	str	r2, [r3, #28]
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_MspInit+0x44>)
 8001962:	69da      	ldr	r2, [r3, #28]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	4013      	ands	r3, r2
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	2314      	movs	r3, #20
 8001986:	18fb      	adds	r3, r7, r3
 8001988:	0018      	movs	r0, r3
 800198a:	2314      	movs	r3, #20
 800198c:	001a      	movs	r2, r3
 800198e:	2100      	movs	r1, #0
 8001990:	f003 fb73 	bl	800507a <memset>
  if(hadc->Instance==ADC1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a31      	ldr	r2, [pc, #196]	; (8001a60 <HAL_ADC_MspInit+0xe4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d15c      	bne.n	8001a58 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_ADC_MspInit+0xe8>)
 80019a0:	699a      	ldr	r2, [r3, #24]
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_ADC_MspInit+0xe8>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0089      	lsls	r1, r1, #2
 80019a8:	430a      	orrs	r2, r1
 80019aa:	619a      	str	r2, [r3, #24]
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_ADC_MspInit+0xe8>)
 80019ae:	699a      	ldr	r2, [r3, #24]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_ADC_MspInit+0xe8>)
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <HAL_ADC_MspInit+0xe8>)
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	0289      	lsls	r1, r1, #10
 80019c4:	430a      	orrs	r2, r1
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_ADC_MspInit+0xe8>)
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	029b      	lsls	r3, r3, #10
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80019d6:	2114      	movs	r1, #20
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	223e      	movs	r2, #62	; 0x3e
 80019dc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	2203      	movs	r2, #3
 80019e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	187a      	adds	r2, r7, r1
 80019ec:	2390      	movs	r3, #144	; 0x90
 80019ee:	05db      	lsls	r3, r3, #23
 80019f0:	0011      	movs	r1, r2
 80019f2:	0018      	movs	r0, r3
 80019f4:	f001 faa2 	bl	8002f3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_ADC_MspInit+0xec>)
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <HAL_ADC_MspInit+0xf0>)
 80019fc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_ADC_MspInit+0xec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_ADC_MspInit+0xec>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_ADC_MspInit+0xec>)
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_ADC_MspInit+0xec>)
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_ADC_MspInit+0xec>)
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_ADC_MspInit+0xec>)
 8001a22:	2220      	movs	r2, #32
 8001a24:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_ADC_MspInit+0xec>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_ADC_MspInit+0xec>)
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f001 f8a6 	bl	8002b80 <HAL_DMA_Init>
 8001a34:	1e03      	subs	r3, r0, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001a38:	f7ff fdb6 	bl	80015a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_ADC_MspInit+0xec>)
 8001a40:	631a      	str	r2, [r3, #48]	; 0x30
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_ADC_MspInit+0xec>)
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	200c      	movs	r0, #12
 8001a4e:	f001 f865 	bl	8002b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001a52:	200c      	movs	r0, #12
 8001a54:	f001 f877 	bl	8002b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b00a      	add	sp, #40	; 0x28
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40012400 	.word	0x40012400
 8001a64:	40021000 	.word	0x40021000
 8001a68:	2000035c 	.word	0x2000035c
 8001a6c:	40020008 	.word	0x40020008

08001a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	2314      	movs	r3, #20
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	2314      	movs	r3, #20
 8001a80:	001a      	movs	r2, r3
 8001a82:	2100      	movs	r1, #0
 8001a84:	f003 faf9 	bl	800507a <memset>
  if(htim_base->Instance==TIM3)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2d      	ldr	r2, [pc, #180]	; (8001b44 <HAL_TIM_Base_MspInit+0xd4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d139      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_TIM_Base_MspInit+0xd8>)
 8001a94:	69da      	ldr	r2, [r3, #28]
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HAL_TIM_Base_MspInit+0xd8>)
 8001a98:	2102      	movs	r1, #2
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	61da      	str	r2, [r3, #28]
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_TIM_Base_MspInit+0xd8>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_TIM_Base_MspInit+0xd8>)
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <HAL_TIM_Base_MspInit+0xd8>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	0289      	lsls	r1, r1, #10
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	615a      	str	r2, [r3, #20]
 8001ab8:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <HAL_TIM_Base_MspInit+0xd8>)
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ac6:	2114      	movs	r1, #20
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	2240      	movs	r2, #64	; 0x40
 8001acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	187a      	adds	r2, r7, r1
 8001ae8:	2390      	movs	r3, #144	; 0x90
 8001aea:	05db      	lsls	r3, r3, #23
 8001aec:	0011      	movs	r1, r2
 8001aee:	0018      	movs	r0, r3
 8001af0:	f001 fa24 	bl	8002f3c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2010      	movs	r0, #16
 8001afa:	f001 f80f 	bl	8002b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001afe:	2010      	movs	r0, #16
 8001b00:	f001 f821 	bl	8002b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001b04:	e01a      	b.n	8001b3c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM15)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a10      	ldr	r2, [pc, #64]	; (8001b4c <HAL_TIM_Base_MspInit+0xdc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d115      	bne.n	8001b3c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001b10:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_TIM_Base_MspInit+0xd8>)
 8001b12:	699a      	ldr	r2, [r3, #24]
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_TIM_Base_MspInit+0xd8>)
 8001b16:	2180      	movs	r1, #128	; 0x80
 8001b18:	0249      	lsls	r1, r1, #9
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	619a      	str	r2, [r3, #24]
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_TIM_Base_MspInit+0xd8>)
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	025b      	lsls	r3, r3, #9
 8001b26:	4013      	ands	r3, r2
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2014      	movs	r0, #20
 8001b32:	f000 fff3 	bl	8002b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001b36:	2014      	movs	r0, #20
 8001b38:	f001 f805 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b00a      	add	sp, #40	; 0x28
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40000400 	.word	0x40000400
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40014000 	.word	0x40014000

08001b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	2314      	movs	r3, #20
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	2314      	movs	r3, #20
 8001b60:	001a      	movs	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	f003 fa89 	bl	800507a <memset>
  if(huart->Instance==USART1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <HAL_UART_MspInit+0xa4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d13b      	bne.n	8001bea <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_UART_MspInit+0xa8>)
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_UART_MspInit+0xa8>)
 8001b78:	2180      	movs	r1, #128	; 0x80
 8001b7a:	01c9      	lsls	r1, r1, #7
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	619a      	str	r2, [r3, #24]
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_UART_MspInit+0xa8>)
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	01db      	lsls	r3, r3, #7
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_UART_MspInit+0xa8>)
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_UART_MspInit+0xa8>)
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	0289      	lsls	r1, r1, #10
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_UART_MspInit+0xa8>)
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001baa:	2114      	movs	r1, #20
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	22c0      	movs	r2, #192	; 0xc0
 8001bb0:	00d2      	lsls	r2, r2, #3
 8001bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	2201      	movs	r2, #1
 8001bca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	187a      	adds	r2, r7, r1
 8001bce:	2390      	movs	r3, #144	; 0x90
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f001 f9b1 	bl	8002f3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	201b      	movs	r0, #27
 8001be0:	f000 ff9c 	bl	8002b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001be4:	201b      	movs	r0, #27
 8001be6:	f000 ffae 	bl	8002b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b00a      	add	sp, #40	; 0x28
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	40021000 	.word	0x40021000

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <HardFault_Handler+0x4>

08001c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c24:	f000 fa0a 	bl	800203c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  // timer interrupt should be happening irrespective of this external interrupt; the ADC value should be updating still by the TIM3

  // calibration mode button was pressed, so change the global mode, set_state , and cal_complete values
  mode = 0;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <EXTI0_1_IRQHandler+0x24>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
  set_state = FORWARD_REST;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <EXTI0_1_IRQHandler+0x28>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
  cal_complete = 0;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <EXTI0_1_IRQHandler+0x2c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f001 fb06 	bl	8003258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	20000000 	.word	0x20000000
 8001c58:	2000002c 	.word	0x2000002c
 8001c5c:	2000002e 	.word	0x2000002e

08001c60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <DMA1_Channel1_IRQHandler+0x14>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f001 f87e 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	2000035c 	.word	0x2000035c

08001c78 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <ADC1_COMP_IRQHandler+0x14>)
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f000 fbba 	bl	80023f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	200003a4 	.word	0x200003a4

08001c90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* Start ADC-DMA conversions to place the raw FSR ADC values into the RawFSRInput buffer */
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)RawFSRInput, 5);
 8001c94:	4942      	ldr	r1, [pc, #264]	; (8001da0 <TIM3_IRQHandler+0x110>)
 8001c96:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <TIM3_IRQHandler+0x114>)
 8001c98:	2205      	movs	r2, #5
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 fb2a 	bl	80022f4 <HAL_ADC_Start_DMA>
  RawFSRAvg = (RawFSRInput[0] + RawFSRInput[1] + RawFSRInput[2] + RawFSRInput[3] + RawFSRInput[4]) / 5;
 8001ca0:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <TIM3_IRQHandler+0x110>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <TIM3_IRQHandler+0x110>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	18d2      	adds	r2, r2, r3
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <TIM3_IRQHandler+0x110>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	18d2      	adds	r2, r2, r3
 8001cb0:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <TIM3_IRQHandler+0x110>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	18d2      	adds	r2, r2, r3
 8001cb6:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <TIM3_IRQHandler+0x110>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	18d3      	adds	r3, r2, r3
 8001cbc:	2105      	movs	r1, #5
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7fe fa22 	bl	8000108 <__udivsi3>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <TIM3_IRQHandler+0x118>)
 8001cca:	601a      	str	r2, [r3, #0]
//		  fourk();
//		  pressureArrayInit();
//	  }
//  }
//  else if (mode && cal_complete) {
	  fourTavg();
 8001ccc:	f7ff fd24 	bl	8001718 <fourTavg>
	  fourk();
 8001cd0:	f7ff fd6c 	bl	80017ac <fourk>
	  pressureArrayInit();
 8001cd4:	f7ff fdb2 	bl	800183c <pressureArrayInit>

	  direction = controlScheme(RawFSRInput);
 8001cd8:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <TIM3_IRQHandler+0x110>)
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f7ff f968 	bl	8000fb0 <controlScheme>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	001a      	movs	r2, r3
 8001ce4:	4b31      	ldr	r3, [pc, #196]	; (8001dac <TIM3_IRQHandler+0x11c>)
 8001ce6:	701a      	strb	r2, [r3, #0]
	  if (direction == 3){
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <TIM3_IRQHandler+0x11c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d10c      	bne.n	8001d0a <TIM3_IRQHandler+0x7a>
		  // if direction is forward, compute speed based on global forward motion measurements
		  speed = conditional(frontTr, frontTmax, RawFSRAvg, pressurefront);
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <TIM3_IRQHandler+0x120>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <TIM3_IRQHandler+0x124>)
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <TIM3_IRQHandler+0x118>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <TIM3_IRQHandler+0x128>)
 8001cfe:	f7ff fc58 	bl	80015b2 <conditional>
 8001d02:	0003      	movs	r3, r0
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <TIM3_IRQHandler+0x12c>)
 8001d08:	701a      	strb	r2, [r3, #0]
	  }
	  if (direction == 0){
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <TIM3_IRQHandler+0x11c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10c      	bne.n	8001d2c <TIM3_IRQHandler+0x9c>
		  // if direction is reverse, compute speed based on global reverse motion measurements
		  speed = conditional(reverseTr, reverseTmax, RawFSRAvg, pressurereverse);
 8001d12:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <TIM3_IRQHandler+0x130>)
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <TIM3_IRQHandler+0x134>)
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <TIM3_IRQHandler+0x118>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <TIM3_IRQHandler+0x138>)
 8001d20:	f7ff fc47 	bl	80015b2 <conditional>
 8001d24:	0003      	movs	r3, r0
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <TIM3_IRQHandler+0x12c>)
 8001d2a:	701a      	strb	r2, [r3, #0]
	  }
	  if (direction == 2){
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <TIM3_IRQHandler+0x11c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d10c      	bne.n	8001d4e <TIM3_IRQHandler+0xbe>
		  // if direction is left, compute speed based on global left motion measurements
		  speed = conditional(leftTr, leftTmax, RawFSRAvg, pressureleft);
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <TIM3_IRQHandler+0x13c>)
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <TIM3_IRQHandler+0x140>)
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <TIM3_IRQHandler+0x118>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <TIM3_IRQHandler+0x144>)
 8001d42:	f7ff fc36 	bl	80015b2 <conditional>
 8001d46:	0003      	movs	r3, r0
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <TIM3_IRQHandler+0x12c>)
 8001d4c:	701a      	strb	r2, [r3, #0]
	  }
	  if (direction == 1){
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <TIM3_IRQHandler+0x11c>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d10c      	bne.n	8001d70 <TIM3_IRQHandler+0xe0>
		  // if direction is right, compute speed based on global right motion measurements
		  speed = conditional(rightTr, rightTmax, RawFSRAvg, pressureright);
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <TIM3_IRQHandler+0x148>)
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <TIM3_IRQHandler+0x14c>)
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <TIM3_IRQHandler+0x118>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <TIM3_IRQHandler+0x150>)
 8001d64:	f7ff fc25 	bl	80015b2 <conditional>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <TIM3_IRQHandler+0x12c>)
 8001d6e:	701a      	strb	r2, [r3, #0]
//	transmission_handler(huart1, 3, 0, mode);
//
//  }

  // Enable IT does nothing when in calibration mode
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <TIM3_IRQHandler+0x154>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <TIM3_IRQHandler+0x154>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <TIM3_IRQHandler+0x158>)
 8001d82:	0018      	movs	r0, r3
 8001d84:	f002 f828 	bl	8003dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <TIM3_IRQHandler+0x154>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <TIM3_IRQHandler+0x154>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	438a      	bics	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	20000030 	.word	0x20000030
 8001da4:	200003a4 	.word	0x200003a4
 8001da8:	20000048 	.word	0x20000048
 8001dac:	20000154 	.word	0x20000154
 8001db0:	20000150 	.word	0x20000150
 8001db4:	20000334 	.word	0x20000334
 8001db8:	200002c0 	.word	0x200002c0
 8001dbc:	20000354 	.word	0x20000354
 8001dc0:	2000033c 	.word	0x2000033c
 8001dc4:	20000358 	.word	0x20000358
 8001dc8:	20000158 	.word	0x20000158
 8001dcc:	200003a0 	.word	0x200003a0
 8001dd0:	20000090 	.word	0x20000090
 8001dd4:	2000009c 	.word	0x2000009c
 8001dd8:	200003e4 	.word	0x200003e4
 8001ddc:	20000044 	.word	0x20000044
 8001de0:	2000024c 	.word	0x2000024c
 8001de4:	200001cc 	.word	0x200001cc
 8001de8:	20000110 	.word	0x20000110

08001dec <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b09f      	sub	sp, #124	; 0x7c
 8001df0:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE BEGIN TIM15_IRQn 0 */
  // this timer should only do stuff if calibration mode is entered
  if (mode == 0) {
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <TIM15_IRQHandler+0x64>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d121      	bne.n	8001e3e <TIM15_IRQHandler+0x52>
	  statemachine(huart1, set_state);
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <TIM15_IRQHandler+0x68>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4c16      	ldr	r4, [pc, #88]	; (8001e58 <TIM15_IRQHandler+0x6c>)
 8001e00:	931c      	str	r3, [sp, #112]	; 0x70
 8001e02:	466b      	mov	r3, sp
 8001e04:	0018      	movs	r0, r3
 8001e06:	0023      	movs	r3, r4
 8001e08:	3310      	adds	r3, #16
 8001e0a:	2270      	movs	r2, #112	; 0x70
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	f003 f92b 	bl	8005068 <memcpy>
 8001e12:	6820      	ldr	r0, [r4, #0]
 8001e14:	6861      	ldr	r1, [r4, #4]
 8001e16:	68a2      	ldr	r2, [r4, #8]
 8001e18:	68e3      	ldr	r3, [r4, #12]
 8001e1a:	f7fe ff33 	bl	8000c84 <statemachine>
	  // set next state variable
	  (CalibrationState)set_state++;
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <TIM15_IRQHandler+0x68>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <TIM15_IRQHandler+0x68>)
 8001e28:	701a      	strb	r2, [r3, #0]
	  if(last_state_completed) {
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <TIM15_IRQHandler+0x70>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <TIM15_IRQHandler+0x52>
		  cal_complete = 1;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <TIM15_IRQHandler+0x74>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
		  mode = 1;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <TIM15_IRQHandler+0x64>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
	  }
  }
  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <TIM15_IRQHandler+0x78>)
 8001e40:	0018      	movs	r0, r3
 8001e42:	f001 ffc9 	bl	8003dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b001      	add	sp, #4
 8001e4c:	bd90      	pop	{r4, r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	20000000 	.word	0x20000000
 8001e54:	2000002c 	.word	0x2000002c
 8001e58:	200001cc 	.word	0x200001cc
 8001e5c:	2000002d 	.word	0x2000002d
 8001e60:	2000002e 	.word	0x2000002e
 8001e64:	20000050 	.word	0x20000050

08001e68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b0a1      	sub	sp, #132	; 0x84
 8001e6c:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE BEGIN USART1_IRQn 0 */

	// only call interrupt-driven transmission handler if in gameplay mode
	if(mode == 1) {
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <USART1_IRQHandler+0x50>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d117      	bne.n	8001ea6 <USART1_IRQHandler+0x3e>
		transmission_handler(huart1, direction, speed, mode);
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <USART1_IRQHandler+0x54>)
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <USART1_IRQHandler+0x58>)
 8001e7c:	7819      	ldrb	r1, [r3, #0]
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <USART1_IRQHandler+0x50>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4c10      	ldr	r4, [pc, #64]	; (8001ec4 <USART1_IRQHandler+0x5c>)
 8001e84:	931e      	str	r3, [sp, #120]	; 0x78
 8001e86:	911d      	str	r1, [sp, #116]	; 0x74
 8001e88:	921c      	str	r2, [sp, #112]	; 0x70
 8001e8a:	466b      	mov	r3, sp
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	0023      	movs	r3, r4
 8001e90:	3310      	adds	r3, #16
 8001e92:	2270      	movs	r2, #112	; 0x70
 8001e94:	0019      	movs	r1, r3
 8001e96:	f003 f8e7 	bl	8005068 <memcpy>
 8001e9a:	6820      	ldr	r0, [r4, #0]
 8001e9c:	6861      	ldr	r1, [r4, #4]
 8001e9e:	68a2      	ldr	r2, [r4, #8]
 8001ea0:	68e3      	ldr	r3, [r4, #12]
 8001ea2:	f000 f817 	bl	8001ed4 <transmission_handler>
	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <USART1_IRQHandler+0x5c>)
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f002 fc15 	bl	80046d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b001      	add	sp, #4
 8001eb4:	bd90      	pop	{r4, r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	20000154 	.word	0x20000154
 8001ec0:	20000354 	.word	0x20000354
 8001ec4:	200001cc 	.word	0x200001cc

08001ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ecc:	46c0      	nop			; (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <transmission_handler>:

/* VARIABLES */
uint8_t txbuffer;

/* FUNCTIONS */
void transmission_handler(UART_HandleTypeDef huart, uint8_t dir, uint8_t speed, int mode) {
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	b5b0      	push	{r4, r5, r7, lr}
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	2510      	movs	r5, #16
 8001edc:	197c      	adds	r4, r7, r5
 8001ede:	6020      	str	r0, [r4, #0]
 8001ee0:	6061      	str	r1, [r4, #4]
 8001ee2:	60a2      	str	r2, [r4, #8]
 8001ee4:	60e3      	str	r3, [r4, #12]

	dir = dir << 5;
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	2210      	movs	r2, #16
 8001eea:	4694      	mov	ip, r2
 8001eec:	44bc      	add	ip, r7
 8001eee:	4463      	add	r3, ip
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	2110      	movs	r1, #16
 8001ef4:	468c      	mov	ip, r1
 8001ef6:	44bc      	add	ip, r7
 8001ef8:	4462      	add	r2, ip
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	0152      	lsls	r2, r2, #5
 8001efe:	701a      	strb	r2, [r3, #0]
	mode = mode << 7;
 8001f00:	2298      	movs	r2, #152	; 0x98
 8001f02:	18bb      	adds	r3, r7, r2
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	01db      	lsls	r3, r3, #7
 8001f08:	18b9      	adds	r1, r7, r2
 8001f0a:	600b      	str	r3, [r1, #0]
	txbuffer = (mode | dir | speed);
 8001f0c:	18bb      	adds	r3, r7, r2
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	b25a      	sxtb	r2, r3
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	2110      	movs	r1, #16
 8001f16:	468c      	mov	ip, r1
 8001f18:	44bc      	add	ip, r7
 8001f1a:	4463      	add	r3, ip
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b25b      	sxtb	r3, r3
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b25a      	sxtb	r2, r3
 8001f24:	2384      	movs	r3, #132	; 0x84
 8001f26:	2110      	movs	r1, #16
 8001f28:	468c      	mov	ip, r1
 8001f2a:	44bc      	add	ip, r7
 8001f2c:	4463      	add	r3, ip
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b25b      	sxtb	r3, r3
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <transmission_handler+0x80>)
 8001f3a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart, (uint8_t *)&txbuffer, 1, 100);
 8001f3c:	4905      	ldr	r1, [pc, #20]	; (8001f54 <transmission_handler+0x80>)
 8001f3e:	1978      	adds	r0, r7, r5
 8001f40:	2364      	movs	r3, #100	; 0x64
 8001f42:	2201      	movs	r2, #1
 8001f44:	f002 fb20 	bl	8004588 <HAL_UART_Transmit>
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bcb0      	pop	{r4, r5, r7}
 8001f4e:	bc08      	pop	{r3}
 8001f50:	b004      	add	sp, #16
 8001f52:	4718      	bx	r3
 8001f54:	200003e8 	.word	0x200003e8

08001f58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f5e:	490e      	ldr	r1, [pc, #56]	; (8001f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f60:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <LoopForever+0xe>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f74:	4c0b      	ldr	r4, [pc, #44]	; (8001fa4 <LoopForever+0x16>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f82:	f7ff ffa1 	bl	8001ec8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f86:	f003 f84b 	bl	8005020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f8a:	f7ff f86d 	bl	8001068 <main>

08001f8e <LoopForever>:

LoopForever:
    b LoopForever
 8001f8e:	e7fe      	b.n	8001f8e <LoopForever>
  ldr   r0, =_estack
 8001f90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f9c:	08005104 	.word	0x08005104
  ldr r2, =_sbss
 8001fa0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001fa4:	200003f0 	.word	0x200003f0

08001fa8 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <CEC_CAN_IRQHandler>
	...

08001fac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_Init+0x24>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_Init+0x24>)
 8001fb6:	2110      	movs	r1, #16
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f000 f809 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc2:	f7ff fcb7 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	40022000 	.word	0x40022000

08001fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_InitTick+0x5c>)
 8001fde:	681c      	ldr	r4, [r3, #0]
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_InitTick+0x60>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	23fa      	movs	r3, #250	; 0xfa
 8001fe8:	0098      	lsls	r0, r3, #2
 8001fea:	f7fe f88d 	bl	8000108 <__udivsi3>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	0020      	movs	r0, r4
 8001ff4:	f7fe f888 	bl	8000108 <__udivsi3>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 fdb3 	bl	8002b66 <HAL_SYSTICK_Config>
 8002000:	1e03      	subs	r3, r0, #0
 8002002:	d001      	beq.n	8002008 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e00f      	b.n	8002028 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d80b      	bhi.n	8002026 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	2301      	movs	r3, #1
 8002012:	425b      	negs	r3, r3
 8002014:	2200      	movs	r2, #0
 8002016:	0018      	movs	r0, r3
 8002018:	f000 fd80 	bl	8002b1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_InitTick+0x64>)
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b003      	add	sp, #12
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	20000004 	.word	0x20000004
 8002034:	2000000c 	.word	0x2000000c
 8002038:	20000008 	.word	0x20000008

0800203c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_IncTick+0x1c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	001a      	movs	r2, r3
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_IncTick+0x20>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	18d2      	adds	r2, r2, r3
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_IncTick+0x20>)
 800204e:	601a      	str	r2, [r3, #0]
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	2000000c 	.word	0x2000000c
 800205c:	200003ec 	.word	0x200003ec

08002060 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b02      	ldr	r3, [pc, #8]	; (8002070 <HAL_GetTick+0x10>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	0018      	movs	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	200003ec 	.word	0x200003ec

08002074 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207c:	230f      	movs	r3, #15
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e125      	b.n	80022de <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10a      	bne.n	80020b0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2234      	movs	r2, #52	; 0x34
 80020a4:	2100      	movs	r1, #0
 80020a6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7ff fc66 	bl	800197c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	2210      	movs	r2, #16
 80020b6:	4013      	ands	r3, r2
 80020b8:	d000      	beq.n	80020bc <HAL_ADC_Init+0x48>
 80020ba:	e103      	b.n	80022c4 <HAL_ADC_Init+0x250>
 80020bc:	230f      	movs	r3, #15
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d000      	beq.n	80020c8 <HAL_ADC_Init+0x54>
 80020c6:	e0fd      	b.n	80022c4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2204      	movs	r2, #4
 80020d0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80020d2:	d000      	beq.n	80020d6 <HAL_ADC_Init+0x62>
 80020d4:	e0f6      	b.n	80022c4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	4a83      	ldr	r2, [pc, #524]	; (80022e8 <HAL_ADC_Init+0x274>)
 80020dc:	4013      	ands	r3, r2
 80020de:	2202      	movs	r2, #2
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2203      	movs	r2, #3
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d112      	bne.n	800211a <HAL_ADC_Init+0xa6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2201      	movs	r2, #1
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d009      	beq.n	8002116 <HAL_ADC_Init+0xa2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	401a      	ands	r2, r3
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	429a      	cmp	r2, r3
 8002114:	d101      	bne.n	800211a <HAL_ADC_Init+0xa6>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_ADC_Init+0xa8>
 800211a:	2300      	movs	r3, #0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d116      	bne.n	800214e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2218      	movs	r2, #24
 8002128:	4393      	bics	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	0899      	lsrs	r1, r3, #2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4964      	ldr	r1, [pc, #400]	; (80022ec <HAL_ADC_Init+0x278>)
 800215a:	400a      	ands	r2, r1
 800215c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7e1b      	ldrb	r3, [r3, #24]
 8002162:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7e5b      	ldrb	r3, [r3, #25]
 8002168:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800216a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7e9b      	ldrb	r3, [r3, #26]
 8002170:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002172:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	2b01      	cmp	r3, #1
 800217a:	d002      	beq.n	8002182 <HAL_ADC_Init+0x10e>
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	e000      	b.n	8002184 <HAL_ADC_Init+0x110>
 8002182:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002184:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800218a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d101      	bne.n	8002198 <HAL_ADC_Init+0x124>
 8002194:	2304      	movs	r3, #4
 8002196:	e000      	b.n	800219a <HAL_ADC_Init+0x126>
 8002198:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800219a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2124      	movs	r1, #36	; 0x24
 80021a0:	5c5b      	ldrb	r3, [r3, r1]
 80021a2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80021a4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7edb      	ldrb	r3, [r3, #27]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d115      	bne.n	80021e0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7e9b      	ldrb	r3, [r3, #26]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	0252      	lsls	r2, r2, #9
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	e00b      	b.n	80021e0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	2220      	movs	r2, #32
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	2201      	movs	r2, #1
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	23c2      	movs	r3, #194	; 0xc2
 80021e6:	33ff      	adds	r3, #255	; 0xff
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d007      	beq.n	80021fc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80021f4:	4313      	orrs	r3, r2
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68d9      	ldr	r1, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	055b      	lsls	r3, r3, #21
 8002214:	429a      	cmp	r2, r3
 8002216:	d01b      	beq.n	8002250 <HAL_ADC_Init+0x1dc>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	2b01      	cmp	r3, #1
 800221e:	d017      	beq.n	8002250 <HAL_ADC_Init+0x1dc>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	2b02      	cmp	r3, #2
 8002226:	d013      	beq.n	8002250 <HAL_ADC_Init+0x1dc>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	2b03      	cmp	r3, #3
 800222e:	d00f      	beq.n	8002250 <HAL_ADC_Init+0x1dc>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	2b04      	cmp	r3, #4
 8002236:	d00b      	beq.n	8002250 <HAL_ADC_Init+0x1dc>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	2b05      	cmp	r3, #5
 800223e:	d007      	beq.n	8002250 <HAL_ADC_Init+0x1dc>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	2b06      	cmp	r3, #6
 8002246:	d003      	beq.n	8002250 <HAL_ADC_Init+0x1dc>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	2b07      	cmp	r3, #7
 800224e:	d112      	bne.n	8002276 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2107      	movs	r1, #7
 800225c:	438a      	bics	r2, r1
 800225e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6959      	ldr	r1, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	2207      	movs	r2, #7
 800226c:	401a      	ands	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_ADC_Init+0x27c>)
 800227e:	4013      	ands	r3, r2
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	429a      	cmp	r2, r3
 8002284:	d10b      	bne.n	800229e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002290:	2203      	movs	r2, #3
 8002292:	4393      	bics	r3, r2
 8002294:	2201      	movs	r2, #1
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800229c:	e01c      	b.n	80022d8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	2212      	movs	r2, #18
 80022a4:	4393      	bics	r3, r2
 80022a6:	2210      	movs	r2, #16
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	2201      	movs	r2, #1
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80022ba:	230f      	movs	r3, #15
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022c2:	e009      	b.n	80022d8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	2210      	movs	r2, #16
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80022d0:	230f      	movs	r3, #15
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022d8:	230f      	movs	r3, #15
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	781b      	ldrb	r3, [r3, #0]
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b004      	add	sp, #16
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	fffffefd 	.word	0xfffffefd
 80022ec:	fffe0219 	.word	0xfffe0219
 80022f0:	833fffe7 	.word	0x833fffe7

080022f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002300:	2317      	movs	r3, #23
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2204      	movs	r2, #4
 8002310:	4013      	ands	r3, r2
 8002312:	d15e      	bne.n	80023d2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2234      	movs	r2, #52	; 0x34
 8002318:	5c9b      	ldrb	r3, [r3, r2]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_ADC_Start_DMA+0x2e>
 800231e:	2302      	movs	r3, #2
 8002320:	e05e      	b.n	80023e0 <HAL_ADC_Start_DMA+0xec>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2234      	movs	r2, #52	; 0x34
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	7e5b      	ldrb	r3, [r3, #25]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d007      	beq.n	8002342 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002332:	2317      	movs	r3, #23
 8002334:	18fc      	adds	r4, r7, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fa43 	bl	80027c4 <ADC_Enable>
 800233e:	0003      	movs	r3, r0
 8002340:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002342:	2317      	movs	r3, #23
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d146      	bne.n	80023da <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <HAL_ADC_Start_DMA+0xf4>)
 8002352:	4013      	ands	r3, r2
 8002354:	2280      	movs	r2, #128	; 0x80
 8002356:	0052      	lsls	r2, r2, #1
 8002358:	431a      	orrs	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2234      	movs	r2, #52	; 0x34
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <HAL_ADC_Start_DMA+0xf8>)
 8002372:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_ADC_Start_DMA+0xfc>)
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	4a1c      	ldr	r2, [pc, #112]	; (80023f4 <HAL_ADC_Start_DMA+0x100>)
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	221c      	movs	r2, #28
 800238a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2110      	movs	r1, #16
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3340      	adds	r3, #64	; 0x40
 80023b6:	0019      	movs	r1, r3
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f000 fc28 	bl	8002c10 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2104      	movs	r1, #4
 80023cc:	430a      	orrs	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	e003      	b.n	80023da <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023d2:	2317      	movs	r3, #23
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	2202      	movs	r2, #2
 80023d8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80023da:	2317      	movs	r3, #23
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	781b      	ldrb	r3, [r3, #0]
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b007      	add	sp, #28
 80023e6:	bd90      	pop	{r4, r7, pc}
 80023e8:	fffff0fe 	.word	0xfffff0fe
 80023ec:	080028bd 	.word	0x080028bd
 80023f0:	08002971 	.word	0x08002971
 80023f4:	0800298f 	.word	0x0800298f

080023f8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2204      	movs	r2, #4
 8002408:	4013      	ands	r3, r2
 800240a:	2b04      	cmp	r3, #4
 800240c:	d106      	bne.n	800241c <HAL_ADC_IRQHandler+0x24>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2204      	movs	r2, #4
 8002416:	4013      	ands	r3, r2
 8002418:	2b04      	cmp	r3, #4
 800241a:	d00d      	beq.n	8002438 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2208      	movs	r2, #8
 8002424:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002426:	2b08      	cmp	r3, #8
 8002428:	d14f      	bne.n	80024ca <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2208      	movs	r2, #8
 8002432:	4013      	ands	r3, r2
 8002434:	2b08      	cmp	r3, #8
 8002436:	d148      	bne.n	80024ca <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	2210      	movs	r2, #16
 800243e:	4013      	ands	r3, r2
 8002440:	d106      	bne.n	8002450 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	0092      	lsls	r2, r2, #2
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	23c0      	movs	r3, #192	; 0xc0
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	4013      	ands	r3, r2
 800245c:	d12d      	bne.n	80024ba <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002462:	2b00      	cmp	r3, #0
 8002464:	d129      	bne.n	80024ba <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2208      	movs	r2, #8
 800246e:	4013      	ands	r3, r2
 8002470:	2b08      	cmp	r3, #8
 8002472:	d122      	bne.n	80024ba <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2204      	movs	r2, #4
 800247c:	4013      	ands	r3, r2
 800247e:	d110      	bne.n	80024a2 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	210c      	movs	r1, #12
 800248c:	438a      	bics	r2, r1
 800248e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	4a33      	ldr	r2, [pc, #204]	; (8002564 <HAL_ADC_IRQHandler+0x16c>)
 8002496:	4013      	ands	r3, r2
 8002498:	2201      	movs	r2, #1
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
 80024a0:	e00b      	b.n	80024ba <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	2220      	movs	r2, #32
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b2:	2201      	movs	r2, #1
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0018      	movs	r0, r3
 80024be:	f000 f853 	bl	8002568 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	220c      	movs	r2, #12
 80024c8:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d115      	bne.n	8002504 <HAL_ADC_IRQHandler+0x10c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b80      	cmp	r3, #128	; 0x80
 80024e4:	d10e      	bne.n	8002504 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	0252      	lsls	r2, r2, #9
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 f846 	bl	8002588 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2210      	movs	r2, #16
 800250c:	4013      	ands	r3, r2
 800250e:	2b10      	cmp	r3, #16
 8002510:	d123      	bne.n	800255a <HAL_ADC_IRQHandler+0x162>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2210      	movs	r2, #16
 800251a:	4013      	ands	r3, r2
 800251c:	2b10      	cmp	r3, #16
 800251e:	d11c      	bne.n	800255a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	2b01      	cmp	r3, #1
 8002526:	d006      	beq.n	8002536 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002532:	2b01      	cmp	r3, #1
 8002534:	d10d      	bne.n	8002552 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	2202      	movs	r2, #2
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2210      	movs	r2, #16
 8002548:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	0018      	movs	r0, r3
 800254e:	f000 f823 	bl	8002598 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2210      	movs	r2, #16
 8002558:	601a      	str	r2, [r3, #0]
  }

}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b002      	add	sp, #8
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	fffffefe 	.word	0xfffffefe

08002568 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b002      	add	sp, #8
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b002      	add	sp, #8
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b2:	230f      	movs	r3, #15
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	055b      	lsls	r3, r3, #21
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d011      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x46>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d00d      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x46>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d009      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x46>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d005      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x46>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d001      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x46>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2234      	movs	r2, #52	; 0x34
 80025f2:	5c9b      	ldrb	r3, [r3, r2]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x54>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e0d0      	b.n	800279e <HAL_ADC_ConfigChannel+0x1f6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2234      	movs	r2, #52	; 0x34
 8002600:	2101      	movs	r1, #1
 8002602:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2204      	movs	r2, #4
 800260c:	4013      	ands	r3, r2
 800260e:	d000      	beq.n	8002612 <HAL_ADC_ConfigChannel+0x6a>
 8002610:	e0b4      	b.n	800277c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a64      	ldr	r2, [pc, #400]	; (80027a8 <HAL_ADC_ConfigChannel+0x200>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d100      	bne.n	800261e <HAL_ADC_ConfigChannel+0x76>
 800261c:	e082      	b.n	8002724 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2201      	movs	r2, #1
 800262a:	409a      	lsls	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	055b      	lsls	r3, r3, #21
 800263c:	429a      	cmp	r2, r3
 800263e:	d037      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x108>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	2b01      	cmp	r3, #1
 8002646:	d033      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	2b02      	cmp	r3, #2
 800264e:	d02f      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x108>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	2b03      	cmp	r3, #3
 8002656:	d02b      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x108>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	2b04      	cmp	r3, #4
 800265e:	d027      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x108>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	2b05      	cmp	r3, #5
 8002666:	d023      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x108>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	2b06      	cmp	r3, #6
 800266e:	d01f      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x108>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	2b07      	cmp	r3, #7
 8002676:	d01b      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2107      	movs	r1, #7
 8002684:	400b      	ands	r3, r1
 8002686:	429a      	cmp	r2, r3
 8002688:	d012      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2107      	movs	r1, #7
 8002696:	438a      	bics	r2, r1
 8002698:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6959      	ldr	r1, [r3, #20]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2207      	movs	r2, #7
 80026a6:	401a      	ands	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d007      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x120>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b11      	cmp	r3, #17
 80026be:	d003      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x120>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b12      	cmp	r3, #18
 80026c6:	d163      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_ADC_ConfigChannel+0x204>)
 80026ca:	6819      	ldr	r1, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d009      	beq.n	80026e8 <HAL_ADC_ConfigChannel+0x140>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b11      	cmp	r3, #17
 80026da:	d102      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x13a>
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	03db      	lsls	r3, r3, #15
 80026e0:	e004      	b.n	80026ec <HAL_ADC_ConfigChannel+0x144>
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	045b      	lsls	r3, r3, #17
 80026e6:	e001      	b.n	80026ec <HAL_ADC_ConfigChannel+0x144>
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	4a2f      	ldr	r2, [pc, #188]	; (80027ac <HAL_ADC_ConfigChannel+0x204>)
 80026ee:	430b      	orrs	r3, r1
 80026f0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d14a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <HAL_ADC_ConfigChannel+0x208>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	492d      	ldr	r1, [pc, #180]	; (80027b4 <HAL_ADC_ConfigChannel+0x20c>)
 8002700:	0018      	movs	r0, r3
 8002702:	f7fd fd01 	bl	8000108 <__udivsi3>
 8002706:	0003      	movs	r3, r0
 8002708:	001a      	movs	r2, r3
 800270a:	0013      	movs	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	189b      	adds	r3, r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002714:	e002      	b.n	800271c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3b01      	subs	r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f9      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x16e>
 8002722:	e035      	b.n	8002790 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2101      	movs	r1, #1
 8002730:	4099      	lsls	r1, r3
 8002732:	000b      	movs	r3, r1
 8002734:	43d9      	mvns	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	400a      	ands	r2, r1
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b10      	cmp	r3, #16
 8002744:	d007      	beq.n	8002756 <HAL_ADC_ConfigChannel+0x1ae>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b11      	cmp	r3, #17
 800274c:	d003      	beq.n	8002756 <HAL_ADC_ConfigChannel+0x1ae>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b12      	cmp	r3, #18
 8002754:	d11c      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_ADC_ConfigChannel+0x204>)
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b10      	cmp	r3, #16
 8002760:	d007      	beq.n	8002772 <HAL_ADC_ConfigChannel+0x1ca>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b11      	cmp	r3, #17
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x1c6>
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HAL_ADC_ConfigChannel+0x210>)
 800276c:	e002      	b.n	8002774 <HAL_ADC_ConfigChannel+0x1cc>
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_ADC_ConfigChannel+0x214>)
 8002770:	e000      	b.n	8002774 <HAL_ADC_ConfigChannel+0x1cc>
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_ADC_ConfigChannel+0x218>)
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <HAL_ADC_ConfigChannel+0x204>)
 8002776:	400b      	ands	r3, r1
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e009      	b.n	8002790 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	2220      	movs	r2, #32
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002788:	230f      	movs	r3, #15
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2234      	movs	r2, #52	; 0x34
 8002794:	2100      	movs	r1, #0
 8002796:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002798:	230f      	movs	r3, #15
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	781b      	ldrb	r3, [r3, #0]
}
 800279e:	0018      	movs	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b004      	add	sp, #16
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	00001001 	.word	0x00001001
 80027ac:	40012708 	.word	0x40012708
 80027b0:	20000004 	.word	0x20000004
 80027b4:	000f4240 	.word	0x000f4240
 80027b8:	ffbfffff 	.word	0xffbfffff
 80027bc:	feffffff 	.word	0xfeffffff
 80027c0:	ff7fffff 	.word	0xff7fffff

080027c4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2203      	movs	r2, #3
 80027dc:	4013      	ands	r3, r2
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d112      	bne.n	8002808 <ADC_Enable+0x44>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2201      	movs	r2, #1
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d009      	beq.n	8002804 <ADC_Enable+0x40>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	401a      	ands	r2, r3
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	429a      	cmp	r2, r3
 8002802:	d101      	bne.n	8002808 <ADC_Enable+0x44>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <ADC_Enable+0x46>
 8002808:	2300      	movs	r3, #0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d14b      	bne.n	80028a6 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a26      	ldr	r2, [pc, #152]	; (80028b0 <ADC_Enable+0xec>)
 8002816:	4013      	ands	r3, r2
 8002818:	d00d      	beq.n	8002836 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	2210      	movs	r2, #16
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	2201      	movs	r2, #1
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e038      	b.n	80028a8 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	430a      	orrs	r2, r1
 8002844:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <ADC_Enable+0xf0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	491b      	ldr	r1, [pc, #108]	; (80028b8 <ADC_Enable+0xf4>)
 800284c:	0018      	movs	r0, r3
 800284e:	f7fd fc5b 	bl	8000108 <__udivsi3>
 8002852:	0003      	movs	r3, r0
 8002854:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002856:	e002      	b.n	800285e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	3b01      	subs	r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f9      	bne.n	8002858 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002864:	f7ff fbfc 	bl	8002060 <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800286c:	e014      	b.n	8002898 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800286e:	f7ff fbf7 	bl	8002060 <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d90d      	bls.n	8002898 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	2210      	movs	r2, #16
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288c:	2201      	movs	r2, #1
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e007      	b.n	80028a8 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2201      	movs	r2, #1
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d1e3      	bne.n	800286e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b004      	add	sp, #16
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	80000017 	.word	0x80000017
 80028b4:	20000004 	.word	0x20000004
 80028b8:	000f4240 	.word	0x000f4240

080028bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	2250      	movs	r2, #80	; 0x50
 80028d0:	4013      	ands	r3, r2
 80028d2:	d140      	bne.n	8002956 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	431a      	orrs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	23c0      	movs	r3, #192	; 0xc0
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4013      	ands	r3, r2
 80028ee:	d12d      	bne.n	800294c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d129      	bne.n	800294c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2208      	movs	r2, #8
 8002900:	4013      	ands	r3, r2
 8002902:	2b08      	cmp	r3, #8
 8002904:	d122      	bne.n	800294c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2204      	movs	r2, #4
 800290e:	4013      	ands	r3, r2
 8002910:	d110      	bne.n	8002934 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	210c      	movs	r1, #12
 800291e:	438a      	bics	r2, r1
 8002920:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	4a11      	ldr	r2, [pc, #68]	; (800296c <ADC_DMAConvCplt+0xb0>)
 8002928:	4013      	ands	r3, r2
 800292a:	2201      	movs	r2, #1
 800292c:	431a      	orrs	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
 8002932:	e00b      	b.n	800294c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	2220      	movs	r2, #32
 800293a:	431a      	orrs	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	2201      	movs	r2, #1
 8002946:	431a      	orrs	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	0018      	movs	r0, r3
 8002950:	f7ff fe0a 	bl	8002568 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002954:	e005      	b.n	8002962 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	0010      	movs	r0, r2
 8002960:	4798      	blx	r3
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b004      	add	sp, #16
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	fffffefe 	.word	0xfffffefe

08002970 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	0018      	movs	r0, r3
 8002982:	f7ff fdf9 	bl	8002578 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b004      	add	sp, #16
 800298c:	bd80      	pop	{r7, pc}

0800298e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	431a      	orrs	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	2204      	movs	r2, #4
 80029ae:	431a      	orrs	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7ff fdee 	bl	8002598 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029bc:	46c0      	nop			; (mov r8, r8)
 80029be:	46bd      	mov	sp, r7
 80029c0:	b004      	add	sp, #16
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	0002      	movs	r2, r0
 80029cc:	1dfb      	adds	r3, r7, #7
 80029ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029d0:	1dfb      	adds	r3, r7, #7
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b7f      	cmp	r3, #127	; 0x7f
 80029d6:	d809      	bhi.n	80029ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d8:	1dfb      	adds	r3, r7, #7
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	001a      	movs	r2, r3
 80029de:	231f      	movs	r3, #31
 80029e0:	401a      	ands	r2, r3
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <__NVIC_EnableIRQ+0x30>)
 80029e4:	2101      	movs	r1, #1
 80029e6:	4091      	lsls	r1, r2
 80029e8:	000a      	movs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]
  }
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	e000e100 	.word	0xe000e100

080029f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	0002      	movs	r2, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	1dfb      	adds	r3, r7, #7
 8002a04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a06:	1dfb      	adds	r3, r7, #7
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a0c:	d828      	bhi.n	8002a60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a0e:	4a2f      	ldr	r2, [pc, #188]	; (8002acc <__NVIC_SetPriority+0xd4>)
 8002a10:	1dfb      	adds	r3, r7, #7
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b25b      	sxtb	r3, r3
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	33c0      	adds	r3, #192	; 0xc0
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	589b      	ldr	r3, [r3, r2]
 8002a1e:	1dfa      	adds	r2, r7, #7
 8002a20:	7812      	ldrb	r2, [r2, #0]
 8002a22:	0011      	movs	r1, r2
 8002a24:	2203      	movs	r2, #3
 8002a26:	400a      	ands	r2, r1
 8002a28:	00d2      	lsls	r2, r2, #3
 8002a2a:	21ff      	movs	r1, #255	; 0xff
 8002a2c:	4091      	lsls	r1, r2
 8002a2e:	000a      	movs	r2, r1
 8002a30:	43d2      	mvns	r2, r2
 8002a32:	401a      	ands	r2, r3
 8002a34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	019b      	lsls	r3, r3, #6
 8002a3a:	22ff      	movs	r2, #255	; 0xff
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	1dfb      	adds	r3, r7, #7
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	0018      	movs	r0, r3
 8002a44:	2303      	movs	r3, #3
 8002a46:	4003      	ands	r3, r0
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a4c:	481f      	ldr	r0, [pc, #124]	; (8002acc <__NVIC_SetPriority+0xd4>)
 8002a4e:	1dfb      	adds	r3, r7, #7
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	430a      	orrs	r2, r1
 8002a58:	33c0      	adds	r3, #192	; 0xc0
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a5e:	e031      	b.n	8002ac4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a60:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <__NVIC_SetPriority+0xd8>)
 8002a62:	1dfb      	adds	r3, r7, #7
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	0019      	movs	r1, r3
 8002a68:	230f      	movs	r3, #15
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	3b08      	subs	r3, #8
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3306      	adds	r3, #6
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	18d3      	adds	r3, r2, r3
 8002a76:	3304      	adds	r3, #4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	1dfa      	adds	r2, r7, #7
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	0011      	movs	r1, r2
 8002a80:	2203      	movs	r2, #3
 8002a82:	400a      	ands	r2, r1
 8002a84:	00d2      	lsls	r2, r2, #3
 8002a86:	21ff      	movs	r1, #255	; 0xff
 8002a88:	4091      	lsls	r1, r2
 8002a8a:	000a      	movs	r2, r1
 8002a8c:	43d2      	mvns	r2, r2
 8002a8e:	401a      	ands	r2, r3
 8002a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	019b      	lsls	r3, r3, #6
 8002a96:	22ff      	movs	r2, #255	; 0xff
 8002a98:	401a      	ands	r2, r3
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	4003      	ands	r3, r0
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aa8:	4809      	ldr	r0, [pc, #36]	; (8002ad0 <__NVIC_SetPriority+0xd8>)
 8002aaa:	1dfb      	adds	r3, r7, #7
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	001c      	movs	r4, r3
 8002ab0:	230f      	movs	r3, #15
 8002ab2:	4023      	ands	r3, r4
 8002ab4:	3b08      	subs	r3, #8
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	3306      	adds	r3, #6
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	18c3      	adds	r3, r0, r3
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b003      	add	sp, #12
 8002aca:	bd90      	pop	{r4, r7, pc}
 8002acc:	e000e100 	.word	0xe000e100
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	4a0c      	ldr	r2, [pc, #48]	; (8002b14 <SysTick_Config+0x40>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e010      	b.n	8002b0c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <SysTick_Config+0x44>)
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	3a01      	subs	r2, #1
 8002af0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af2:	2301      	movs	r3, #1
 8002af4:	425b      	negs	r3, r3
 8002af6:	2103      	movs	r1, #3
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff ff7d 	bl	80029f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <SysTick_Config+0x44>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <SysTick_Config+0x44>)
 8002b06:	2207      	movs	r2, #7
 8002b08:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	00ffffff 	.word	0x00ffffff
 8002b18:	e000e010 	.word	0xe000e010

08002b1c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	210f      	movs	r1, #15
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	1c02      	adds	r2, r0, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	b25b      	sxtb	r3, r3
 8002b36:	0011      	movs	r1, r2
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7ff ff5d 	bl	80029f8 <__NVIC_SetPriority>
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b004      	add	sp, #16
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b52:	1dfb      	adds	r3, r7, #7
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7ff ff33 	bl	80029c4 <__NVIC_EnableIRQ>
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b002      	add	sp, #8
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f7ff ffaf 	bl	8002ad4 <SysTick_Config>
 8002b76:	0003      	movs	r3, r0
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b002      	add	sp, #8
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e036      	b.n	8002c04 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2221      	movs	r2, #33	; 0x21
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_DMA_Init+0x8c>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 f98c 	bl	8002f04 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2221      	movs	r2, #33	; 0x21
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	2100      	movs	r1, #0
 8002c00:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}  
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b004      	add	sp, #16
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	ffffc00f 	.word	0xffffc00f

08002c10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002c1e:	2317      	movs	r3, #23
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	5c9b      	ldrb	r3, [r3, r2]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_DMA_Start_IT+0x24>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e04f      	b.n	8002cd4 <HAL_DMA_Start_IT+0xc4>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	2101      	movs	r1, #1
 8002c3a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2221      	movs	r2, #33	; 0x21
 8002c40:	5c9b      	ldrb	r3, [r3, r2]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d13a      	bne.n	8002cbe <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2221      	movs	r2, #33	; 0x21
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	438a      	bics	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f91d 	bl	8002eac <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	210e      	movs	r1, #14
 8002c86:	430a      	orrs	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e00f      	b.n	8002cac <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	210a      	movs	r1, #10
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2104      	movs	r1, #4
 8002ca8:	438a      	bics	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e007      	b.n	8002cce <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002cc6:	2317      	movs	r3, #23
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	2202      	movs	r2, #2
 8002ccc:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002cce:	2317      	movs	r3, #23
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	781b      	ldrb	r3, [r3, #0]
} 
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b006      	add	sp, #24
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2221      	movs	r2, #33	; 0x21
 8002cf0:	5c9b      	ldrb	r3, [r3, r2]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d007      	beq.n	8002d08 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cfe:	230f      	movs	r3, #15
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e028      	b.n	8002d5a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	210e      	movs	r1, #14
 8002d14:	438a      	bics	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2101      	movs	r1, #1
 8002d24:	438a      	bics	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	2101      	movs	r1, #1
 8002d32:	4091      	lsls	r1, r2
 8002d34:	000a      	movs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2221      	movs	r2, #33	; 0x21
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	2100      	movs	r1, #0
 8002d46:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d004      	beq.n	8002d5a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	0010      	movs	r0, r2
 8002d58:	4798      	blx	r3
    } 
  }
  return status;
 8002d5a:	230f      	movs	r3, #15
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b004      	add	sp, #16
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	2204      	movs	r2, #4
 8002d86:	409a      	lsls	r2, r3
 8002d88:	0013      	movs	r3, r2
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d024      	beq.n	8002dda <HAL_DMA_IRQHandler+0x72>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2204      	movs	r2, #4
 8002d94:	4013      	ands	r3, r2
 8002d96:	d020      	beq.n	8002dda <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	4013      	ands	r3, r2
 8002da2:	d107      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2104      	movs	r1, #4
 8002db0:	438a      	bics	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbc:	2104      	movs	r1, #4
 8002dbe:	4091      	lsls	r1, r2
 8002dc0:	000a      	movs	r2, r1
 8002dc2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d100      	bne.n	8002dce <HAL_DMA_IRQHandler+0x66>
 8002dcc:	e06a      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	0010      	movs	r0, r2
 8002dd6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002dd8:	e064      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2202      	movs	r2, #2
 8002de0:	409a      	lsls	r2, r3
 8002de2:	0013      	movs	r3, r2
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4013      	ands	r3, r2
 8002de8:	d02b      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xda>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2202      	movs	r2, #2
 8002dee:	4013      	ands	r3, r2
 8002df0:	d027      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d10b      	bne.n	8002e16 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	210a      	movs	r1, #10
 8002e0a:	438a      	bics	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2221      	movs	r2, #33	; 0x21
 8002e12:	2101      	movs	r1, #1
 8002e14:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	2102      	movs	r1, #2
 8002e20:	4091      	lsls	r1, r2
 8002e22:	000a      	movs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d036      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	0010      	movs	r0, r2
 8002e3e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e40:	e030      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2208      	movs	r2, #8
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	0013      	movs	r3, r2
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d028      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x13c>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2208      	movs	r2, #8
 8002e56:	4013      	ands	r3, r2
 8002e58:	d024      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	210e      	movs	r1, #14
 8002e66:	438a      	bics	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	2101      	movs	r1, #1
 8002e74:	4091      	lsls	r1, r2
 8002e76:	000a      	movs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2221      	movs	r2, #33	; 0x21
 8002e84:	2101      	movs	r1, #1
 8002e86:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	0010      	movs	r0, r2
 8002ea0:	4798      	blx	r3
    }
   }
}  
 8002ea2:	e7ff      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x13c>
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b004      	add	sp, #16
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	4091      	lsls	r1, r2
 8002ec6:	000a      	movs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d108      	bne.n	8002eec <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eea:	e007      	b.n	8002efc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b004      	add	sp, #16
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <DMA_CalcBaseAndBitshift+0x30>)
 8002f12:	4694      	mov	ip, r2
 8002f14:	4463      	add	r3, ip
 8002f16:	2114      	movs	r1, #20
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7fd f8f5 	bl	8000108 <__udivsi3>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	009a      	lsls	r2, r3, #2
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a03      	ldr	r2, [pc, #12]	; (8002f38 <DMA_CalcBaseAndBitshift+0x34>)
 8002f2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	bffdfff8 	.word	0xbffdfff8
 8002f38:	40020000 	.word	0x40020000

08002f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4a:	e14f      	b.n	80031ec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4091      	lsls	r1, r2
 8002f56:	000a      	movs	r2, r1
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d100      	bne.n	8002f64 <HAL_GPIO_Init+0x28>
 8002f62:	e140      	b.n	80031e6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d00b      	beq.n	8002f84 <HAL_GPIO_Init+0x48>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d007      	beq.n	8002f84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f78:	2b11      	cmp	r3, #17
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b12      	cmp	r3, #18
 8002f82:	d130      	bne.n	8002fe6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	409a      	lsls	r2, r3
 8002f92:	0013      	movs	r3, r2
 8002f94:	43da      	mvns	r2, r3
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	0013      	movs	r3, r2
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fba:	2201      	movs	r2, #1
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	0013      	movs	r3, r2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	0013      	movs	r3, r2
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	409a      	lsls	r2, r3
 8003008:	0013      	movs	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0xea>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b12      	cmp	r3, #18
 8003024:	d123      	bne.n	800306e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	58d3      	ldr	r3, [r2, r3]
 8003032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2207      	movs	r2, #7
 8003038:	4013      	ands	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	220f      	movs	r2, #15
 800303e:	409a      	lsls	r2, r3
 8003040:	0013      	movs	r3, r2
 8003042:	43da      	mvns	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2107      	movs	r1, #7
 8003052:	400b      	ands	r3, r1
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	409a      	lsls	r2, r3
 8003058:	0013      	movs	r3, r2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	08da      	lsrs	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3208      	adds	r2, #8
 8003068:	0092      	lsls	r2, r2, #2
 800306a:	6939      	ldr	r1, [r7, #16]
 800306c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	2203      	movs	r2, #3
 800307a:	409a      	lsls	r2, r3
 800307c:	0013      	movs	r3, r2
 800307e:	43da      	mvns	r2, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	401a      	ands	r2, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	409a      	lsls	r2, r3
 8003094:	0013      	movs	r3, r2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	055b      	lsls	r3, r3, #21
 80030aa:	4013      	ands	r3, r2
 80030ac:	d100      	bne.n	80030b0 <HAL_GPIO_Init+0x174>
 80030ae:	e09a      	b.n	80031e6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b0:	4b54      	ldr	r3, [pc, #336]	; (8003204 <HAL_GPIO_Init+0x2c8>)
 80030b2:	699a      	ldr	r2, [r3, #24]
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_GPIO_Init+0x2c8>)
 80030b6:	2101      	movs	r1, #1
 80030b8:	430a      	orrs	r2, r1
 80030ba:	619a      	str	r2, [r3, #24]
 80030bc:	4b51      	ldr	r3, [pc, #324]	; (8003204 <HAL_GPIO_Init+0x2c8>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2201      	movs	r2, #1
 80030c2:	4013      	ands	r3, r2
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030c8:	4a4f      	ldr	r2, [pc, #316]	; (8003208 <HAL_GPIO_Init+0x2cc>)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	089b      	lsrs	r3, r3, #2
 80030ce:	3302      	adds	r3, #2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	589b      	ldr	r3, [r3, r2]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2203      	movs	r2, #3
 80030da:	4013      	ands	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	220f      	movs	r2, #15
 80030e0:	409a      	lsls	r2, r3
 80030e2:	0013      	movs	r3, r2
 80030e4:	43da      	mvns	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	2390      	movs	r3, #144	; 0x90
 80030f0:	05db      	lsls	r3, r3, #23
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d013      	beq.n	800311e <HAL_GPIO_Init+0x1e2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a44      	ldr	r2, [pc, #272]	; (800320c <HAL_GPIO_Init+0x2d0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00d      	beq.n	800311a <HAL_GPIO_Init+0x1de>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a43      	ldr	r2, [pc, #268]	; (8003210 <HAL_GPIO_Init+0x2d4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <HAL_GPIO_Init+0x1da>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a42      	ldr	r2, [pc, #264]	; (8003214 <HAL_GPIO_Init+0x2d8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_GPIO_Init+0x1d6>
 800310e:	2303      	movs	r3, #3
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x1e4>
 8003112:	2305      	movs	r3, #5
 8003114:	e004      	b.n	8003120 <HAL_GPIO_Init+0x1e4>
 8003116:	2302      	movs	r3, #2
 8003118:	e002      	b.n	8003120 <HAL_GPIO_Init+0x1e4>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_GPIO_Init+0x1e4>
 800311e:	2300      	movs	r3, #0
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	2103      	movs	r1, #3
 8003124:	400a      	ands	r2, r1
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4093      	lsls	r3, r2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003130:	4935      	ldr	r1, [pc, #212]	; (8003208 <HAL_GPIO_Init+0x2cc>)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_GPIO_Init+0x2dc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	43da      	mvns	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	025b      	lsls	r3, r3, #9
 8003156:	4013      	ands	r3, r2
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003162:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_GPIO_Init+0x2dc>)
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003168:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <HAL_GPIO_Init+0x2dc>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	43da      	mvns	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	029b      	lsls	r3, r3, #10
 8003180:	4013      	ands	r3, r2
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800318c:	4b22      	ldr	r3, [pc, #136]	; (8003218 <HAL_GPIO_Init+0x2dc>)
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003192:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_GPIO_Init+0x2dc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	43da      	mvns	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	035b      	lsls	r3, r3, #13
 80031aa:	4013      	ands	r3, r2
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <HAL_GPIO_Init+0x2dc>)
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80031bc:	4b16      	ldr	r3, [pc, #88]	; (8003218 <HAL_GPIO_Init+0x2dc>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	43da      	mvns	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	039b      	lsls	r3, r3, #14
 80031d4:	4013      	ands	r3, r2
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031e0:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <HAL_GPIO_Init+0x2dc>)
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	3301      	adds	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	40da      	lsrs	r2, r3
 80031f4:	1e13      	subs	r3, r2, #0
 80031f6:	d000      	beq.n	80031fa <HAL_GPIO_Init+0x2be>
 80031f8:	e6a8      	b.n	8002f4c <HAL_GPIO_Init+0x10>
  } 
}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b006      	add	sp, #24
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	40021000 	.word	0x40021000
 8003208:	40010000 	.word	0x40010000
 800320c:	48000400 	.word	0x48000400
 8003210:	48000800 	.word	0x48000800
 8003214:	48000c00 	.word	0x48000c00
 8003218:	40010400 	.word	0x40010400

0800321c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	0008      	movs	r0, r1
 8003226:	0011      	movs	r1, r2
 8003228:	1cbb      	adds	r3, r7, #2
 800322a:	1c02      	adds	r2, r0, #0
 800322c:	801a      	strh	r2, [r3, #0]
 800322e:	1c7b      	adds	r3, r7, #1
 8003230:	1c0a      	adds	r2, r1, #0
 8003232:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003234:	1c7b      	adds	r3, r7, #1
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d004      	beq.n	8003246 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800323c:	1cbb      	adds	r3, r7, #2
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003244:	e003      	b.n	800324e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003246:	1cbb      	adds	r3, r7, #2
 8003248:	881a      	ldrh	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b002      	add	sp, #8
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	0002      	movs	r2, r0
 8003260:	1dbb      	adds	r3, r7, #6
 8003262:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	1dba      	adds	r2, r7, #6
 800326a:	8812      	ldrh	r2, [r2, #0]
 800326c:	4013      	ands	r3, r2
 800326e:	d008      	beq.n	8003282 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003272:	1dba      	adds	r2, r7, #6
 8003274:	8812      	ldrh	r2, [r2, #0]
 8003276:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003278:	1dbb      	adds	r3, r7, #6
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	0018      	movs	r0, r3
 800327e:	f000 f807 	bl	8003290 <HAL_GPIO_EXTI_Callback>
  }
}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	b002      	add	sp, #8
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	40010400 	.word	0x40010400

08003290 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	0002      	movs	r2, r0
 8003298:	1dbb      	adds	r3, r7, #6
 800329a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	b002      	add	sp, #8
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e303      	b.n	80038be <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2201      	movs	r2, #1
 80032bc:	4013      	ands	r3, r2
 80032be:	d100      	bne.n	80032c2 <HAL_RCC_OscConfig+0x1e>
 80032c0:	e08d      	b.n	80033de <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032c2:	4bc4      	ldr	r3, [pc, #784]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	220c      	movs	r2, #12
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d00e      	beq.n	80032ec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032ce:	4bc1      	ldr	r3, [pc, #772]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	220c      	movs	r2, #12
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d116      	bne.n	8003308 <HAL_RCC_OscConfig+0x64>
 80032da:	4bbe      	ldr	r3, [pc, #760]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	025b      	lsls	r3, r3, #9
 80032e2:	401a      	ands	r2, r3
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	025b      	lsls	r3, r3, #9
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d10d      	bne.n	8003308 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	4bb9      	ldr	r3, [pc, #740]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	029b      	lsls	r3, r3, #10
 80032f4:	4013      	ands	r3, r2
 80032f6:	d100      	bne.n	80032fa <HAL_RCC_OscConfig+0x56>
 80032f8:	e070      	b.n	80033dc <HAL_RCC_OscConfig+0x138>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d000      	beq.n	8003304 <HAL_RCC_OscConfig+0x60>
 8003302:	e06b      	b.n	80033dc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e2da      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x7c>
 8003310:	4bb0      	ldr	r3, [pc, #704]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4baf      	ldr	r3, [pc, #700]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	0249      	lsls	r1, r1, #9
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e02f      	b.n	8003380 <HAL_RCC_OscConfig+0xdc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10c      	bne.n	8003342 <HAL_RCC_OscConfig+0x9e>
 8003328:	4baa      	ldr	r3, [pc, #680]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4ba9      	ldr	r3, [pc, #676]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800332e:	49aa      	ldr	r1, [pc, #680]	; (80035d8 <HAL_RCC_OscConfig+0x334>)
 8003330:	400a      	ands	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	4ba7      	ldr	r3, [pc, #668]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4ba6      	ldr	r3, [pc, #664]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800333a:	49a8      	ldr	r1, [pc, #672]	; (80035dc <HAL_RCC_OscConfig+0x338>)
 800333c:	400a      	ands	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e01e      	b.n	8003380 <HAL_RCC_OscConfig+0xdc>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b05      	cmp	r3, #5
 8003348:	d10e      	bne.n	8003368 <HAL_RCC_OscConfig+0xc4>
 800334a:	4ba2      	ldr	r3, [pc, #648]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4ba1      	ldr	r3, [pc, #644]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	02c9      	lsls	r1, r1, #11
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	4b9e      	ldr	r3, [pc, #632]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b9d      	ldr	r3, [pc, #628]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800335e:	2180      	movs	r1, #128	; 0x80
 8003360:	0249      	lsls	r1, r1, #9
 8003362:	430a      	orrs	r2, r1
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0xdc>
 8003368:	4b9a      	ldr	r3, [pc, #616]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b99      	ldr	r3, [pc, #612]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800336e:	499a      	ldr	r1, [pc, #616]	; (80035d8 <HAL_RCC_OscConfig+0x334>)
 8003370:	400a      	ands	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	4b97      	ldr	r3, [pc, #604]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b96      	ldr	r3, [pc, #600]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800337a:	4998      	ldr	r1, [pc, #608]	; (80035dc <HAL_RCC_OscConfig+0x338>)
 800337c:	400a      	ands	r2, r1
 800337e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d014      	beq.n	80033b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fe fe6a 	bl	8002060 <HAL_GetTick>
 800338c:	0003      	movs	r3, r0
 800338e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003392:	f7fe fe65 	bl	8002060 <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b64      	cmp	r3, #100	; 0x64
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e28c      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a4:	4b8b      	ldr	r3, [pc, #556]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	029b      	lsls	r3, r3, #10
 80033ac:	4013      	ands	r3, r2
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0xee>
 80033b0:	e015      	b.n	80033de <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7fe fe55 	bl	8002060 <HAL_GetTick>
 80033b6:	0003      	movs	r3, r0
 80033b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe fe50 	bl	8002060 <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e277      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	4b81      	ldr	r3, [pc, #516]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	029b      	lsls	r3, r3, #10
 80033d6:	4013      	ands	r3, r2
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x118>
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2202      	movs	r2, #2
 80033e4:	4013      	ands	r3, r2
 80033e6:	d100      	bne.n	80033ea <HAL_RCC_OscConfig+0x146>
 80033e8:	e069      	b.n	80034be <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033ea:	4b7a      	ldr	r3, [pc, #488]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	220c      	movs	r2, #12
 80033f0:	4013      	ands	r3, r2
 80033f2:	d00b      	beq.n	800340c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033f4:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	220c      	movs	r2, #12
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d11c      	bne.n	800343a <HAL_RCC_OscConfig+0x196>
 8003400:	4b74      	ldr	r3, [pc, #464]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	025b      	lsls	r3, r3, #9
 8003408:	4013      	ands	r3, r2
 800340a:	d116      	bne.n	800343a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340c:	4b71      	ldr	r3, [pc, #452]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2202      	movs	r2, #2
 8003412:	4013      	ands	r3, r2
 8003414:	d005      	beq.n	8003422 <HAL_RCC_OscConfig+0x17e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e24d      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003422:	4b6c      	ldr	r3, [pc, #432]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	22f8      	movs	r2, #248	; 0xf8
 8003428:	4393      	bics	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	00da      	lsls	r2, r3, #3
 8003432:	4b68      	ldr	r3, [pc, #416]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003434:	430a      	orrs	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003438:	e041      	b.n	80034be <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d024      	beq.n	800348c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003442:	4b64      	ldr	r3, [pc, #400]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003448:	2101      	movs	r1, #1
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fe fe07 	bl	8002060 <HAL_GetTick>
 8003452:	0003      	movs	r3, r0
 8003454:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003458:	f7fe fe02 	bl	8002060 <HAL_GetTick>
 800345c:	0002      	movs	r2, r0
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e229      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b5a      	ldr	r3, [pc, #360]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2202      	movs	r2, #2
 8003470:	4013      	ands	r3, r2
 8003472:	d0f1      	beq.n	8003458 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003474:	4b57      	ldr	r3, [pc, #348]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	22f8      	movs	r2, #248	; 0xf8
 800347a:	4393      	bics	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00da      	lsls	r2, r3, #3
 8003484:	4b53      	ldr	r3, [pc, #332]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003486:	430a      	orrs	r2, r1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e018      	b.n	80034be <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800348c:	4b51      	ldr	r3, [pc, #324]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003492:	2101      	movs	r1, #1
 8003494:	438a      	bics	r2, r1
 8003496:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe fde2 	bl	8002060 <HAL_GetTick>
 800349c:	0003      	movs	r3, r0
 800349e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a2:	f7fe fddd 	bl	8002060 <HAL_GetTick>
 80034a6:	0002      	movs	r2, r0
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e204      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b4:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2202      	movs	r2, #2
 80034ba:	4013      	ands	r3, r2
 80034bc:	d1f1      	bne.n	80034a2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2208      	movs	r2, #8
 80034c4:	4013      	ands	r3, r2
 80034c6:	d036      	beq.n	8003536 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d019      	beq.n	8003504 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d0:	4b40      	ldr	r3, [pc, #256]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80034d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d4:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80034d6:	2101      	movs	r1, #1
 80034d8:	430a      	orrs	r2, r1
 80034da:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034dc:	f7fe fdc0 	bl	8002060 <HAL_GetTick>
 80034e0:	0003      	movs	r3, r0
 80034e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e6:	f7fe fdbb 	bl	8002060 <HAL_GetTick>
 80034ea:	0002      	movs	r2, r0
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e1e2      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f8:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	2202      	movs	r2, #2
 80034fe:	4013      	ands	r3, r2
 8003500:	d0f1      	beq.n	80034e6 <HAL_RCC_OscConfig+0x242>
 8003502:	e018      	b.n	8003536 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003504:	4b33      	ldr	r3, [pc, #204]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003508:	4b32      	ldr	r3, [pc, #200]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800350a:	2101      	movs	r1, #1
 800350c:	438a      	bics	r2, r1
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003510:	f7fe fda6 	bl	8002060 <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800351a:	f7fe fda1 	bl	8002060 <HAL_GetTick>
 800351e:	0002      	movs	r2, r0
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e1c8      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	2202      	movs	r2, #2
 8003532:	4013      	ands	r3, r2
 8003534:	d1f1      	bne.n	800351a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2204      	movs	r2, #4
 800353c:	4013      	ands	r3, r2
 800353e:	d100      	bne.n	8003542 <HAL_RCC_OscConfig+0x29e>
 8003540:	e0b6      	b.n	80036b0 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003542:	231f      	movs	r3, #31
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	055b      	lsls	r3, r3, #21
 8003552:	4013      	ands	r3, r2
 8003554:	d111      	bne.n	800357a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003556:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	0549      	lsls	r1, r1, #21
 8003560:	430a      	orrs	r2, r1
 8003562:	61da      	str	r2, [r3, #28]
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	055b      	lsls	r3, r3, #21
 800356c:	4013      	ands	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003572:	231f      	movs	r3, #31
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_RCC_OscConfig+0x33c>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4013      	ands	r3, r2
 8003584:	d11a      	bne.n	80035bc <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <HAL_RCC_OscConfig+0x33c>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <HAL_RCC_OscConfig+0x33c>)
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	0049      	lsls	r1, r1, #1
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003594:	f7fe fd64 	bl	8002060 <HAL_GetTick>
 8003598:	0003      	movs	r3, r0
 800359a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359e:	f7fe fd5f 	bl	8002060 <HAL_GetTick>
 80035a2:	0002      	movs	r2, r0
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b64      	cmp	r3, #100	; 0x64
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e186      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCC_OscConfig+0x33c>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4013      	ands	r3, r2
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d10f      	bne.n	80035e4 <HAL_RCC_OscConfig+0x340>
 80035c4:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80035c6:	6a1a      	ldr	r2, [r3, #32]
 80035c8:	4b02      	ldr	r3, [pc, #8]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80035ca:	2101      	movs	r1, #1
 80035cc:	430a      	orrs	r2, r1
 80035ce:	621a      	str	r2, [r3, #32]
 80035d0:	e036      	b.n	8003640 <HAL_RCC_OscConfig+0x39c>
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40021000 	.word	0x40021000
 80035d8:	fffeffff 	.word	0xfffeffff
 80035dc:	fffbffff 	.word	0xfffbffff
 80035e0:	40007000 	.word	0x40007000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10c      	bne.n	8003606 <HAL_RCC_OscConfig+0x362>
 80035ec:	4bb6      	ldr	r3, [pc, #728]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80035ee:	6a1a      	ldr	r2, [r3, #32]
 80035f0:	4bb5      	ldr	r3, [pc, #724]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80035f2:	2101      	movs	r1, #1
 80035f4:	438a      	bics	r2, r1
 80035f6:	621a      	str	r2, [r3, #32]
 80035f8:	4bb3      	ldr	r3, [pc, #716]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80035fa:	6a1a      	ldr	r2, [r3, #32]
 80035fc:	4bb2      	ldr	r3, [pc, #712]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80035fe:	2104      	movs	r1, #4
 8003600:	438a      	bics	r2, r1
 8003602:	621a      	str	r2, [r3, #32]
 8003604:	e01c      	b.n	8003640 <HAL_RCC_OscConfig+0x39c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b05      	cmp	r3, #5
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x384>
 800360e:	4bae      	ldr	r3, [pc, #696]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003610:	6a1a      	ldr	r2, [r3, #32]
 8003612:	4bad      	ldr	r3, [pc, #692]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003614:	2104      	movs	r1, #4
 8003616:	430a      	orrs	r2, r1
 8003618:	621a      	str	r2, [r3, #32]
 800361a:	4bab      	ldr	r3, [pc, #684]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 800361c:	6a1a      	ldr	r2, [r3, #32]
 800361e:	4baa      	ldr	r3, [pc, #680]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003620:	2101      	movs	r1, #1
 8003622:	430a      	orrs	r2, r1
 8003624:	621a      	str	r2, [r3, #32]
 8003626:	e00b      	b.n	8003640 <HAL_RCC_OscConfig+0x39c>
 8003628:	4ba7      	ldr	r3, [pc, #668]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	4ba6      	ldr	r3, [pc, #664]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 800362e:	2101      	movs	r1, #1
 8003630:	438a      	bics	r2, r1
 8003632:	621a      	str	r2, [r3, #32]
 8003634:	4ba4      	ldr	r3, [pc, #656]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	4ba3      	ldr	r3, [pc, #652]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 800363a:	2104      	movs	r1, #4
 800363c:	438a      	bics	r2, r1
 800363e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d014      	beq.n	8003672 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003648:	f7fe fd0a 	bl	8002060 <HAL_GetTick>
 800364c:	0003      	movs	r3, r0
 800364e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	e009      	b.n	8003666 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fe fd05 	bl	8002060 <HAL_GetTick>
 8003656:	0002      	movs	r2, r0
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	4a9b      	ldr	r2, [pc, #620]	; (80038cc <HAL_RCC_OscConfig+0x628>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e12b      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003666:	4b98      	ldr	r3, [pc, #608]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	2202      	movs	r2, #2
 800366c:	4013      	ands	r3, r2
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x3ae>
 8003670:	e013      	b.n	800369a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7fe fcf5 	bl	8002060 <HAL_GetTick>
 8003676:	0003      	movs	r3, r0
 8003678:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367a:	e009      	b.n	8003690 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7fe fcf0 	bl	8002060 <HAL_GetTick>
 8003680:	0002      	movs	r2, r0
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	4a91      	ldr	r2, [pc, #580]	; (80038cc <HAL_RCC_OscConfig+0x628>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e116      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003690:	4b8d      	ldr	r3, [pc, #564]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	2202      	movs	r2, #2
 8003696:	4013      	ands	r3, r2
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800369a:	231f      	movs	r3, #31
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d105      	bne.n	80036b0 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a4:	4b88      	ldr	r3, [pc, #544]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	4b87      	ldr	r3, [pc, #540]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80036aa:	4989      	ldr	r1, [pc, #548]	; (80038d0 <HAL_RCC_OscConfig+0x62c>)
 80036ac:	400a      	ands	r2, r1
 80036ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2210      	movs	r2, #16
 80036b6:	4013      	ands	r3, r2
 80036b8:	d063      	beq.n	8003782 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d12a      	bne.n	8003718 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80036c2:	4b81      	ldr	r3, [pc, #516]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80036c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c6:	4b80      	ldr	r3, [pc, #512]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80036c8:	2104      	movs	r1, #4
 80036ca:	430a      	orrs	r2, r1
 80036cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80036ce:	4b7e      	ldr	r3, [pc, #504]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80036d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d2:	4b7d      	ldr	r3, [pc, #500]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80036d4:	2101      	movs	r1, #1
 80036d6:	430a      	orrs	r2, r1
 80036d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036da:	f7fe fcc1 	bl	8002060 <HAL_GetTick>
 80036de:	0003      	movs	r3, r0
 80036e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80036e4:	f7fe fcbc 	bl	8002060 <HAL_GetTick>
 80036e8:	0002      	movs	r2, r0
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0e3      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036f6:	4b74      	ldr	r3, [pc, #464]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80036f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	d0f1      	beq.n	80036e4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003700:	4b71      	ldr	r3, [pc, #452]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003704:	22f8      	movs	r2, #248	; 0xf8
 8003706:	4393      	bics	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	00da      	lsls	r2, r3, #3
 8003710:	4b6d      	ldr	r3, [pc, #436]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003712:	430a      	orrs	r2, r1
 8003714:	635a      	str	r2, [r3, #52]	; 0x34
 8003716:	e034      	b.n	8003782 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	3305      	adds	r3, #5
 800371e:	d111      	bne.n	8003744 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003720:	4b69      	ldr	r3, [pc, #420]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003724:	4b68      	ldr	r3, [pc, #416]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003726:	2104      	movs	r1, #4
 8003728:	438a      	bics	r2, r1
 800372a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800372c:	4b66      	ldr	r3, [pc, #408]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	22f8      	movs	r2, #248	; 0xf8
 8003732:	4393      	bics	r3, r2
 8003734:	0019      	movs	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	00da      	lsls	r2, r3, #3
 800373c:	4b62      	ldr	r3, [pc, #392]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 800373e:	430a      	orrs	r2, r1
 8003740:	635a      	str	r2, [r3, #52]	; 0x34
 8003742:	e01e      	b.n	8003782 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003744:	4b60      	ldr	r3, [pc, #384]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003748:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 800374a:	2104      	movs	r1, #4
 800374c:	430a      	orrs	r2, r1
 800374e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003750:	4b5d      	ldr	r3, [pc, #372]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003754:	4b5c      	ldr	r3, [pc, #368]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003756:	2101      	movs	r1, #1
 8003758:	438a      	bics	r2, r1
 800375a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375c:	f7fe fc80 	bl	8002060 <HAL_GetTick>
 8003760:	0003      	movs	r3, r0
 8003762:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003766:	f7fe fc7b 	bl	8002060 <HAL_GetTick>
 800376a:	0002      	movs	r2, r0
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0a2      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003778:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 800377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377c:	2202      	movs	r2, #2
 800377e:	4013      	ands	r3, r2
 8003780:	d1f1      	bne.n	8003766 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d100      	bne.n	800378c <HAL_RCC_OscConfig+0x4e8>
 800378a:	e097      	b.n	80038bc <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800378c:	4b4e      	ldr	r3, [pc, #312]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	220c      	movs	r2, #12
 8003792:	4013      	ands	r3, r2
 8003794:	2b08      	cmp	r3, #8
 8003796:	d100      	bne.n	800379a <HAL_RCC_OscConfig+0x4f6>
 8003798:	e06b      	b.n	8003872 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d14c      	bne.n	800383c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b48      	ldr	r3, [pc, #288]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80037a8:	494a      	ldr	r1, [pc, #296]	; (80038d4 <HAL_RCC_OscConfig+0x630>)
 80037aa:	400a      	ands	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fe fc57 	bl	8002060 <HAL_GetTick>
 80037b2:	0003      	movs	r3, r0
 80037b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe fc52 	bl	8002060 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e079      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ca:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	049b      	lsls	r3, r3, #18
 80037d2:	4013      	ands	r3, r2
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d6:	4b3c      	ldr	r3, [pc, #240]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	220f      	movs	r2, #15
 80037dc:	4393      	bics	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e4:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80037e6:	430a      	orrs	r2, r1
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ea:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4a3a      	ldr	r2, [pc, #232]	; (80038d8 <HAL_RCC_OscConfig+0x634>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	431a      	orrs	r2, r3
 80037fe:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003804:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 800380a:	2180      	movs	r1, #128	; 0x80
 800380c:	0449      	lsls	r1, r1, #17
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe fc25 	bl	8002060 <HAL_GetTick>
 8003816:	0003      	movs	r3, r0
 8003818:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381c:	f7fe fc20 	bl	8002060 <HAL_GetTick>
 8003820:	0002      	movs	r2, r0
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e047      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800382e:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	049b      	lsls	r3, r3, #18
 8003836:	4013      	ands	r3, r2
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x578>
 800383a:	e03f      	b.n	80038bc <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383c:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003842:	4924      	ldr	r1, [pc, #144]	; (80038d4 <HAL_RCC_OscConfig+0x630>)
 8003844:	400a      	ands	r2, r1
 8003846:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fe fc0a 	bl	8002060 <HAL_GetTick>
 800384c:	0003      	movs	r3, r0
 800384e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003852:	f7fe fc05 	bl	8002060 <HAL_GetTick>
 8003856:	0002      	movs	r2, r0
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e02c      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003864:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	049b      	lsls	r3, r3, #18
 800386c:	4013      	ands	r3, r2
 800386e:	d1f0      	bne.n	8003852 <HAL_RCC_OscConfig+0x5ae>
 8003870:	e024      	b.n	80038bc <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e01f      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800387e:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <HAL_RCC_OscConfig+0x624>)
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	025b      	lsls	r3, r3, #9
 8003890:	401a      	ands	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	429a      	cmp	r2, r3
 8003898:	d10e      	bne.n	80038b8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	220f      	movs	r2, #15
 800389e:	401a      	ands	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	23f0      	movs	r3, #240	; 0xf0
 80038ac:	039b      	lsls	r3, r3, #14
 80038ae:	401a      	ands	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b008      	add	sp, #32
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	40021000 	.word	0x40021000
 80038cc:	00001388 	.word	0x00001388
 80038d0:	efffffff 	.word	0xefffffff
 80038d4:	feffffff 	.word	0xfeffffff
 80038d8:	ffc2ffff 	.word	0xffc2ffff

080038dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0b3      	b.n	8003a58 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f0:	4b5b      	ldr	r3, [pc, #364]	; (8003a60 <HAL_RCC_ClockConfig+0x184>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2201      	movs	r2, #1
 80038f6:	4013      	ands	r3, r2
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d911      	bls.n	8003922 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b58      	ldr	r3, [pc, #352]	; (8003a60 <HAL_RCC_ClockConfig+0x184>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2201      	movs	r2, #1
 8003904:	4393      	bics	r3, r2
 8003906:	0019      	movs	r1, r3
 8003908:	4b55      	ldr	r3, [pc, #340]	; (8003a60 <HAL_RCC_ClockConfig+0x184>)
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003910:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_ClockConfig+0x184>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2201      	movs	r2, #1
 8003916:	4013      	ands	r3, r2
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d001      	beq.n	8003922 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e09a      	b.n	8003a58 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2202      	movs	r2, #2
 8003928:	4013      	ands	r3, r2
 800392a:	d015      	beq.n	8003958 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2204      	movs	r2, #4
 8003932:	4013      	ands	r3, r2
 8003934:	d006      	beq.n	8003944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003936:	4b4b      	ldr	r3, [pc, #300]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	4b4a      	ldr	r3, [pc, #296]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 800393c:	21e0      	movs	r1, #224	; 0xe0
 800393e:	00c9      	lsls	r1, r1, #3
 8003940:	430a      	orrs	r2, r1
 8003942:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003944:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	22f0      	movs	r2, #240	; 0xf0
 800394a:	4393      	bics	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	4b44      	ldr	r3, [pc, #272]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2201      	movs	r2, #1
 800395e:	4013      	ands	r3, r2
 8003960:	d040      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	4b3e      	ldr	r3, [pc, #248]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	029b      	lsls	r3, r3, #10
 8003972:	4013      	ands	r3, r2
 8003974:	d114      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e06e      	b.n	8003a58 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	049b      	lsls	r3, r3, #18
 800398a:	4013      	ands	r3, r2
 800398c:	d108      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e062      	b.n	8003a58 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	4b34      	ldr	r3, [pc, #208]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2202      	movs	r2, #2
 8003998:	4013      	ands	r3, r2
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e05b      	b.n	8003a58 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a0:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2203      	movs	r2, #3
 80039a6:	4393      	bics	r3, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b4:	f7fe fb54 	bl	8002060 <HAL_GetTick>
 80039b8:	0003      	movs	r3, r0
 80039ba:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039bc:	e009      	b.n	80039d2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039be:	f7fe fb4f 	bl	8002060 <HAL_GetTick>
 80039c2:	0002      	movs	r2, r0
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <HAL_RCC_ClockConfig+0x18c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e042      	b.n	8003a58 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	220c      	movs	r2, #12
 80039d8:	401a      	ands	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1ec      	bne.n	80039be <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e4:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <HAL_RCC_ClockConfig+0x184>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	4013      	ands	r3, r2
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d211      	bcs.n	8003a16 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_RCC_ClockConfig+0x184>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2201      	movs	r2, #1
 80039f8:	4393      	bics	r3, r2
 80039fa:	0019      	movs	r1, r3
 80039fc:	4b18      	ldr	r3, [pc, #96]	; (8003a60 <HAL_RCC_ClockConfig+0x184>)
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a04:	4b16      	ldr	r3, [pc, #88]	; (8003a60 <HAL_RCC_ClockConfig+0x184>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e020      	b.n	8003a58 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d009      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a11      	ldr	r2, [pc, #68]	; (8003a6c <HAL_RCC_ClockConfig+0x190>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a34:	f000 f820 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8003a38:	0001      	movs	r1, r0
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <HAL_RCC_ClockConfig+0x188>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	220f      	movs	r2, #15
 8003a42:	4013      	ands	r3, r2
 8003a44:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <HAL_RCC_ClockConfig+0x194>)
 8003a46:	5cd3      	ldrb	r3, [r2, r3]
 8003a48:	000a      	movs	r2, r1
 8003a4a:	40da      	lsrs	r2, r3
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <HAL_RCC_ClockConfig+0x198>)
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a50:	2000      	movs	r0, #0
 8003a52:	f7fe fabf 	bl	8001fd4 <HAL_InitTick>
  
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	0018      	movs	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b004      	add	sp, #16
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40022000 	.word	0x40022000
 8003a64:	40021000 	.word	0x40021000
 8003a68:	00001388 	.word	0x00001388
 8003a6c:	fffff8ff 	.word	0xfffff8ff
 8003a70:	080050e4 	.word	0x080050e4
 8003a74:	20000004 	.word	0x20000004

08003a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b08f      	sub	sp, #60	; 0x3c
 8003a7c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003a7e:	2314      	movs	r3, #20
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	4a2b      	ldr	r2, [pc, #172]	; (8003b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a86:	c313      	stmia	r3!, {r0, r1, r4}
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a92:	c313      	stmia	r3!, {r0, r1, r4}
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003aac:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	220c      	movs	r2, #12
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d002      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x4a>
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d003      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x50>
 8003ac0:	e02d      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ac2:	4b1e      	ldr	r3, [pc, #120]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ac4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ac6:	e02d      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	0c9b      	lsrs	r3, r3, #18
 8003acc:	220f      	movs	r2, #15
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2214      	movs	r2, #20
 8003ad2:	18ba      	adds	r2, r7, r2
 8003ad4:	5cd3      	ldrb	r3, [r2, r3]
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	220f      	movs	r2, #15
 8003ade:	4013      	ands	r3, r2
 8003ae0:	1d3a      	adds	r2, r7, #4
 8003ae2:	5cd3      	ldrb	r3, [r2, r3]
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	025b      	lsls	r3, r3, #9
 8003aec:	4013      	ands	r3, r2
 8003aee:	d009      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003af2:	4812      	ldr	r0, [pc, #72]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003af4:	f7fc fb08 	bl	8000108 <__udivsi3>
 8003af8:	0003      	movs	r3, r0
 8003afa:	001a      	movs	r2, r3
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	4353      	muls	r3, r2
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
 8003b02:	e009      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b06:	000a      	movs	r2, r1
 8003b08:	0152      	lsls	r2, r2, #5
 8003b0a:	1a52      	subs	r2, r2, r1
 8003b0c:	0193      	lsls	r3, r2, #6
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	185b      	adds	r3, r3, r1
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b1c:	e002      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b1e:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b22:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003b26:	0018      	movs	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b00f      	add	sp, #60	; 0x3c
 8003b2c:	bd90      	pop	{r4, r7, pc}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	080050a4 	.word	0x080050a4
 8003b34:	080050b4 	.word	0x080050b4
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	007a1200 	.word	0x007a1200

08003b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b44:	4b02      	ldr	r3, [pc, #8]	; (8003b50 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	20000004 	.word	0x20000004

08003b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003b58:	f7ff fff2 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b5c:	0001      	movs	r1, r0
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	2207      	movs	r2, #7
 8003b66:	4013      	ands	r3, r2
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b6a:	5cd3      	ldrb	r3, [r2, r3]
 8003b6c:	40d9      	lsrs	r1, r3
 8003b6e:	000b      	movs	r3, r1
}    
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	080050f4 	.word	0x080050f4

08003b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	025b      	lsls	r3, r3, #9
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003b9c:	e08f      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003b9e:	2317      	movs	r3, #23
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	055b      	lsls	r3, r3, #21
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d111      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	4b5c      	ldr	r3, [pc, #368]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003bb4:	69da      	ldr	r2, [r3, #28]
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003bb8:	2180      	movs	r1, #128	; 0x80
 8003bba:	0549      	lsls	r1, r1, #21
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	61da      	str	r2, [r3, #28]
 8003bc0:	4b58      	ldr	r3, [pc, #352]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	055b      	lsls	r3, r3, #21
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bce:	2317      	movs	r3, #23
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd6:	4b54      	ldr	r3, [pc, #336]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4013      	ands	r3, r2
 8003be0:	d11a      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be2:	4b51      	ldr	r3, [pc, #324]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b50      	ldr	r3, [pc, #320]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	0049      	lsls	r1, r1, #1
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf0:	f7fe fa36 	bl	8002060 <HAL_GetTick>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	e008      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7fe fa31 	bl	8002060 <HAL_GetTick>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b64      	cmp	r3, #100	; 0x64
 8003c06:	d901      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e087      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	4b46      	ldr	r3, [pc, #280]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4013      	ands	r3, r2
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c18:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	23c0      	movs	r3, #192	; 0xc0
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d034      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	23c0      	movs	r3, #192	; 0xc0
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4013      	ands	r3, r2
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d02c      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c3a:	4b3a      	ldr	r3, [pc, #232]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4a3b      	ldr	r2, [pc, #236]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c44:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c4a:	2180      	movs	r1, #128	; 0x80
 8003c4c:	0249      	lsls	r1, r1, #9
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c54:	6a1a      	ldr	r2, [r3, #32]
 8003c56:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c58:	4935      	ldr	r1, [pc, #212]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fe f9f8 	bl	8002060 <HAL_GetTick>
 8003c70:	0003      	movs	r3, r0
 8003c72:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c74:	e009      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c76:	f7fe f9f3 	bl	8002060 <HAL_GetTick>
 8003c7a:	0002      	movs	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	4a2c      	ldr	r2, [pc, #176]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e048      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8a:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	4013      	ands	r3, r2
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	4a24      	ldr	r2, [pc, #144]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ca8:	2317      	movs	r3, #23
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d105      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cb8:	491f      	ldr	r1, [pc, #124]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cba:	400a      	ands	r2, r1
 8003cbc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cc8:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	2203      	movs	r2, #3
 8003cce:	4393      	bics	r3, r2
 8003cd0:	0019      	movs	r1, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	2210      	movs	r2, #16
 8003cec:	4393      	bics	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4013      	ands	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	2240      	movs	r2, #64	; 0x40
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	0019      	movs	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d16:	430a      	orrs	r2, r1
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b006      	add	sp, #24
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	fffffcff 	.word	0xfffffcff
 8003d30:	fffeffff 	.word	0xfffeffff
 8003d34:	00001388 	.word	0x00001388
 8003d38:	efffffff 	.word	0xefffffff

08003d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e01e      	b.n	8003d8c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	223d      	movs	r2, #61	; 0x3d
 8003d52:	5c9b      	ldrb	r3, [r3, r2]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d107      	bne.n	8003d6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	223c      	movs	r2, #60	; 0x3c
 8003d5e:	2100      	movs	r1, #0
 8003d60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7fd fe83 	bl	8001a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	223d      	movs	r2, #61	; 0x3d
 8003d6e:	2102      	movs	r1, #2
 8003d70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	0010      	movs	r0, r2
 8003d7e:	f000 fa27 	bl	80041d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	223d      	movs	r2, #61	; 0x3d
 8003d86:	2101      	movs	r1, #1
 8003d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b002      	add	sp, #8
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2101      	movs	r1, #1
 8003da8:	430a      	orrs	r2, r1
 8003daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2207      	movs	r2, #7
 8003db4:	4013      	ands	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d007      	beq.n	8003dce <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2101      	movs	r1, #1
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b004      	add	sp, #16
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2202      	movs	r2, #2
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d124      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2202      	movs	r2, #2
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d11d      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2203      	movs	r2, #3
 8003e02:	4252      	negs	r2, r2
 8003e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2203      	movs	r2, #3
 8003e14:	4013      	ands	r3, r2
 8003e16:	d004      	beq.n	8003e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 f9c0 	bl	80041a0 <HAL_TIM_IC_CaptureCallback>
 8003e20:	e007      	b.n	8003e32 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f000 f9b3 	bl	8004190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 f9bf 	bl	80041b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2204      	movs	r2, #4
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d125      	bne.n	8003e92 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d11e      	bne.n	8003e92 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2205      	movs	r2, #5
 8003e5a:	4252      	negs	r2, r2
 8003e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	23c0      	movs	r3, #192	; 0xc0
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f000 f993 	bl	80041a0 <HAL_TIM_IC_CaptureCallback>
 8003e7a:	e007      	b.n	8003e8c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f000 f986 	bl	8004190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	0018      	movs	r0, r3
 8003e88:	f000 f992 	bl	80041b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d124      	bne.n	8003eea <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b08      	cmp	r3, #8
 8003eac:	d11d      	bne.n	8003eea <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2209      	movs	r2, #9
 8003eb4:	4252      	negs	r2, r2
 8003eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 f967 	bl	80041a0 <HAL_TIM_IC_CaptureCallback>
 8003ed2:	e007      	b.n	8003ee4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 f95a 	bl	8004190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 f966 	bl	80041b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d125      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2210      	movs	r2, #16
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d11e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2211      	movs	r2, #17
 8003f0c:	4252      	negs	r2, r2
 8003f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2208      	movs	r2, #8
 8003f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	23c0      	movs	r3, #192	; 0xc0
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4013      	ands	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	0018      	movs	r0, r3
 8003f28:	f000 f93a 	bl	80041a0 <HAL_TIM_IC_CaptureCallback>
 8003f2c:	e007      	b.n	8003f3e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 f92d 	bl	8004190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f000 f939 	bl	80041b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d10f      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d108      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2202      	movs	r2, #2
 8003f66:	4252      	negs	r2, r2
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f000 f907 	bl	8004180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2280      	movs	r2, #128	; 0x80
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b80      	cmp	r3, #128	; 0x80
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2280      	movs	r2, #128	; 0x80
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b80      	cmp	r3, #128	; 0x80
 8003f8c:	d108      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2281      	movs	r2, #129	; 0x81
 8003f94:	4252      	negs	r2, r2
 8003f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f000 fa98 	bl	80044d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2240      	movs	r2, #64	; 0x40
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b40      	cmp	r3, #64	; 0x40
 8003fac:	d10f      	bne.n	8003fce <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2240      	movs	r2, #64	; 0x40
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d108      	bne.n	8003fce <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2241      	movs	r2, #65	; 0x41
 8003fc2:	4252      	negs	r2, r2
 8003fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f000 f8f9 	bl	80041c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d10f      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	d108      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2221      	movs	r2, #33	; 0x21
 8003ff0:	4252      	negs	r2, r2
 8003ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 fa62 	bl	80044c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b002      	add	sp, #8
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	223c      	movs	r2, #60	; 0x3c
 8004012:	5c9b      	ldrb	r3, [r3, r2]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_TIM_ConfigClockSource+0x18>
 8004018:	2302      	movs	r3, #2
 800401a:	e0ab      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x170>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	223c      	movs	r2, #60	; 0x3c
 8004020:	2101      	movs	r1, #1
 8004022:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	223d      	movs	r2, #61	; 0x3d
 8004028:	2102      	movs	r1, #2
 800402a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2277      	movs	r2, #119	; 0x77
 8004038:	4393      	bics	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4a4f      	ldr	r2, [pc, #316]	; (800417c <HAL_TIM_ConfigClockSource+0x178>)
 8004040:	4013      	ands	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d100      	bne.n	8004056 <HAL_TIM_ConfigClockSource+0x52>
 8004054:	e06b      	b.n	800412e <HAL_TIM_ConfigClockSource+0x12a>
 8004056:	d80e      	bhi.n	8004076 <HAL_TIM_ConfigClockSource+0x72>
 8004058:	2b10      	cmp	r3, #16
 800405a:	d100      	bne.n	800405e <HAL_TIM_ConfigClockSource+0x5a>
 800405c:	e077      	b.n	800414e <HAL_TIM_ConfigClockSource+0x14a>
 800405e:	d803      	bhi.n	8004068 <HAL_TIM_ConfigClockSource+0x64>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d100      	bne.n	8004066 <HAL_TIM_ConfigClockSource+0x62>
 8004064:	e073      	b.n	800414e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004066:	e07c      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004068:	2b20      	cmp	r3, #32
 800406a:	d100      	bne.n	800406e <HAL_TIM_ConfigClockSource+0x6a>
 800406c:	e06f      	b.n	800414e <HAL_TIM_ConfigClockSource+0x14a>
 800406e:	2b30      	cmp	r3, #48	; 0x30
 8004070:	d100      	bne.n	8004074 <HAL_TIM_ConfigClockSource+0x70>
 8004072:	e06c      	b.n	800414e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004074:	e075      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004076:	2b70      	cmp	r3, #112	; 0x70
 8004078:	d00e      	beq.n	8004098 <HAL_TIM_ConfigClockSource+0x94>
 800407a:	d804      	bhi.n	8004086 <HAL_TIM_ConfigClockSource+0x82>
 800407c:	2b50      	cmp	r3, #80	; 0x50
 800407e:	d036      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0xea>
 8004080:	2b60      	cmp	r3, #96	; 0x60
 8004082:	d044      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8004084:	e06d      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	0152      	lsls	r2, r2, #5
 800408a:	4293      	cmp	r3, r2
 800408c:	d068      	beq.n	8004160 <HAL_TIM_ConfigClockSource+0x15c>
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	0192      	lsls	r2, r2, #6
 8004092:	4293      	cmp	r3, r2
 8004094:	d017      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8004096:	e064      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	6899      	ldr	r1, [r3, #8]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f000 f98c 	bl	80043c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2277      	movs	r2, #119	; 0x77
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	609a      	str	r2, [r3, #8]
      break;
 80040c4:	e04d      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	6899      	ldr	r1, [r3, #8]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f000 f975 	bl	80043c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2180      	movs	r1, #128	; 0x80
 80040e6:	01c9      	lsls	r1, r1, #7
 80040e8:	430a      	orrs	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]
      break;
 80040ec:	e039      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	001a      	movs	r2, r3
 80040fc:	f000 f8e8 	bl	80042d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2150      	movs	r1, #80	; 0x50
 8004106:	0018      	movs	r0, r3
 8004108:	f000 f942 	bl	8004390 <TIM_ITRx_SetConfig>
      break;
 800410c:	e029      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	001a      	movs	r2, r3
 800411c:	f000 f906 	bl	800432c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2160      	movs	r1, #96	; 0x60
 8004126:	0018      	movs	r0, r3
 8004128:	f000 f932 	bl	8004390 <TIM_ITRx_SetConfig>
      break;
 800412c:	e019      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6859      	ldr	r1, [r3, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	001a      	movs	r2, r3
 800413c:	f000 f8c8 	bl	80042d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2140      	movs	r1, #64	; 0x40
 8004146:	0018      	movs	r0, r3
 8004148:	f000 f922 	bl	8004390 <TIM_ITRx_SetConfig>
      break;
 800414c:	e009      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	0019      	movs	r1, r3
 8004158:	0010      	movs	r0, r2
 800415a:	f000 f919 	bl	8004390 <TIM_ITRx_SetConfig>
      break;
 800415e:	e000      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004160:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	223d      	movs	r2, #61	; 0x3d
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	223c      	movs	r2, #60	; 0x3c
 800416e:	2100      	movs	r1, #0
 8004170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	0018      	movs	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	b004      	add	sp, #16
 800417a:	bd80      	pop	{r7, pc}
 800417c:	ffff00ff 	.word	0xffff00ff

08004180 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	b002      	add	sp, #8
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b002      	add	sp, #8
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a34      	ldr	r2, [pc, #208]	; (80042b4 <TIM_Base_SetConfig+0xe4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d008      	beq.n	80041fa <TIM_Base_SetConfig+0x2a>
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	05db      	lsls	r3, r3, #23
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d003      	beq.n	80041fa <TIM_Base_SetConfig+0x2a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a30      	ldr	r2, [pc, #192]	; (80042b8 <TIM_Base_SetConfig+0xe8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d108      	bne.n	800420c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2270      	movs	r2, #112	; 0x70
 80041fe:	4393      	bics	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a29      	ldr	r2, [pc, #164]	; (80042b4 <TIM_Base_SetConfig+0xe4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d018      	beq.n	8004246 <TIM_Base_SetConfig+0x76>
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	05db      	lsls	r3, r3, #23
 800421a:	429a      	cmp	r2, r3
 800421c:	d013      	beq.n	8004246 <TIM_Base_SetConfig+0x76>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a25      	ldr	r2, [pc, #148]	; (80042b8 <TIM_Base_SetConfig+0xe8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00f      	beq.n	8004246 <TIM_Base_SetConfig+0x76>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a24      	ldr	r2, [pc, #144]	; (80042bc <TIM_Base_SetConfig+0xec>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00b      	beq.n	8004246 <TIM_Base_SetConfig+0x76>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a23      	ldr	r2, [pc, #140]	; (80042c0 <TIM_Base_SetConfig+0xf0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d007      	beq.n	8004246 <TIM_Base_SetConfig+0x76>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <TIM_Base_SetConfig+0xf4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <TIM_Base_SetConfig+0x76>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <TIM_Base_SetConfig+0xf8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d108      	bne.n	8004258 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4a20      	ldr	r2, [pc, #128]	; (80042cc <TIM_Base_SetConfig+0xfc>)
 800424a:	4013      	ands	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2280      	movs	r2, #128	; 0x80
 800425c:	4393      	bics	r3, r2
 800425e:	001a      	movs	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a0c      	ldr	r2, [pc, #48]	; (80042b4 <TIM_Base_SetConfig+0xe4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0xce>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a0d      	ldr	r2, [pc, #52]	; (80042c0 <TIM_Base_SetConfig+0xf0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0xce>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a0c      	ldr	r2, [pc, #48]	; (80042c4 <TIM_Base_SetConfig+0xf4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0xce>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <TIM_Base_SetConfig+0xf8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d103      	bne.n	80042a6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	615a      	str	r2, [r3, #20]
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b004      	add	sp, #16
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40002000 	.word	0x40002000
 80042c0:	40014000 	.word	0x40014000
 80042c4:	40014400 	.word	0x40014400
 80042c8:	40014800 	.word	0x40014800
 80042cc:	fffffcff 	.word	0xfffffcff

080042d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	2201      	movs	r2, #1
 80042e8:	4393      	bics	r3, r2
 80042ea:	001a      	movs	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	22f0      	movs	r2, #240	; 0xf0
 80042fa:	4393      	bics	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	220a      	movs	r2, #10
 800430c:	4393      	bics	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	621a      	str	r2, [r3, #32]
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b006      	add	sp, #24
 800432a:	bd80      	pop	{r7, pc}

0800432c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	2210      	movs	r2, #16
 800433e:	4393      	bics	r3, r2
 8004340:	001a      	movs	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	4a0d      	ldr	r2, [pc, #52]	; (800438c <TIM_TI2_ConfigInputStage+0x60>)
 8004356:	4013      	ands	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	22a0      	movs	r2, #160	; 0xa0
 8004368:	4393      	bics	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46bd      	mov	sp, r7
 8004386:	b006      	add	sp, #24
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	ffff0fff 	.word	0xffff0fff

08004390 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2270      	movs	r2, #112	; 0x70
 80043a4:	4393      	bics	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	2207      	movs	r2, #7
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	609a      	str	r2, [r3, #8]
}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	46bd      	mov	sp, r7
 80043be:	b004      	add	sp, #16
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4a09      	ldr	r2, [pc, #36]	; (8004400 <TIM_ETR_SetConfig+0x3c>)
 80043dc:	4013      	ands	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	021a      	lsls	r2, r3, #8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	609a      	str	r2, [r3, #8]
}
 80043f8:	46c0      	nop			; (mov r8, r8)
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b006      	add	sp, #24
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	ffff00ff 	.word	0xffff00ff

08004404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	223c      	movs	r2, #60	; 0x3c
 8004412:	5c9b      	ldrb	r3, [r3, r2]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004418:	2302      	movs	r3, #2
 800441a:	e047      	b.n	80044ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	223c      	movs	r2, #60	; 0x3c
 8004420:	2101      	movs	r1, #1
 8004422:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	223d      	movs	r2, #61	; 0x3d
 8004428:	2102      	movs	r1, #2
 800442a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2270      	movs	r2, #112	; 0x70
 8004440:	4393      	bics	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00f      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	05db      	lsls	r3, r3, #23
 8004468:	429a      	cmp	r2, r3
 800446a:	d009      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a10      	ldr	r2, [pc, #64]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d10c      	bne.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2280      	movs	r2, #128	; 0x80
 8004484:	4393      	bics	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	4313      	orrs	r3, r2
 8004490:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	223d      	movs	r2, #61	; 0x3d
 800449e:	2101      	movs	r1, #1
 80044a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	223c      	movs	r2, #60	; 0x3c
 80044a6:	2100      	movs	r1, #0
 80044a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	0018      	movs	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b004      	add	sp, #16
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40014000 	.word	0x40014000

080044c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e044      	b.n	800457c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2270      	movs	r2, #112	; 0x70
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f7fd fb23 	bl	8001b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2224      	movs	r2, #36	; 0x24
 800450e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2101      	movs	r1, #1
 800451c:	438a      	bics	r2, r1
 800451e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	0018      	movs	r0, r3
 8004524:	f000 fa24 	bl	8004970 <UART_SetConfig>
 8004528:	0003      	movs	r3, r0
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e024      	b.n	800457c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0018      	movs	r0, r3
 800453e:	f000 fb9d 	bl	8004c7c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	490d      	ldr	r1, [pc, #52]	; (8004584 <HAL_UART_Init+0xa4>)
 800454e:	400a      	ands	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	212a      	movs	r1, #42	; 0x2a
 800455e:	438a      	bics	r2, r1
 8004560:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	430a      	orrs	r2, r1
 8004570:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0018      	movs	r0, r3
 8004576:	f000 fc35 	bl	8004de4 <UART_CheckIdleState>
 800457a:	0003      	movs	r3, r0
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b002      	add	sp, #8
 8004582:	bd80      	pop	{r7, pc}
 8004584:	ffffb7ff 	.word	0xffffb7ff

08004588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	1dbb      	adds	r3, r7, #6
 8004596:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459c:	2b20      	cmp	r3, #32
 800459e:	d000      	beq.n	80045a2 <HAL_UART_Transmit+0x1a>
 80045a0:	e095      	b.n	80046ce <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_UART_Transmit+0x28>
 80045a8:	1dbb      	adds	r3, r7, #6
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e08d      	b.n	80046d0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	015b      	lsls	r3, r3, #5
 80045bc:	429a      	cmp	r2, r3
 80045be:	d109      	bne.n	80045d4 <HAL_UART_Transmit+0x4c>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2201      	movs	r2, #1
 80045cc:	4013      	ands	r3, r2
 80045ce:	d001      	beq.n	80045d4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e07d      	b.n	80046d0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2270      	movs	r2, #112	; 0x70
 80045d8:	5c9b      	ldrb	r3, [r3, r2]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_UART_Transmit+0x5a>
 80045de:	2302      	movs	r3, #2
 80045e0:	e076      	b.n	80046d0 <HAL_UART_Transmit+0x148>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2270      	movs	r2, #112	; 0x70
 80045e6:	2101      	movs	r1, #1
 80045e8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2221      	movs	r2, #33	; 0x21
 80045f4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80045f6:	f7fd fd33 	bl	8002060 <HAL_GetTick>
 80045fa:	0003      	movs	r3, r0
 80045fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1dba      	adds	r2, r7, #6
 8004602:	2150      	movs	r1, #80	; 0x50
 8004604:	8812      	ldrh	r2, [r2, #0]
 8004606:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1dba      	adds	r2, r7, #6
 800460c:	2152      	movs	r1, #82	; 0x52
 800460e:	8812      	ldrh	r2, [r2, #0]
 8004610:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	2380      	movs	r3, #128	; 0x80
 8004618:	015b      	lsls	r3, r3, #5
 800461a:	429a      	cmp	r2, r3
 800461c:	d108      	bne.n	8004630 <HAL_UART_Transmit+0xa8>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e003      	b.n	8004638 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004638:	e02d      	b.n	8004696 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	0013      	movs	r3, r2
 8004644:	2200      	movs	r2, #0
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	f000 fc12 	bl	8004e70 <UART_WaitOnFlagUntilTimeout>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d001      	beq.n	8004654 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e03d      	b.n	80046d0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10b      	bne.n	8004672 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	05d2      	lsls	r2, r2, #23
 8004664:	0dd2      	lsrs	r2, r2, #23
 8004666:	b292      	uxth	r2, r2
 8004668:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	3302      	adds	r3, #2
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	e008      	b.n	8004684 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	b292      	uxth	r2, r2
 800467c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3301      	adds	r3, #1
 8004682:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2252      	movs	r2, #82	; 0x52
 8004688:	5a9b      	ldrh	r3, [r3, r2]
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b299      	uxth	r1, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2252      	movs	r2, #82	; 0x52
 8004694:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2252      	movs	r2, #82	; 0x52
 800469a:	5a9b      	ldrh	r3, [r3, r2]
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1cb      	bne.n	800463a <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	0013      	movs	r3, r2
 80046ac:	2200      	movs	r2, #0
 80046ae:	2140      	movs	r1, #64	; 0x40
 80046b0:	f000 fbde 	bl	8004e70 <UART_WaitOnFlagUntilTimeout>
 80046b4:	1e03      	subs	r3, r0, #0
 80046b6:	d001      	beq.n	80046bc <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e009      	b.n	80046d0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2270      	movs	r2, #112	; 0x70
 80046c6:	2100      	movs	r1, #0
 80046c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e000      	b.n	80046d0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
  }
}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b008      	add	sp, #32
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4a93      	ldr	r2, [pc, #588]	; (8004948 <HAL_UART_IRQHandler+0x270>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d112      	bne.n	800472c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2220      	movs	r2, #32
 800470a:	4013      	ands	r3, r2
 800470c:	d00e      	beq.n	800472c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2220      	movs	r2, #32
 8004712:	4013      	ands	r3, r2
 8004714:	d00a      	beq.n	800472c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471a:	2b00      	cmp	r3, #0
 800471c:	d100      	bne.n	8004720 <HAL_UART_IRQHandler+0x48>
 800471e:	e10b      	b.n	8004938 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	0010      	movs	r0, r2
 8004728:	4798      	blx	r3
      }
      return;
 800472a:	e105      	b.n	8004938 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d100      	bne.n	8004734 <HAL_UART_IRQHandler+0x5c>
 8004732:	e0cd      	b.n	80048d0 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2201      	movs	r2, #1
 8004738:	4013      	ands	r3, r2
 800473a:	d105      	bne.n	8004748 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	2390      	movs	r3, #144	; 0x90
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4013      	ands	r3, r2
 8004744:	d100      	bne.n	8004748 <HAL_UART_IRQHandler+0x70>
 8004746:	e0c3      	b.n	80048d0 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	2201      	movs	r2, #1
 800474c:	4013      	ands	r3, r2
 800474e:	d00e      	beq.n	800476e <HAL_UART_IRQHandler+0x96>
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	4013      	ands	r3, r2
 8004758:	d009      	beq.n	800476e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2201      	movs	r2, #1
 8004760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004766:	2201      	movs	r2, #1
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2202      	movs	r2, #2
 8004772:	4013      	ands	r3, r2
 8004774:	d00d      	beq.n	8004792 <HAL_UART_IRQHandler+0xba>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2201      	movs	r2, #1
 800477a:	4013      	ands	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2202      	movs	r2, #2
 8004784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800478a:	2204      	movs	r2, #4
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	2204      	movs	r2, #4
 8004796:	4013      	ands	r3, r2
 8004798:	d00d      	beq.n	80047b6 <HAL_UART_IRQHandler+0xde>
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2201      	movs	r2, #1
 800479e:	4013      	ands	r3, r2
 80047a0:	d009      	beq.n	80047b6 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2204      	movs	r2, #4
 80047a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ae:	2202      	movs	r2, #2
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2208      	movs	r2, #8
 80047ba:	4013      	ands	r3, r2
 80047bc:	d011      	beq.n	80047e2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2220      	movs	r2, #32
 80047c2:	4013      	ands	r3, r2
 80047c4:	d103      	bne.n	80047ce <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2201      	movs	r2, #1
 80047ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047cc:	d009      	beq.n	80047e2 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2208      	movs	r2, #8
 80047d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047da:	2208      	movs	r2, #8
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	4013      	ands	r3, r2
 80047ea:	d00f      	beq.n	800480c <HAL_UART_IRQHandler+0x134>
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	04db      	lsls	r3, r3, #19
 80047f2:	4013      	ands	r3, r2
 80047f4:	d00a      	beq.n	800480c <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2280      	movs	r2, #128	; 0x80
 80047fc:	0112      	lsls	r2, r2, #4
 80047fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004804:	2220      	movs	r2, #32
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d100      	bne.n	8004816 <HAL_UART_IRQHandler+0x13e>
 8004814:	e092      	b.n	800493c <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2220      	movs	r2, #32
 800481a:	4013      	ands	r3, r2
 800481c:	d00c      	beq.n	8004838 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2220      	movs	r2, #32
 8004822:	4013      	ands	r3, r2
 8004824:	d008      	beq.n	8004838 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482a:	2b00      	cmp	r3, #0
 800482c:	d004      	beq.n	8004838 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	0010      	movs	r0, r2
 8004836:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2240      	movs	r2, #64	; 0x40
 8004846:	4013      	ands	r3, r2
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d003      	beq.n	8004854 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2228      	movs	r2, #40	; 0x28
 8004850:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004852:	d033      	beq.n	80048bc <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	0018      	movs	r0, r3
 8004858:	f000 fb88 	bl	8004f6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2240      	movs	r2, #64	; 0x40
 8004864:	4013      	ands	r3, r2
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d123      	bne.n	80048b2 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2140      	movs	r1, #64	; 0x40
 8004876:	438a      	bics	r2, r1
 8004878:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d012      	beq.n	80048a8 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004886:	4a31      	ldr	r2, [pc, #196]	; (800494c <HAL_UART_IRQHandler+0x274>)
 8004888:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488e:	0018      	movs	r0, r3
 8004890:	f7fe fa24 	bl	8002cdc <HAL_DMA_Abort_IT>
 8004894:	1e03      	subs	r3, r0, #0
 8004896:	d019      	beq.n	80048cc <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a2:	0018      	movs	r0, r3
 80048a4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a6:	e011      	b.n	80048cc <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	0018      	movs	r0, r3
 80048ac:	f000 f858 	bl	8004960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b0:	e00c      	b.n	80048cc <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 f853 	bl	8004960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ba:	e007      	b.n	80048cc <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	0018      	movs	r0, r3
 80048c0:	f000 f84e 	bl	8004960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80048ca:	e037      	b.n	800493c <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048cc:	46c0      	nop			; (mov r8, r8)
    return;
 80048ce:	e035      	b.n	800493c <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	2380      	movs	r3, #128	; 0x80
 80048d4:	035b      	lsls	r3, r3, #13
 80048d6:	4013      	ands	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_UART_IRQHandler+0x220>
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	03db      	lsls	r3, r3, #15
 80048e0:	4013      	ands	r3, r2
 80048e2:	d009      	beq.n	80048f8 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2280      	movs	r2, #128	; 0x80
 80048ea:	0352      	lsls	r2, r2, #13
 80048ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f000 fb8c 	bl	800500e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048f6:	e024      	b.n	8004942 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2280      	movs	r2, #128	; 0x80
 80048fc:	4013      	ands	r3, r2
 80048fe:	d00d      	beq.n	800491c <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2280      	movs	r2, #128	; 0x80
 8004904:	4013      	ands	r3, r2
 8004906:	d009      	beq.n	800491c <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800490c:	2b00      	cmp	r3, #0
 800490e:	d017      	beq.n	8004940 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	0010      	movs	r0, r2
 8004918:	4798      	blx	r3
    }
    return;
 800491a:	e011      	b.n	8004940 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	2240      	movs	r2, #64	; 0x40
 8004920:	4013      	ands	r3, r2
 8004922:	d00e      	beq.n	8004942 <HAL_UART_IRQHandler+0x26a>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2240      	movs	r2, #64	; 0x40
 8004928:	4013      	ands	r3, r2
 800492a:	d00a      	beq.n	8004942 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0018      	movs	r0, r3
 8004930:	f000 fb53 	bl	8004fda <UART_EndTransmit_IT>
    return;
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	e004      	b.n	8004942 <HAL_UART_IRQHandler+0x26a>
      return;
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	e002      	b.n	8004942 <HAL_UART_IRQHandler+0x26a>
    return;
 800493c:	46c0      	nop			; (mov r8, r8)
 800493e:	e000      	b.n	8004942 <HAL_UART_IRQHandler+0x26a>
    return;
 8004940:	46c0      	nop			; (mov r8, r8)
  }

}
 8004942:	46bd      	mov	sp, r7
 8004944:	b008      	add	sp, #32
 8004946:	bd80      	pop	{r7, pc}
 8004948:	0000080f 	.word	0x0000080f
 800494c:	08004fad 	.word	0x08004fad

08004950 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004968:	46c0      	nop			; (mov r8, r8)
 800496a:	46bd      	mov	sp, r7
 800496c:	b002      	add	sp, #8
 800496e:	bd80      	pop	{r7, pc}

08004970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800497c:	2317      	movs	r3, #23
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4aad      	ldr	r2, [pc, #692]	; (8004c58 <UART_SetConfig+0x2e8>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4aa8      	ldr	r2, [pc, #672]	; (8004c5c <UART_SetConfig+0x2ec>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	0019      	movs	r1, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a9f      	ldr	r2, [pc, #636]	; (8004c60 <UART_SetConfig+0x2f0>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	0019      	movs	r1, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a9b      	ldr	r2, [pc, #620]	; (8004c64 <UART_SetConfig+0x2f4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d125      	bne.n	8004a46 <UART_SetConfig+0xd6>
 80049fa:	4b9b      	ldr	r3, [pc, #620]	; (8004c68 <UART_SetConfig+0x2f8>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	2203      	movs	r2, #3
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d00f      	beq.n	8004a26 <UART_SetConfig+0xb6>
 8004a06:	d304      	bcc.n	8004a12 <UART_SetConfig+0xa2>
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d011      	beq.n	8004a30 <UART_SetConfig+0xc0>
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d005      	beq.n	8004a1c <UART_SetConfig+0xac>
 8004a10:	e013      	b.n	8004a3a <UART_SetConfig+0xca>
 8004a12:	231f      	movs	r3, #31
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	e022      	b.n	8004a62 <UART_SetConfig+0xf2>
 8004a1c:	231f      	movs	r3, #31
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	2202      	movs	r2, #2
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e01d      	b.n	8004a62 <UART_SetConfig+0xf2>
 8004a26:	231f      	movs	r3, #31
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e018      	b.n	8004a62 <UART_SetConfig+0xf2>
 8004a30:	231f      	movs	r3, #31
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	2208      	movs	r2, #8
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e013      	b.n	8004a62 <UART_SetConfig+0xf2>
 8004a3a:	231f      	movs	r3, #31
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	2210      	movs	r2, #16
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	e00d      	b.n	8004a62 <UART_SetConfig+0xf2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a88      	ldr	r2, [pc, #544]	; (8004c6c <UART_SetConfig+0x2fc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d104      	bne.n	8004a5a <UART_SetConfig+0xea>
 8004a50:	231f      	movs	r3, #31
 8004a52:	18fb      	adds	r3, r7, r3
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	e003      	b.n	8004a62 <UART_SetConfig+0xf2>
 8004a5a:	231f      	movs	r3, #31
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	2210      	movs	r2, #16
 8004a60:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69da      	ldr	r2, [r3, #28]
 8004a66:	2380      	movs	r3, #128	; 0x80
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d000      	beq.n	8004a70 <UART_SetConfig+0x100>
 8004a6e:	e07d      	b.n	8004b6c <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8004a70:	231f      	movs	r3, #31
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d01c      	beq.n	8004ab4 <UART_SetConfig+0x144>
 8004a7a:	dc02      	bgt.n	8004a82 <UART_SetConfig+0x112>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <UART_SetConfig+0x11c>
 8004a80:	e04b      	b.n	8004b1a <UART_SetConfig+0x1aa>
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d025      	beq.n	8004ad2 <UART_SetConfig+0x162>
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d037      	beq.n	8004afa <UART_SetConfig+0x18a>
 8004a8a:	e046      	b.n	8004b1a <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7ff f862 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8004a90:	0003      	movs	r3, r0
 8004a92:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	005a      	lsls	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	18d2      	adds	r2, r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	0010      	movs	r0, r2
 8004aa8:	f7fb fb2e 	bl	8000108 <__udivsi3>
 8004aac:	0003      	movs	r3, r0
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	61bb      	str	r3, [r7, #24]
        break;
 8004ab2:	e037      	b.n	8004b24 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	085b      	lsrs	r3, r3, #1
 8004aba:	4a6d      	ldr	r2, [pc, #436]	; (8004c70 <UART_SetConfig+0x300>)
 8004abc:	189a      	adds	r2, r3, r2
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	0010      	movs	r0, r2
 8004ac6:	f7fb fb1f 	bl	8000108 <__udivsi3>
 8004aca:	0003      	movs	r3, r0
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	61bb      	str	r3, [r7, #24]
        break;
 8004ad0:	e028      	b.n	8004b24 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ad2:	f7fe ffd1 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	005a      	lsls	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	085b      	lsrs	r3, r3, #1
 8004ae4:	18d2      	adds	r2, r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	0019      	movs	r1, r3
 8004aec:	0010      	movs	r0, r2
 8004aee:	f7fb fb0b 	bl	8000108 <__udivsi3>
 8004af2:	0003      	movs	r3, r0
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	61bb      	str	r3, [r7, #24]
        break;
 8004af8:	e014      	b.n	8004b24 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	2280      	movs	r2, #128	; 0x80
 8004b02:	0252      	lsls	r2, r2, #9
 8004b04:	189a      	adds	r2, r3, r2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	0019      	movs	r1, r3
 8004b0c:	0010      	movs	r0, r2
 8004b0e:	f7fb fafb 	bl	8000108 <__udivsi3>
 8004b12:	0003      	movs	r3, r0
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	61bb      	str	r3, [r7, #24]
        break;
 8004b18:	e004      	b.n	8004b24 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8004b1a:	2317      	movs	r3, #23
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	2201      	movs	r2, #1
 8004b20:	701a      	strb	r2, [r3, #0]
        break;
 8004b22:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b0f      	cmp	r3, #15
 8004b28:	d91b      	bls.n	8004b62 <UART_SetConfig+0x1f2>
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	4a51      	ldr	r2, [pc, #324]	; (8004c74 <UART_SetConfig+0x304>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d817      	bhi.n	8004b62 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	200a      	movs	r0, #10
 8004b38:	183b      	adds	r3, r7, r0
 8004b3a:	210f      	movs	r1, #15
 8004b3c:	438a      	bics	r2, r1
 8004b3e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2207      	movs	r2, #7
 8004b48:	4013      	ands	r3, r2
 8004b4a:	b299      	uxth	r1, r3
 8004b4c:	183b      	adds	r3, r7, r0
 8004b4e:	183a      	adds	r2, r7, r0
 8004b50:	8812      	ldrh	r2, [r2, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	183a      	adds	r2, r7, r0
 8004b5c:	8812      	ldrh	r2, [r2, #0]
 8004b5e:	60da      	str	r2, [r3, #12]
 8004b60:	e06c      	b.n	8004c3c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004b62:	2317      	movs	r3, #23
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	e067      	b.n	8004c3c <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8004b6c:	231f      	movs	r3, #31
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d01b      	beq.n	8004bae <UART_SetConfig+0x23e>
 8004b76:	dc02      	bgt.n	8004b7e <UART_SetConfig+0x20e>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <UART_SetConfig+0x218>
 8004b7c:	e049      	b.n	8004c12 <UART_SetConfig+0x2a2>
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d024      	beq.n	8004bcc <UART_SetConfig+0x25c>
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d035      	beq.n	8004bf2 <UART_SetConfig+0x282>
 8004b86:	e044      	b.n	8004c12 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b88:	f7fe ffe4 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	085a      	lsrs	r2, r3, #1
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	18d2      	adds	r2, r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	0010      	movs	r0, r2
 8004ba2:	f7fb fab1 	bl	8000108 <__udivsi3>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	61bb      	str	r3, [r7, #24]
        break;
 8004bac:	e036      	b.n	8004c1c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	4a30      	ldr	r2, [pc, #192]	; (8004c78 <UART_SetConfig+0x308>)
 8004bb6:	189a      	adds	r2, r3, r2
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	0010      	movs	r0, r2
 8004bc0:	f7fb faa2 	bl	8000108 <__udivsi3>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	61bb      	str	r3, [r7, #24]
        break;
 8004bca:	e027      	b.n	8004c1c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bcc:	f7fe ff54 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	085a      	lsrs	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	18d2      	adds	r2, r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	0019      	movs	r1, r3
 8004be4:	0010      	movs	r0, r2
 8004be6:	f7fb fa8f 	bl	8000108 <__udivsi3>
 8004bea:	0003      	movs	r3, r0
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	61bb      	str	r3, [r7, #24]
        break;
 8004bf0:	e014      	b.n	8004c1c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	2280      	movs	r2, #128	; 0x80
 8004bfa:	0212      	lsls	r2, r2, #8
 8004bfc:	189a      	adds	r2, r3, r2
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	0019      	movs	r1, r3
 8004c04:	0010      	movs	r0, r2
 8004c06:	f7fb fa7f 	bl	8000108 <__udivsi3>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	61bb      	str	r3, [r7, #24]
        break;
 8004c10:	e004      	b.n	8004c1c <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8004c12:	2317      	movs	r3, #23
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	2201      	movs	r2, #1
 8004c18:	701a      	strb	r2, [r3, #0]
        break;
 8004c1a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b0f      	cmp	r3, #15
 8004c20:	d908      	bls.n	8004c34 <UART_SetConfig+0x2c4>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <UART_SetConfig+0x304>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d804      	bhi.n	8004c34 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	e003      	b.n	8004c3c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004c34:	2317      	movs	r3, #23
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c48:	2317      	movs	r3, #23
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	781b      	ldrb	r3, [r3, #0]
}
 8004c4e:	0018      	movs	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b008      	add	sp, #32
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	ffff69f3 	.word	0xffff69f3
 8004c5c:	ffffcfff 	.word	0xffffcfff
 8004c60:	fffff4ff 	.word	0xfffff4ff
 8004c64:	40013800 	.word	0x40013800
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	40004400 	.word	0x40004400
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	0000ffff 	.word	0x0000ffff
 8004c78:	007a1200 	.word	0x007a1200

08004c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	2201      	movs	r2, #1
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d00b      	beq.n	8004ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4a4a      	ldr	r2, [pc, #296]	; (8004dc0 <UART_AdvFeatureConfig+0x144>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	0019      	movs	r1, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	2202      	movs	r2, #2
 8004cac:	4013      	ands	r3, r2
 8004cae:	d00b      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4a43      	ldr	r2, [pc, #268]	; (8004dc4 <UART_AdvFeatureConfig+0x148>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	0019      	movs	r1, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2204      	movs	r2, #4
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a3b      	ldr	r2, [pc, #236]	; (8004dc8 <UART_AdvFeatureConfig+0x14c>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	0019      	movs	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2208      	movs	r2, #8
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d00b      	beq.n	8004d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4a34      	ldr	r2, [pc, #208]	; (8004dcc <UART_AdvFeatureConfig+0x150>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	0019      	movs	r1, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	2210      	movs	r2, #16
 8004d12:	4013      	ands	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4a2c      	ldr	r2, [pc, #176]	; (8004dd0 <UART_AdvFeatureConfig+0x154>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	0019      	movs	r1, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2220      	movs	r2, #32
 8004d34:	4013      	ands	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <UART_AdvFeatureConfig+0x158>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	0019      	movs	r1, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2240      	movs	r2, #64	; 0x40
 8004d56:	4013      	ands	r3, r2
 8004d58:	d01d      	beq.n	8004d96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <UART_AdvFeatureConfig+0x15c>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	0019      	movs	r1, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	035b      	lsls	r3, r3, #13
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d10b      	bne.n	8004d96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4a15      	ldr	r2, [pc, #84]	; (8004ddc <UART_AdvFeatureConfig+0x160>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	0019      	movs	r1, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	2280      	movs	r2, #128	; 0x80
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d00b      	beq.n	8004db8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4a0e      	ldr	r2, [pc, #56]	; (8004de0 <UART_AdvFeatureConfig+0x164>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	0019      	movs	r1, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }
}
 8004db8:	46c0      	nop			; (mov r8, r8)
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b002      	add	sp, #8
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	fffdffff 	.word	0xfffdffff
 8004dc4:	fffeffff 	.word	0xfffeffff
 8004dc8:	fffbffff 	.word	0xfffbffff
 8004dcc:	ffff7fff 	.word	0xffff7fff
 8004dd0:	ffffefff 	.word	0xffffefff
 8004dd4:	ffffdfff 	.word	0xffffdfff
 8004dd8:	ffefffff 	.word	0xffefffff
 8004ddc:	ff9fffff 	.word	0xff9fffff
 8004de0:	fff7ffff 	.word	0xfff7ffff

08004de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004df2:	f7fd f935 	bl	8002060 <HAL_GetTick>
 8004df6:	0003      	movs	r3, r0
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2208      	movs	r2, #8
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d10d      	bne.n	8004e24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	0399      	lsls	r1, r3, #14
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4b16      	ldr	r3, [pc, #88]	; (8004e6c <UART_CheckIdleState+0x88>)
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	0013      	movs	r3, r2
 8004e16:	2200      	movs	r2, #0
 8004e18:	f000 f82a 	bl	8004e70 <UART_WaitOnFlagUntilTimeout>
 8004e1c:	1e03      	subs	r3, r0, #0
 8004e1e:	d001      	beq.n	8004e24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e01f      	b.n	8004e64 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2204      	movs	r2, #4
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d10d      	bne.n	8004e4e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	03d9      	lsls	r1, r3, #15
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <UART_CheckIdleState+0x88>)
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	0013      	movs	r3, r2
 8004e40:	2200      	movs	r2, #0
 8004e42:	f000 f815 	bl	8004e70 <UART_WaitOnFlagUntilTimeout>
 8004e46:	1e03      	subs	r3, r0, #0
 8004e48:	d001      	beq.n	8004e4e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e00a      	b.n	8004e64 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2270      	movs	r2, #112	; 0x70
 8004e5e:	2100      	movs	r1, #0
 8004e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	0018      	movs	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b004      	add	sp, #16
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	01ffffff 	.word	0x01ffffff

08004e70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	1dfb      	adds	r3, r7, #7
 8004e7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e80:	e05d      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	3301      	adds	r3, #1
 8004e86:	d05a      	beq.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e88:	f7fd f8ea 	bl	8002060 <HAL_GetTick>
 8004e8c:	0002      	movs	r2, r0
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d302      	bcc.n	8004e9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d11b      	bne.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	492f      	ldr	r1, [pc, #188]	; (8004f68 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004eaa:	400a      	ands	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2101      	movs	r1, #1
 8004eba:	438a      	bics	r2, r1
 8004ebc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2270      	movs	r2, #112	; 0x70
 8004ece:	2100      	movs	r1, #0
 8004ed0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e043      	b.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2204      	movs	r2, #4
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d02d      	beq.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	2380      	movs	r3, #128	; 0x80
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	401a      	ands	r2, r3
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d123      	bne.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2280      	movs	r2, #128	; 0x80
 8004efc:	0112      	lsls	r2, r2, #4
 8004efe:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4917      	ldr	r1, [pc, #92]	; (8004f68 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004f0c:	400a      	ands	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	438a      	bics	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2270      	movs	r2, #112	; 0x70
 8004f36:	2100      	movs	r1, #0
 8004f38:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e00f      	b.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	4013      	ands	r3, r2
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	425a      	negs	r2, r3
 8004f4e:	4153      	adcs	r3, r2
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	001a      	movs	r2, r3
 8004f54:	1dfb      	adds	r3, r7, #7
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d092      	beq.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	0018      	movs	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b004      	add	sp, #16
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	fffffe5f 	.word	0xfffffe5f

08004f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	490a      	ldr	r1, [pc, #40]	; (8004fa8 <UART_EndRxTransfer+0x3c>)
 8004f80:	400a      	ands	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2101      	movs	r1, #1
 8004f90:	438a      	bics	r2, r1
 8004f92:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b002      	add	sp, #8
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	fffffedf 	.word	0xfffffedf

08004fac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	225a      	movs	r2, #90	; 0x5a
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2252      	movs	r2, #82	; 0x52
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f7ff fcc7 	bl	8004960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b004      	add	sp, #16
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2140      	movs	r1, #64	; 0x40
 8004fee:	438a      	bics	r2, r1
 8004ff0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0018      	movs	r0, r3
 8005002:	f7ff fca5 	bl	8004950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	46bd      	mov	sp, r7
 800500a:	b002      	add	sp, #8
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	46bd      	mov	sp, r7
 800501a:	b002      	add	sp, #8
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <__libc_init_array>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	2600      	movs	r6, #0
 8005024:	4d0c      	ldr	r5, [pc, #48]	; (8005058 <__libc_init_array+0x38>)
 8005026:	4c0d      	ldr	r4, [pc, #52]	; (800505c <__libc_init_array+0x3c>)
 8005028:	1b64      	subs	r4, r4, r5
 800502a:	10a4      	asrs	r4, r4, #2
 800502c:	42a6      	cmp	r6, r4
 800502e:	d109      	bne.n	8005044 <__libc_init_array+0x24>
 8005030:	2600      	movs	r6, #0
 8005032:	f000 f82b 	bl	800508c <_init>
 8005036:	4d0a      	ldr	r5, [pc, #40]	; (8005060 <__libc_init_array+0x40>)
 8005038:	4c0a      	ldr	r4, [pc, #40]	; (8005064 <__libc_init_array+0x44>)
 800503a:	1b64      	subs	r4, r4, r5
 800503c:	10a4      	asrs	r4, r4, #2
 800503e:	42a6      	cmp	r6, r4
 8005040:	d105      	bne.n	800504e <__libc_init_array+0x2e>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	00b3      	lsls	r3, r6, #2
 8005046:	58eb      	ldr	r3, [r5, r3]
 8005048:	4798      	blx	r3
 800504a:	3601      	adds	r6, #1
 800504c:	e7ee      	b.n	800502c <__libc_init_array+0xc>
 800504e:	00b3      	lsls	r3, r6, #2
 8005050:	58eb      	ldr	r3, [r5, r3]
 8005052:	4798      	blx	r3
 8005054:	3601      	adds	r6, #1
 8005056:	e7f2      	b.n	800503e <__libc_init_array+0x1e>
 8005058:	080050fc 	.word	0x080050fc
 800505c:	080050fc 	.word	0x080050fc
 8005060:	080050fc 	.word	0x080050fc
 8005064:	08005100 	.word	0x08005100

08005068 <memcpy>:
 8005068:	2300      	movs	r3, #0
 800506a:	b510      	push	{r4, lr}
 800506c:	429a      	cmp	r2, r3
 800506e:	d100      	bne.n	8005072 <memcpy+0xa>
 8005070:	bd10      	pop	{r4, pc}
 8005072:	5ccc      	ldrb	r4, [r1, r3]
 8005074:	54c4      	strb	r4, [r0, r3]
 8005076:	3301      	adds	r3, #1
 8005078:	e7f8      	b.n	800506c <memcpy+0x4>

0800507a <memset>:
 800507a:	0003      	movs	r3, r0
 800507c:	1812      	adds	r2, r2, r0
 800507e:	4293      	cmp	r3, r2
 8005080:	d100      	bne.n	8005084 <memset+0xa>
 8005082:	4770      	bx	lr
 8005084:	7019      	strb	r1, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	e7f9      	b.n	800507e <memset+0x4>
	...

0800508c <_init>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr

08005098 <_fini>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr
