
DexTires_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b88  08003b88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b88  08003b88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b88  08003b88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b8c  08003b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08003b9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003b9c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4d4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001adc  00000000  00000000  0002a508  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  0002bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  0002cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000e56d  00000000  00000000  0002d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000907f  00000000  00000000  0003bc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005451c  00000000  00000000  00044ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000991e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab4  00000000  00000000  00099264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b38 	.word	0x08003b38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003b38 	.word	0x08003b38

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fecc 	bl	8001194 <HAL_Init>

  /* USER CODE BEGIN Init */
  ADC_val = 0;
 80003fc:	4b16      	ldr	r3, [pc, #88]	; (8000458 <main+0x64>)
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
  LEDsRunning = 0;
 8000402:	4b16      	ldr	r3, [pc, #88]	; (800045c <main+0x68>)
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
  enableLEDs = 0;
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <main+0x6c>)
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040e:	f000 f831 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000412:	f000 fa79 	bl	8000908 <MX_GPIO_Init>

  /* TIM3 controls LEDs during calibration */
  MX_TIM3_Init();
 8000416:	f000 f90f 	bl	8000638 <MX_TIM3_Init>

  /* TIM2 controls DC motors */
  MX_TIM2_Init();
 800041a:	f000 f88d 	bl	8000538 <MX_TIM2_Init>

  /* TIM15 controls servo */
  MX_TIM15_Init();
 800041e:	f000 f9ad 	bl	800077c <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000422:	f000 fa41 	bl	80008a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //START TIMERS
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <main+0x70>)
 8000428:	210c      	movs	r1, #12
 800042a:	0018      	movs	r0, r3
 800042c:	f001 ff6c 	bl	8002308 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000430:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <main+0x74>)
 8000432:	2100      	movs	r1, #0
 8000434:	0018      	movs	r0, r3
 8000436:	f001 ff67 	bl	8002308 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Enabling the Receiver Interrupt for UART transmission
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <main+0x78>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <main+0x78>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2120      	movs	r1, #32
 8000446:	430a      	orrs	r2, r1
 8000448:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DecodeData(rxbuffer);
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <main+0x7c>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fae0 	bl	8000a14 <DecodeData>
 8000454:	e7f9      	b.n	800044a <main+0x56>
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	20000130 	.word	0x20000130
 800045c:	20000028 	.word	0x20000028
 8000460:	2000002c 	.word	0x2000002c
 8000464:	20000134 	.word	0x20000134
 8000468:	20000030 	.word	0x20000030
 800046c:	200000b0 	.word	0x200000b0
 8000470:	20000174 	.word	0x20000174

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b097      	sub	sp, #92	; 0x5c
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	2428      	movs	r4, #40	; 0x28
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2330      	movs	r3, #48	; 0x30
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f003 fb4f 	bl	8003b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048a:	2318      	movs	r3, #24
 800048c:	18fb      	adds	r3, r7, r3
 800048e:	0018      	movs	r0, r3
 8000490:	2310      	movs	r3, #16
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f003 fb47 	bl	8003b28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	0018      	movs	r0, r3
 800049e:	2314      	movs	r3, #20
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f003 fb40 	bl	8003b28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a8:	0021      	movs	r1, r4
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2202      	movs	r2, #2
 80004ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2201      	movs	r2, #1
 80004b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2210      	movs	r2, #16
 80004ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2202      	movs	r2, #2
 80004c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2200      	movs	r2, #0
 80004c6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	22a0      	movs	r2, #160	; 0xa0
 80004cc:	0392      	lsls	r2, r2, #14
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2200      	movs	r2, #0
 80004d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 f971 	bl	80017c0 <HAL_RCC_OscConfig>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004e2:	f000 fc63 	bl	8000dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e6:	2118      	movs	r1, #24
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2207      	movs	r2, #7
 80004ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2202      	movs	r2, #2
 80004f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2101      	movs	r1, #1
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fc77 	bl	8001df8 <HAL_RCC_ClockConfig>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800050e:	f000 fc4d 	bl	8000dac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2201      	movs	r2, #1
 8000516:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fdbb 	bl	800209c <HAL_RCCEx_PeriphCLKConfig>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800052a:	f000 fc3f 	bl	8000dac <Error_Handler>
  }
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b017      	add	sp, #92	; 0x5c
 8000534:	bd90      	pop	{r4, r7, pc}
	...

08000538 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08e      	sub	sp, #56	; 0x38
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053e:	2328      	movs	r3, #40	; 0x28
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	0018      	movs	r0, r3
 8000544:	2310      	movs	r3, #16
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f003 faed 	bl	8003b28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054e:	2320      	movs	r3, #32
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	0018      	movs	r0, r3
 8000554:	2308      	movs	r3, #8
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f003 fae5 	bl	8003b28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	0018      	movs	r0, r3
 8000562:	231c      	movs	r3, #28
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	f003 fade 	bl	8003b28 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800056c:	4b30      	ldr	r3, [pc, #192]	; (8000630 <MX_TIM2_Init+0xf8>)
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	05d2      	lsls	r2, r2, #23
 8000572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000574:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <MX_TIM2_Init+0xf8>)
 8000576:	225f      	movs	r2, #95	; 0x5f
 8000578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <MX_TIM2_Init+0xf8>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000580:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <MX_TIM2_Init+0xf8>)
 8000582:	4a2c      	ldr	r2, [pc, #176]	; (8000634 <MX_TIM2_Init+0xfc>)
 8000584:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000586:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <MX_TIM2_Init+0xf8>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <MX_TIM2_Init+0xf8>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_TIM2_Init+0xf8>)
 8000594:	0018      	movs	r0, r3
 8000596:	f001 fe5f 	bl	8002258 <HAL_TIM_Base_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800059e:	f000 fc05 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a2:	2128      	movs	r1, #40	; 0x28
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	0152      	lsls	r2, r2, #5
 80005aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005ac:	187a      	adds	r2, r7, r1
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_TIM2_Init+0xf8>)
 80005b0:	0011      	movs	r1, r2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 f810 	bl	80025d8 <HAL_TIM_ConfigClockSource>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80005bc:	f000 fbf6 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_TIM2_Init+0xf8>)
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fe74 	bl	80022b0 <HAL_TIM_PWM_Init>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80005cc:	f000 fbee 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d0:	2120      	movs	r1, #32
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005de:	187a      	adds	r2, r7, r1
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_TIM2_Init+0xf8>)
 80005e2:	0011      	movs	r1, r2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f002 fbef 	bl	8002dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80005ee:	f000 fbdd 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2260      	movs	r2, #96	; 0x60
 80005f6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800060a:	1d39      	adds	r1, r7, #4
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_TIM2_Init+0xf8>)
 800060e:	220c      	movs	r2, #12
 8000610:	0018      	movs	r0, r3
 8000612:	f001 ff29 	bl	8002468 <HAL_TIM_PWM_ConfigChannel>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800061a:	f000 fbc7 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <MX_TIM2_Init+0xf8>)
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fc3d 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b00e      	add	sp, #56	; 0x38
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	20000134 	.word	0x20000134
 8000634:	0000270f 	.word	0x0000270f

08000638 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08e      	sub	sp, #56	; 0x38
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063e:	2328      	movs	r3, #40	; 0x28
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	0018      	movs	r0, r3
 8000644:	2310      	movs	r3, #16
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f003 fa6d 	bl	8003b28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064e:	2320      	movs	r3, #32
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	0018      	movs	r0, r3
 8000654:	2308      	movs	r3, #8
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f003 fa65 	bl	8003b28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	231c      	movs	r3, #28
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f003 fa5e 	bl	8003b28 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800066c:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <MX_TIM3_Init+0x130>)
 800066e:	4a3f      	ldr	r2, [pc, #252]	; (800076c <MX_TIM3_Init+0x134>)
 8000670:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8000672:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <MX_TIM3_Init+0x130>)
 8000674:	4a3e      	ldr	r2, [pc, #248]	; (8000770 <MX_TIM3_Init+0x138>)
 8000676:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <MX_TIM3_Init+0x130>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1199;
 800067e:	4b3a      	ldr	r3, [pc, #232]	; (8000768 <MX_TIM3_Init+0x130>)
 8000680:	4a3c      	ldr	r2, [pc, #240]	; (8000774 <MX_TIM3_Init+0x13c>)
 8000682:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000684:	4b38      	ldr	r3, [pc, #224]	; (8000768 <MX_TIM3_Init+0x130>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068a:	4b37      	ldr	r3, [pc, #220]	; (8000768 <MX_TIM3_Init+0x130>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000690:	4b35      	ldr	r3, [pc, #212]	; (8000768 <MX_TIM3_Init+0x130>)
 8000692:	0018      	movs	r0, r3
 8000694:	f001 fde0 	bl	8002258 <HAL_TIM_Base_Init>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800069c:	f000 fb86 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a0:	2128      	movs	r1, #40	; 0x28
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	0152      	lsls	r2, r2, #5
 80006a8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006aa:	187a      	adds	r2, r7, r1
 80006ac:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <MX_TIM3_Init+0x130>)
 80006ae:	0011      	movs	r1, r2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 ff91 	bl	80025d8 <HAL_TIM_ConfigClockSource>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80006ba:	f000 fb77 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <MX_TIM3_Init+0x130>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fdf5 	bl	80022b0 <HAL_TIM_PWM_Init>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80006ca:	f000 fb6f 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2120      	movs	r1, #32
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006dc:	187a      	adds	r2, r7, r1
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_TIM3_Init+0x130>)
 80006e0:	0011      	movs	r1, r2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f002 fb70 	bl	8002dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80006ec:	f000 fb5e 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2260      	movs	r2, #96	; 0x60
 80006f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 599;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <MX_TIM3_Init+0x140>)
 80006fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000708:	1d39      	adds	r1, r7, #4
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_TIM3_Init+0x130>)
 800070c:	2200      	movs	r2, #0
 800070e:	0018      	movs	r0, r3
 8000710:	f001 feaa 	bl	8002468 <HAL_TIM_PWM_ConfigChannel>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000718:	f000 fb48 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800071c:	1d39      	adds	r1, r7, #4
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_TIM3_Init+0x130>)
 8000720:	2204      	movs	r2, #4
 8000722:	0018      	movs	r0, r3
 8000724:	f001 fea0 	bl	8002468 <HAL_TIM_PWM_ConfigChannel>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 800072c:	f000 fb3e 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000730:	1d39      	adds	r1, r7, #4
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_TIM3_Init+0x130>)
 8000734:	2208      	movs	r2, #8
 8000736:	0018      	movs	r0, r3
 8000738:	f001 fe96 	bl	8002468 <HAL_TIM_PWM_ConfigChannel>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8000740:	f000 fb34 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000744:	1d39      	adds	r1, r7, #4
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_TIM3_Init+0x130>)
 8000748:	220c      	movs	r2, #12
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fe8c 	bl	8002468 <HAL_TIM_PWM_ConfigChannel>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8000754:	f000 fb2a 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <MX_TIM3_Init+0x130>)
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fba0 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b00e      	add	sp, #56	; 0x38
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000070 	.word	0x20000070
 800076c:	40000400 	.word	0x40000400
 8000770:	0000270f 	.word	0x0000270f
 8000774:	000004af 	.word	0x000004af
 8000778:	00000257 	.word	0x00000257

0800077c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b092      	sub	sp, #72	; 0x48
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	0018      	movs	r0, r3
 8000788:	2308      	movs	r3, #8
 800078a:	001a      	movs	r2, r3
 800078c:	2100      	movs	r1, #0
 800078e:	f003 f9cb 	bl	8003b28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000792:	2324      	movs	r3, #36	; 0x24
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	0018      	movs	r0, r3
 8000798:	231c      	movs	r3, #28
 800079a:	001a      	movs	r2, r3
 800079c:	2100      	movs	r1, #0
 800079e:	f003 f9c3 	bl	8003b28 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	0018      	movs	r0, r3
 80007a6:	2320      	movs	r3, #32
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	f003 f9bc 	bl	8003b28 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80007b0:	4b3a      	ldr	r3, [pc, #232]	; (800089c <MX_TIM15_Init+0x120>)
 80007b2:	4a3b      	ldr	r2, [pc, #236]	; (80008a0 <MX_TIM15_Init+0x124>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 95;
 80007b6:	4b39      	ldr	r3, [pc, #228]	; (800089c <MX_TIM15_Init+0x120>)
 80007b8:	225f      	movs	r2, #95	; 0x5f
 80007ba:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <MX_TIM15_Init+0x120>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 80007c2:	4b36      	ldr	r3, [pc, #216]	; (800089c <MX_TIM15_Init+0x120>)
 80007c4:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <MX_TIM15_Init+0x128>)
 80007c6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b34      	ldr	r3, [pc, #208]	; (800089c <MX_TIM15_Init+0x120>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80007ce:	4b33      	ldr	r3, [pc, #204]	; (800089c <MX_TIM15_Init+0x120>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b31      	ldr	r3, [pc, #196]	; (800089c <MX_TIM15_Init+0x120>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80007da:	4b30      	ldr	r3, [pc, #192]	; (800089c <MX_TIM15_Init+0x120>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 fd67 	bl	80022b0 <HAL_TIM_PWM_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 fae1 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80007f8:	187a      	adds	r2, r7, r1
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <MX_TIM15_Init+0x120>)
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f002 fae2 	bl	8002dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000808:	f000 fad0 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080c:	2124      	movs	r1, #36	; 0x24
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2260      	movs	r2, #96	; 0x60
 8000812:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000838:	1879      	adds	r1, r7, r1
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_TIM15_Init+0x120>)
 800083c:	2200      	movs	r2, #0
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fe12 	bl	8002468 <HAL_TIM_PWM_ConfigChannel>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000848:	f000 fab0 	bl	8000dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2280      	movs	r2, #128	; 0x80
 800086e:	0192      	lsls	r2, r2, #6
 8000870:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000878:	1d3a      	adds	r2, r7, #4
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_TIM15_Init+0x120>)
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f002 fb00 	bl	8002e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 8000888:	f000 fa90 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <MX_TIM15_Init+0x120>)
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fb06 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b012      	add	sp, #72	; 0x48
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000030 	.word	0x20000030
 80008a0:	40014000 	.word	0x40014000
 80008a4:	0000270f 	.word	0x0000270f

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_USART1_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008b4:	2296      	movs	r2, #150	; 0x96
 80008b6:	0192      	lsls	r2, r2, #6
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f002 fb27 	bl	8002f40 <HAL_UART_Init>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 fa59 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000b0 	.word	0x200000b0
 8000904:	40013800 	.word	0x40013800

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	240c      	movs	r4, #12
 8000910:	193b      	adds	r3, r7, r4
 8000912:	0018      	movs	r0, r3
 8000914:	2314      	movs	r3, #20
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f003 f905 	bl	8003b28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000920:	695a      	ldr	r2, [r3, #20]
 8000922:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0289      	lsls	r1, r1, #10
 8000928:	430a      	orrs	r2, r1
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <MX_GPIO_Init+0x100>)
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	029b      	lsls	r3, r3, #10
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <MX_GPIO_Init+0x100>)
 800093c:	695a      	ldr	r2, [r3, #20]
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	02c9      	lsls	r1, r1, #11
 8000944:	430a      	orrs	r2, r1
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <MX_GPIO_Init+0x100>)
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	02db      	lsls	r3, r3, #11
 8000950:	4013      	ands	r3, r2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000958:	695a      	ldr	r2, [r3, #20]
 800095a:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <MX_GPIO_Init+0x100>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0309      	lsls	r1, r1, #12
 8000960:	430a      	orrs	r2, r1
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000966:	695a      	ldr	r2, [r3, #20]
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	031b      	lsls	r3, r3, #12
 800096c:	4013      	ands	r3, r2
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA_Pin|INB_Pin, GPIO_PIN_RESET);
 8000972:	2390      	movs	r3, #144	; 0x90
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	2200      	movs	r2, #0
 8000978:	2130      	movs	r1, #48	; 0x30
 800097a:	0018      	movs	r0, r3
 800097c:	f000 ff02 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000980:	23c0      	movs	r3, #192	; 0xc0
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4821      	ldr	r0, [pc, #132]	; (8000a0c <MX_GPIO_Init+0x104>)
 8000986:	2200      	movs	r2, #0
 8000988:	0019      	movs	r1, r3
 800098a:	f000 fefb 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000994:	193b      	adds	r3, r7, r4
 8000996:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <MX_GPIO_Init+0x108>)
 8000998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a0:	193a      	adds	r2, r7, r4
 80009a2:	2390      	movs	r3, #144	; 0x90
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fd7b 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA_Pin INB_Pin */
  GPIO_InitStruct.Pin = INA_Pin|INB_Pin;
 80009ae:	0021      	movs	r1, r4
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2230      	movs	r2, #48	; 0x30
 80009b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2201      	movs	r2, #1
 80009ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	000c      	movs	r4, r1
 80009ca:	187a      	adds	r2, r7, r1
 80009cc:	2390      	movs	r3, #144	; 0x90
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	0011      	movs	r1, r2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 fd66 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80009d8:	0021      	movs	r1, r4
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	22c0      	movs	r2, #192	; 0xc0
 80009de:	0092      	lsls	r2, r2, #2
 80009e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2201      	movs	r2, #1
 80009e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <MX_GPIO_Init+0x104>)
 80009f8:	0019      	movs	r1, r3
 80009fa:	0010      	movs	r0, r2
 80009fc:	f000 fd52 	bl	80014a4 <HAL_GPIO_Init>

}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b009      	add	sp, #36	; 0x24
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000800 	.word	0x48000800
 8000a10:	10110000 	.word	0x10110000

08000a14 <DecodeData>:
/* void DecodeData(uint8_t message)
 * Function takes in the received rxbuffer value and decodes it into the appropriate
 * mode, speed, and direction bits. If the remote is in calibration mode, then motors are disabled
 * and LEDs are enabled. Else, motors are enabled and appropriate speed translations into
 * PWM are performed.*/
void DecodeData(uint8_t message) {
 8000a14:	b5b0      	push	{r4, r5, r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	701a      	strb	r2, [r3, #0]
	uint8_t mode = message >> 7; //Get bit-7
 8000a20:	200f      	movs	r0, #15
 8000a22:	183b      	adds	r3, r7, r0
 8000a24:	1dfa      	adds	r2, r7, #7
 8000a26:	7812      	ldrb	r2, [r2, #0]
 8000a28:	09d2      	lsrs	r2, r2, #7
 8000a2a:	701a      	strb	r2, [r3, #0]
	uint8_t direction = (message >> 5) & 0x3; // Get bit-6 and bit-5
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	095b      	lsrs	r3, r3, #5
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	230e      	movs	r3, #14
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	2103      	movs	r1, #3
 8000a3a:	400a      	ands	r2, r1
 8000a3c:	701a      	strb	r2, [r3, #0]
	uint8_t speed = message & 0x1F; //Get the bottom 5 bits (0 to 4)
 8000a3e:	230d      	movs	r3, #13
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	1dfa      	adds	r2, r7, #7
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	211f      	movs	r1, #31
 8000a48:	400a      	ands	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]

	//Check for Calibration Mode (mode is 0 if calibration)
	if (mode == 0) {
 8000a4c:	183b      	adds	r3, r7, r0
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d10e      	bne.n	8000a72 <DecodeData+0x5e>
		enableLEDs = 1;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <DecodeData+0xa4>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	601a      	str	r2, [r3, #0]
		speed_conversion(0, direction); //Don't run the DC Motors
 8000a5a:	230e      	movs	r3, #14
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	0019      	movs	r1, r3
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f934 	bl	8000cd0 <speed_conversion>
		angle_conversion(0, 0); //Don't turn the Servo Motor
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f8f0 	bl	8000c50 <angle_conversion>
 8000a70:	e014      	b.n	8000a9c <DecodeData+0x88>
	} else {
		enableLEDs = 0;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <DecodeData+0xa4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
		speed_conversion(speed, direction);
 8000a78:	240e      	movs	r4, #14
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	250d      	movs	r5, #13
 8000a80:	197b      	adds	r3, r7, r5
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	0011      	movs	r1, r2
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 f922 	bl	8000cd0 <speed_conversion>
		angle_conversion(speed, direction);
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	197b      	adds	r3, r7, r5
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 f8da 	bl	8000c50 <angle_conversion>
	}

	SetCalibrationLights(direction, speed);
 8000a9c:	230d      	movs	r3, #13
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	230e      	movs	r3, #14
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	0011      	movs	r1, r2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 f806 	bl	8000abc <SetCalibrationLights>
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b004      	add	sp, #16
 8000ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab8:	2000002c 	.word	0x2000002c

08000abc <SetCalibrationLights>:
// TODO: While car is not connected, blink all car lights every second to indicate disconnection

/* void SetCalibrationLights(uint8_t direction, uint8_t pressure)
 * Depending on the mode and speed bits, change the intensity of the headlights corresponding to the
 * states in calibration state machine. */
void SetCalibrationLights(uint8_t direction, uint8_t pressure) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	0002      	movs	r2, r0
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	1c0a      	adds	r2, r1, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	if (enableLEDs) {
 8000ace:	4b5b      	ldr	r3, [pc, #364]	; (8000c3c <SetCalibrationLights+0x180>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d100      	bne.n	8000ad8 <SetCalibrationLights+0x1c>
 8000ad6:	e095      	b.n	8000c04 <SetCalibrationLights+0x148>
		//If LEDs are already running, return

		int indication = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
		int pulseWidth = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]

		//Enable Timer Channels
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ae0:	4b57      	ldr	r3, [pc, #348]	; (8000c40 <SetCalibrationLights+0x184>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 fc0f 	bl	8002308 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000aea:	4b55      	ldr	r3, [pc, #340]	; (8000c40 <SetCalibrationLights+0x184>)
 8000aec:	2104      	movs	r1, #4
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 fc0a 	bl	8002308 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000af4:	4b52      	ldr	r3, [pc, #328]	; (8000c40 <SetCalibrationLights+0x184>)
 8000af6:	2108      	movs	r1, #8
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 fc05 	bl	8002308 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000afe:	4b50      	ldr	r3, [pc, #320]	; (8000c40 <SetCalibrationLights+0x184>)
 8000b00:	210c      	movs	r1, #12
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 fc00 	bl	8002308 <HAL_TIM_PWM_Start>

		switch (direction) {
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d00b      	beq.n	8000b28 <SetCalibrationLights+0x6c>
 8000b10:	dc02      	bgt.n	8000b18 <SetCalibrationLights+0x5c>
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d005      	beq.n	8000b22 <SetCalibrationLights+0x66>
 8000b16:	e010      	b.n	8000b3a <SetCalibrationLights+0x7e>
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d008      	beq.n	8000b2e <SetCalibrationLights+0x72>
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d009      	beq.n	8000b34 <SetCalibrationLights+0x78>
 8000b20:	e00b      	b.n	8000b3a <SetCalibrationLights+0x7e>
			case 0: indication = Back; break;
 8000b22:	2302      	movs	r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	e00b      	b.n	8000b40 <SetCalibrationLights+0x84>
			case 1: indication = Right; break;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	e008      	b.n	8000b40 <SetCalibrationLights+0x84>
			case 2: indication = Left; break;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e005      	b.n	8000b40 <SetCalibrationLights+0x84>
			case 3: indication = Front; break;
 8000b34:	2301      	movs	r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e002      	b.n	8000b40 <SetCalibrationLights+0x84>
			default: indication = Off; break;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	46c0      	nop			; (mov r8, r8)
		}

		//Note: Prescaler value = 9999
		// here, pressure is referring to the speed bits that are sent during calibration mode.
		if (pressure == 1) {
 8000b40:	1dbb      	adds	r3, r7, #6
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d107      	bne.n	8000b58 <SetCalibrationLights+0x9c>
			//Rest Pressure
			__HAL_TIM_SET_AUTORELOAD(&htim3, 2399); //2Hz
 8000b48:	4b3d      	ldr	r3, [pc, #244]	; (8000c40 <SetCalibrationLights+0x184>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a3d      	ldr	r2, [pc, #244]	; (8000c44 <SetCalibrationLights+0x188>)
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b50:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <SetCalibrationLights+0x184>)
 8000b52:	4a3c      	ldr	r2, [pc, #240]	; (8000c44 <SetCalibrationLights+0x188>)
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	e00a      	b.n	8000b6e <SetCalibrationLights+0xb2>
		} else if (pressure == 2) {
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d106      	bne.n	8000b6e <SetCalibrationLights+0xb2>
			//Full Pressure
			__HAL_TIM_SET_AUTORELOAD(&htim3, 1199); //4Hz
 8000b60:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <SetCalibrationLights+0x184>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a38      	ldr	r2, [pc, #224]	; (8000c48 <SetCalibrationLights+0x18c>)
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b68:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <SetCalibrationLights+0x184>)
 8000b6a:	4a37      	ldr	r2, [pc, #220]	; (8000c48 <SetCalibrationLights+0x18c>)
 8000b6c:	60da      	str	r2, [r3, #12]
		}

		//Get half of the ARR to set the duty cycle to 50%
		pulseWidth = ((__HAL_TIM_GET_AUTORELOAD(&htim3) + 1) / 2) - 1;
 8000b6e:	4b34      	ldr	r3, [pc, #208]	; (8000c40 <SetCalibrationLights+0x184>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b74:	3301      	adds	r3, #1
 8000b76:	085b      	lsrs	r3, r3, #1
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ((indication & Front) || (indication & Left)) * pulseWidth);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4013      	ands	r3, r2
 8000b82:	d103      	bne.n	8000b8c <SetCalibrationLights+0xd0>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2204      	movs	r2, #4
 8000b88:	4013      	ands	r3, r2
 8000b8a:	d001      	beq.n	8000b90 <SetCalibrationLights+0xd4>
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e000      	b.n	8000b92 <SetCalibrationLights+0xd6>
 8000b90:	2300      	movs	r3, #0
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	435a      	muls	r2, r3
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <SetCalibrationLights+0x184>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ((indication & Front) || (indication & Right)) * pulseWidth);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d103      	bne.n	8000bac <SetCalibrationLights+0xf0>
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	4013      	ands	r3, r2
 8000baa:	d001      	beq.n	8000bb0 <SetCalibrationLights+0xf4>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e000      	b.n	8000bb2 <SetCalibrationLights+0xf6>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	435a      	muls	r2, r3
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <SetCalibrationLights+0x184>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ((indication & Back) || (indication & Left)) * pulseWidth);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	d103      	bne.n	8000bcc <SetCalibrationLights+0x110>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d001      	beq.n	8000bd0 <SetCalibrationLights+0x114>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <SetCalibrationLights+0x116>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	435a      	muls	r2, r3
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <SetCalibrationLights+0x184>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ((indication & Back) || (indication & Right)) * pulseWidth);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2202      	movs	r2, #2
 8000be0:	4013      	ands	r3, r2
 8000be2:	d103      	bne.n	8000bec <SetCalibrationLights+0x130>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2208      	movs	r2, #8
 8000be8:	4013      	ands	r3, r2
 8000bea:	d001      	beq.n	8000bf0 <SetCalibrationLights+0x134>
 8000bec:	2301      	movs	r3, #1
 8000bee:	e000      	b.n	8000bf2 <SetCalibrationLights+0x136>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	435a      	muls	r2, r3
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <SetCalibrationLights+0x184>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	641a      	str	r2, [r3, #64]	; 0x40

		LEDsRunning = 1;
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <SetCalibrationLights+0x190>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);

		LEDsRunning = 0;
	}
}
 8000c02:	e016      	b.n	8000c32 <SetCalibrationLights+0x176>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <SetCalibrationLights+0x184>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f001 fbc9 	bl	80023a0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <SetCalibrationLights+0x184>)
 8000c10:	2104      	movs	r1, #4
 8000c12:	0018      	movs	r0, r3
 8000c14:	f001 fbc4 	bl	80023a0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <SetCalibrationLights+0x184>)
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f001 fbbf 	bl	80023a0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <SetCalibrationLights+0x184>)
 8000c24:	210c      	movs	r1, #12
 8000c26:	0018      	movs	r0, r3
 8000c28:	f001 fbba 	bl	80023a0 <HAL_TIM_PWM_Stop>
		LEDsRunning = 0;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <SetCalibrationLights+0x190>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b004      	add	sp, #16
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	2000002c 	.word	0x2000002c
 8000c40:	20000070 	.word	0x20000070
 8000c44:	0000095f 	.word	0x0000095f
 8000c48:	000004af 	.word	0x000004af
 8000c4c:	20000028 	.word	0x20000028

08000c50 <angle_conversion>:

/* void angle_conversion(uint8_t input, uint8_t right_left)
 * Function to convert the speed bits into corresponding angle
 * by taking the inverse. Hardcoded values are based on servo datasheet and
 * prior calculations. */
void angle_conversion(uint8_t input, uint8_t right_left) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	0002      	movs	r2, r0
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	1dbb      	adds	r3, r7, #6
 8000c5e:	1c0a      	adds	r2, r1, #0
 8000c60:	701a      	strb	r2, [r3, #0]
	int pulse_width = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]

	if (right_left == 1) {
 8000c66:	1dbb      	adds	r3, r7, #6
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d10c      	bne.n	8000c88 <angle_conversion+0x38>
		//Right
		pulse_width = (int)(400 + (250 * input / 31));
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	22fa      	movs	r2, #250	; 0xfa
 8000c74:	4353      	muls	r3, r2
 8000c76:	211f      	movs	r1, #31
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff facf 	bl	800021c <__divsi3>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	3391      	adds	r3, #145	; 0x91
 8000c82:	33ff      	adds	r3, #255	; 0xff
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	e014      	b.n	8000cb2 <angle_conversion+0x62>
	} else if(right_left == 2) {
 8000c88:	1dbb      	adds	r3, r7, #6
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d10e      	bne.n	8000cae <angle_conversion+0x5e>
		//Left
		pulse_width = (int)(1100 - (250 * input / 31));
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	22fa      	movs	r2, #250	; 0xfa
 8000c96:	435a      	muls	r2, r3
 8000c98:	231f      	movs	r3, #31
 8000c9a:	4259      	negs	r1, r3
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	f7ff fabd 	bl	800021c <__divsi3>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <angle_conversion+0x74>)
 8000ca6:	4694      	mov	ip, r2
 8000ca8:	4463      	add	r3, ip
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	e001      	b.n	8000cb2 <angle_conversion+0x62>
	} else {
		//No turning
		pulse_width = 750;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <angle_conversion+0x78>)
 8000cb0:	60fb      	str	r3, [r7, #12]
	}

	htim15.Instance->CCR1 = pulse_width;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <angle_conversion+0x7c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	0000044c 	.word	0x0000044c
 8000cc8:	000002ee 	.word	0x000002ee
 8000ccc:	20000030 	.word	0x20000030

08000cd0 <speed_conversion>:

/* void speed_conversion(uint8_t input, uint8_t front_back)
 * Function to convert the speed bits (uint8_t input) into correct PWM output for
 * DC motors. */
void speed_conversion(uint8_t input, uint8_t front_back)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	1dbb      	adds	r3, r7, #6
 8000cde:	1c0a      	adds	r2, r1, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
	int duty_cycle_percentage = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]

	/* The following min_percentage is based on tested values to see when the DC
	 * motors actually run and when they do not. max_percentage is based on when
	 * we thought the DC motors speed was too high, so we limited the max PWM output. */
	// was at 50 and 80
	int min_percentage = 40;
 8000ce6:	2328      	movs	r3, #40	; 0x28
 8000ce8:	613b      	str	r3, [r7, #16]
	int max_percentage = 50;
 8000cea:	2332      	movs	r3, #50	; 0x32
 8000cec:	60fb      	str	r3, [r7, #12]

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);

	// This selection construct takes care of the polarity input to the motor driver.
	if(front_back == 3 || front_back == 1 || front_back == 2)//clockwise, forward/right/left
 8000cee:	1dbb      	adds	r3, r7, #6
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d007      	beq.n	8000d06 <speed_conversion+0x36>
 8000cf6:	1dbb      	adds	r3, r7, #6
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d003      	beq.n	8000d06 <speed_conversion+0x36>
 8000cfe:	1dbb      	adds	r3, r7, #6
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d10e      	bne.n	8000d24 <speed_conversion+0x54>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1); //INA
 8000d06:	2390      	movs	r3, #144	; 0x90
 8000d08:	05db      	lsls	r3, r3, #23
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 fd38 	bl	8001784 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0); //INB
 8000d14:	2390      	movs	r3, #144	; 0x90
 8000d16:	05db      	lsls	r3, r3, #23
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f000 fd31 	bl	8001784 <HAL_GPIO_WritePin>
 8000d22:	e011      	b.n	8000d48 <speed_conversion+0x78>
	}
	else if(front_back == 0)//anticlockwise, back
 8000d24:	1dbb      	adds	r3, r7, #6
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10d      	bne.n	8000d48 <speed_conversion+0x78>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0); //INA
 8000d2c:	2390      	movs	r3, #144	; 0x90
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	2200      	movs	r2, #0
 8000d32:	2110      	movs	r1, #16
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fd25 	bl	8001784 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); //INB
 8000d3a:	2390      	movs	r3, #144	; 0x90
 8000d3c:	05db      	lsls	r3, r3, #23
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2120      	movs	r1, #32
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 fd1e 	bl	8001784 <HAL_GPIO_WritePin>
	}

	// if speed is 0, then no duty cycle
	if(input == 0) {
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <speed_conversion+0x86>
		duty_cycle_percentage = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e016      	b.n	8000d84 <speed_conversion+0xb4>
	}
	// if speed is 1, then min duty cycle
	else if (input == 1) {
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d102      	bne.n	8000d64 <speed_conversion+0x94>
		duty_cycle_percentage = min_percentage;
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e00f      	b.n	8000d84 <speed_conversion+0xb4>
	}
	// if speed is in acceleration range, then compute correct duty cycle percentage
	else {
		duty_cycle_percentage = ((max_percentage - min_percentage)*(input - 1)/30) + min_percentage;
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	1dfa      	adds	r2, r7, #7
 8000d6c:	7812      	ldrb	r2, [r2, #0]
 8000d6e:	3a01      	subs	r2, #1
 8000d70:	4353      	muls	r3, r2
 8000d72:	211e      	movs	r1, #30
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fa51 	bl	800021c <__divsi3>
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	189b      	adds	r3, r3, r2
 8000d82:	617b      	str	r3, [r7, #20]
	}

	htim2.Instance->CCR4 = duty_cycle_percentage * (htim2.Instance->ARR+1) / 100;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <speed_conversion+0xd8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	435a      	muls	r2, r3
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <speed_conversion+0xd8>)
 8000d92:	681c      	ldr	r4, [r3, #0]
 8000d94:	2164      	movs	r1, #100	; 0x64
 8000d96:	0010      	movs	r0, r2
 8000d98:	f7ff f9b6 	bl	8000108 <__udivsi3>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b007      	add	sp, #28
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	20000134 	.word	0x20000134

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_MspInit+0x44>)
 8000dc0:	699a      	ldr	r2, [r3, #24]
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_MspInit+0x44>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	619a      	str	r2, [r3, #24]
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_MspInit+0x44>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_MspInit+0x44>)
 8000dd8:	69da      	ldr	r2, [r3, #28]
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_MspInit+0x44>)
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	0549      	lsls	r1, r1, #21
 8000de0:	430a      	orrs	r2, r1
 8000de2:	61da      	str	r2, [r3, #28]
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_MspInit+0x44>)
 8000de6:	69da      	ldr	r2, [r3, #28]
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	055b      	lsls	r3, r3, #21
 8000dec:	4013      	ands	r3, r2
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	05db      	lsls	r3, r3, #23
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d10c      	bne.n	8000e2e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_TIM_Base_MspInit+0x58>)
 8000e16:	69da      	ldr	r2, [r3, #28]
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_TIM_Base_MspInit+0x58>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	61da      	str	r2, [r3, #28]
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_TIM_Base_MspInit+0x58>)
 8000e22:	69db      	ldr	r3, [r3, #28]
 8000e24:	2201      	movs	r2, #1
 8000e26:	4013      	ands	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e2c:	e010      	b.n	8000e50 <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM3)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_TIM_Base_MspInit+0x5c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d10b      	bne.n	8000e50 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <HAL_TIM_Base_MspInit+0x58>)
 8000e3a:	69da      	ldr	r2, [r3, #28]
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_TIM_Base_MspInit+0x58>)
 8000e3e:	2102      	movs	r1, #2
 8000e40:	430a      	orrs	r2, r1
 8000e42:	61da      	str	r2, [r3, #28]
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <HAL_TIM_Base_MspInit+0x58>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b004      	add	sp, #16
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40000400 	.word	0x40000400

08000e60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_TIM_PWM_MspInit+0x38>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d10d      	bne.n	8000e8e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e74:	699a      	ldr	r2, [r3, #24]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	0249      	lsls	r1, r1, #9
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	619a      	str	r2, [r3, #24]
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e82:	699a      	ldr	r2, [r3, #24]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	025b      	lsls	r3, r3, #9
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b004      	add	sp, #16
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40014000 	.word	0x40014000
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b08d      	sub	sp, #52	; 0x34
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	231c      	movs	r3, #28
 8000eaa:	18fb      	adds	r3, r7, r3
 8000eac:	0018      	movs	r0, r3
 8000eae:	2314      	movs	r3, #20
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	f002 fe38 	bl	8003b28 <memset>
  if(htim->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	05db      	lsls	r3, r3, #23
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d125      	bne.n	8000f10 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b51      	ldr	r3, [pc, #324]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000ec6:	695a      	ldr	r2, [r3, #20]
 8000ec8:	4b50      	ldr	r3, [pc, #320]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	0289      	lsls	r1, r1, #10
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	615a      	str	r2, [r3, #20]
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000ed4:	695a      	ldr	r2, [r3, #20]
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	029b      	lsls	r3, r3, #10
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
 8000ede:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = DC_PWM_Pin;
 8000ee0:	211c      	movs	r1, #28
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	2202      	movs	r2, #2
 8000eec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2202      	movs	r2, #2
 8000efe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DC_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f00:	187a      	adds	r2, r7, r1
 8000f02:	2390      	movs	r3, #144	; 0x90
 8000f04:	05db      	lsls	r3, r3, #23
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f000 facb 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000f0e:	e078      	b.n	8001002 <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a3e      	ldr	r2, [pc, #248]	; (8001010 <HAL_TIM_MspPostInit+0x170>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d149      	bne.n	8000fae <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b3c      	ldr	r3, [pc, #240]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	0289      	lsls	r1, r1, #10
 8000f24:	430a      	orrs	r2, r1
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	4b38      	ldr	r3, [pc, #224]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4013      	ands	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b35      	ldr	r3, [pc, #212]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	4b34      	ldr	r3, [pc, #208]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	02c9      	lsls	r1, r1, #11
 8000f40:	430a      	orrs	r2, r1
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	4b31      	ldr	r3, [pc, #196]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000f46:	695a      	ldr	r2, [r3, #20]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	02db      	lsls	r3, r3, #11
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FL_Pin|FR_Pin;
 8000f52:	241c      	movs	r4, #28
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	22c0      	movs	r2, #192	; 0xc0
 8000f58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	2201      	movs	r2, #1
 8000f70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	193a      	adds	r2, r7, r4
 8000f74:	2390      	movs	r3, #144	; 0x90
 8000f76:	05db      	lsls	r3, r3, #23
 8000f78:	0011      	movs	r1, r2
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 fa92 	bl	80014a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BL_Pin|BR_Pin;
 8000f80:	0021      	movs	r1, r4
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2203      	movs	r2, #3
 8000f86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_TIM_MspPostInit+0x174>)
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	0010      	movs	r0, r2
 8000fa8:	f000 fa7c 	bl	80014a4 <HAL_GPIO_Init>
}
 8000fac:	e029      	b.n	8001002 <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM15)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a19      	ldr	r2, [pc, #100]	; (8001018 <HAL_TIM_MspPostInit+0x178>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d124      	bne.n	8001002 <HAL_TIM_MspPostInit+0x162>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000fba:	695a      	ldr	r2, [r3, #20]
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	0289      	lsls	r1, r1, #10
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_TIM_MspPostInit+0x16c>)
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	029b      	lsls	r3, r3, #10
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8000fd4:	211c      	movs	r1, #28
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2204      	movs	r2, #4
 8000fda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2202      	movs	r2, #2
 8000fe0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	187a      	adds	r2, r7, r1
 8000ff6:	2390      	movs	r3, #144	; 0x90
 8000ff8:	05db      	lsls	r3, r3, #23
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f000 fa51 	bl	80014a4 <HAL_GPIO_Init>
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b00d      	add	sp, #52	; 0x34
 8001008:	bd90      	pop	{r4, r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40021000 	.word	0x40021000
 8001010:	40000400 	.word	0x40000400
 8001014:	48000400 	.word	0x48000400
 8001018:	40014000 	.word	0x40014000

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	2314      	movs	r3, #20
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	0018      	movs	r0, r3
 800102a:	2314      	movs	r3, #20
 800102c:	001a      	movs	r2, r3
 800102e:	2100      	movs	r1, #0
 8001030:	f002 fd7a 	bl	8003b28 <memset>
  if(huart->Instance==USART1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_UART_MspInit+0xa4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d13b      	bne.n	80010b6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_UART_MspInit+0xa8>)
 8001040:	699a      	ldr	r2, [r3, #24]
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <HAL_UART_MspInit+0xa8>)
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	01c9      	lsls	r1, r1, #7
 8001048:	430a      	orrs	r2, r1
 800104a:	619a      	str	r2, [r3, #24]
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <HAL_UART_MspInit+0xa8>)
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	01db      	lsls	r3, r3, #7
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_UART_MspInit+0xa8>)
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_UART_MspInit+0xa8>)
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	0289      	lsls	r1, r1, #10
 8001064:	430a      	orrs	r2, r1
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_UART_MspInit+0xa8>)
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001076:	2114      	movs	r1, #20
 8001078:	187b      	adds	r3, r7, r1
 800107a:	22c0      	movs	r2, #192	; 0xc0
 800107c:	00d2      	lsls	r2, r2, #3
 800107e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2202      	movs	r2, #2
 8001084:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2203      	movs	r2, #3
 8001090:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2201      	movs	r2, #1
 8001096:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	187a      	adds	r2, r7, r1
 800109a:	2390      	movs	r3, #144	; 0x90
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f000 f9ff 	bl	80014a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	201b      	movs	r0, #27
 80010ac:	f000 f982 	bl	80013b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010b0:	201b      	movs	r0, #27
 80010b2:	f000 f994 	bl	80013de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b00a      	add	sp, #40	; 0x28
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	40013800 	.word	0x40013800
 80010c4:	40021000 	.word	0x40021000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 f898 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  HAL_UART_Receive(&huart1, (uint8_t *)&rxbuffer, 1, 100);
 8001100:	490a      	ldr	r1, [pc, #40]	; (800112c <USART1_IRQHandler+0x30>)
 8001102:	480b      	ldr	r0, [pc, #44]	; (8001130 <USART1_IRQHandler+0x34>)
 8001104:	2364      	movs	r3, #100	; 0x64
 8001106:	2201      	movs	r2, #1
 8001108:	f001 ff6e 	bl	8002fe8 <HAL_UART_Receive>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <USART1_IRQHandler+0x34>)
 800110e:	0018      	movs	r0, r3
 8001110:	f002 f842 	bl	8003198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <USART1_IRQHandler+0x34>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <USART1_IRQHandler+0x34>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2120      	movs	r1, #32
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	20000174 	.word	0x20000174
 8001130:	200000b0 	.word	0x200000b0

08001134 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <Reset_Handler>:
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopForever+0x2>)
 8001142:	4685      	mov	sp, r0
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <LoopForever+0x6>)
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <LoopForever+0xa>)
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <LoopForever+0xe>)
 800114a:	2300      	movs	r3, #0
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:
 800114e:	58d4      	ldr	r4, [r2, r3]
 8001150:	50c4      	str	r4, [r0, r3]
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:
 8001154:	18c4      	adds	r4, r0, r3
 8001156:	428c      	cmp	r4, r1
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopForever+0x12>)
 800115c:	4c0b      	ldr	r4, [pc, #44]	; (800118c <LoopForever+0x16>)
 800115e:	2300      	movs	r3, #0
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:
 8001166:	42a2      	cmp	r2, r4
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>
 800116a:	f7ff ffe3 	bl	8001134 <SystemInit>
 800116e:	f002 fcb7 	bl	8003ae0 <__libc_init_array>
 8001172:	f7ff f93f 	bl	80003f4 <main>

08001176 <LoopForever>:
 8001176:	e7fe      	b.n	8001176 <LoopForever>
 8001178:	20002000 	.word	0x20002000
 800117c:	20000000 	.word	0x20000000
 8001180:	2000000c 	.word	0x2000000c
 8001184:	08003b90 	.word	0x08003b90
 8001188:	2000000c 	.word	0x2000000c
 800118c:	2000017c 	.word	0x2000017c

08001190 <ADC1_COMP_IRQHandler>:
 8001190:	e7fe      	b.n	8001190 <ADC1_COMP_IRQHandler>
	...

08001194 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <HAL_Init+0x24>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_Init+0x24>)
 800119e:	2110      	movs	r1, #16
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f809 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011aa:	f7ff fe05 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	40022000 	.word	0x40022000

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_InitTick+0x5c>)
 80011c6:	681c      	ldr	r4, [r3, #0]
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_InitTick+0x60>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	0019      	movs	r1, r3
 80011ce:	23fa      	movs	r3, #250	; 0xfa
 80011d0:	0098      	lsls	r0, r3, #2
 80011d2:	f7fe ff99 	bl	8000108 <__udivsi3>
 80011d6:	0003      	movs	r3, r0
 80011d8:	0019      	movs	r1, r3
 80011da:	0020      	movs	r0, r4
 80011dc:	f7fe ff94 	bl	8000108 <__udivsi3>
 80011e0:	0003      	movs	r3, r0
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f90b 	bl	80013fe <HAL_SYSTICK_Config>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e00f      	b.n	8001210 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d80b      	bhi.n	800120e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
 80011fc:	2200      	movs	r2, #0
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 f8d8 	bl	80013b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_InitTick+0x64>)
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b003      	add	sp, #12
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	20000000 	.word	0x20000000
 800121c:	20000008 	.word	0x20000008
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_IncTick+0x1c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	001a      	movs	r2, r3
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x20>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	18d2      	adds	r2, r2, r3
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_IncTick+0x20>)
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	20000008 	.word	0x20000008
 8001244:	20000178 	.word	0x20000178

08001248 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <HAL_GetTick+0x10>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	20000178 	.word	0x20000178

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	0002      	movs	r2, r0
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b7f      	cmp	r3, #127	; 0x7f
 800126e:	d809      	bhi.n	8001284 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	001a      	movs	r2, r3
 8001276:	231f      	movs	r3, #31
 8001278:	401a      	ands	r2, r3
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_EnableIRQ+0x30>)
 800127c:	2101      	movs	r1, #1
 800127e:	4091      	lsls	r1, r2
 8001280:	000a      	movs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
  }
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	0002      	movs	r2, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b7f      	cmp	r3, #127	; 0x7f
 80012a4:	d828      	bhi.n	80012f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a6:	4a2f      	ldr	r2, [pc, #188]	; (8001364 <__NVIC_SetPriority+0xd4>)
 80012a8:	1dfb      	adds	r3, r7, #7
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	33c0      	adds	r3, #192	; 0xc0
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	589b      	ldr	r3, [r3, r2]
 80012b6:	1dfa      	adds	r2, r7, #7
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	0011      	movs	r1, r2
 80012bc:	2203      	movs	r2, #3
 80012be:	400a      	ands	r2, r1
 80012c0:	00d2      	lsls	r2, r2, #3
 80012c2:	21ff      	movs	r1, #255	; 0xff
 80012c4:	4091      	lsls	r1, r2
 80012c6:	000a      	movs	r2, r1
 80012c8:	43d2      	mvns	r2, r2
 80012ca:	401a      	ands	r2, r3
 80012cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	22ff      	movs	r2, #255	; 0xff
 80012d4:	401a      	ands	r2, r3
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	0018      	movs	r0, r3
 80012dc:	2303      	movs	r3, #3
 80012de:	4003      	ands	r3, r0
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e4:	481f      	ldr	r0, [pc, #124]	; (8001364 <__NVIC_SetPriority+0xd4>)
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	430a      	orrs	r2, r1
 80012f0:	33c0      	adds	r3, #192	; 0xc0
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012f6:	e031      	b.n	800135c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f8:	4a1b      	ldr	r2, [pc, #108]	; (8001368 <__NVIC_SetPriority+0xd8>)
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	0019      	movs	r1, r3
 8001300:	230f      	movs	r3, #15
 8001302:	400b      	ands	r3, r1
 8001304:	3b08      	subs	r3, #8
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3306      	adds	r3, #6
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	18d3      	adds	r3, r2, r3
 800130e:	3304      	adds	r3, #4
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	1dfa      	adds	r2, r7, #7
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	0011      	movs	r1, r2
 8001318:	2203      	movs	r2, #3
 800131a:	400a      	ands	r2, r1
 800131c:	00d2      	lsls	r2, r2, #3
 800131e:	21ff      	movs	r1, #255	; 0xff
 8001320:	4091      	lsls	r1, r2
 8001322:	000a      	movs	r2, r1
 8001324:	43d2      	mvns	r2, r2
 8001326:	401a      	ands	r2, r3
 8001328:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	019b      	lsls	r3, r3, #6
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	401a      	ands	r2, r3
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	0018      	movs	r0, r3
 8001338:	2303      	movs	r3, #3
 800133a:	4003      	ands	r3, r0
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <__NVIC_SetPriority+0xd8>)
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	001c      	movs	r4, r3
 8001348:	230f      	movs	r3, #15
 800134a:	4023      	ands	r3, r4
 800134c:	3b08      	subs	r3, #8
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	430a      	orrs	r2, r1
 8001352:	3306      	adds	r3, #6
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	18c3      	adds	r3, r0, r3
 8001358:	3304      	adds	r3, #4
 800135a:	601a      	str	r2, [r3, #0]
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b003      	add	sp, #12
 8001362:	bd90      	pop	{r4, r7, pc}
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <SysTick_Config+0x40>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e010      	b.n	80013a4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <SysTick_Config+0x44>)
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	3a01      	subs	r2, #1
 8001388:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	2301      	movs	r3, #1
 800138c:	425b      	negs	r3, r3
 800138e:	2103      	movs	r1, #3
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff ff7d 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <SysTick_Config+0x44>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x44>)
 800139e:	2207      	movs	r2, #7
 80013a0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	00ffffff 	.word	0x00ffffff
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	210f      	movs	r1, #15
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	1c02      	adds	r2, r0, #0
 80013c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	0011      	movs	r1, r2
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff ff5d 	bl	8001290 <__NVIC_SetPriority>
}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	b004      	add	sp, #16
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	0002      	movs	r2, r0
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff ff33 	bl	800125c <__NVIC_EnableIRQ>
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b002      	add	sp, #8
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff ffaf 	bl	800136c <SysTick_Config>
 800140e:	0003      	movs	r3, r0
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2221      	movs	r2, #33	; 0x21
 800142c:	5c9b      	ldrb	r3, [r3, r2]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d007      	beq.n	8001444 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2204      	movs	r2, #4
 8001438:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800143a:	230f      	movs	r3, #15
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e028      	b.n	8001496 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	210e      	movs	r1, #14
 8001450:	438a      	bics	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2101      	movs	r1, #1
 8001460:	438a      	bics	r2, r1
 8001462:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146c:	2101      	movs	r1, #1
 800146e:	4091      	lsls	r1, r2
 8001470:	000a      	movs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2221      	movs	r2, #33	; 0x21
 8001478:	2101      	movs	r1, #1
 800147a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2220      	movs	r2, #32
 8001480:	2100      	movs	r1, #0
 8001482:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	0010      	movs	r0, r2
 8001494:	4798      	blx	r3
    } 
  }
  return status;
 8001496:	230f      	movs	r3, #15
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	781b      	ldrb	r3, [r3, #0]
}
 800149c:	0018      	movs	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	b004      	add	sp, #16
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b2:	e14f      	b.n	8001754 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4091      	lsls	r1, r2
 80014be:	000a      	movs	r2, r1
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d100      	bne.n	80014cc <HAL_GPIO_Init+0x28>
 80014ca:	e140      	b.n	800174e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d00b      	beq.n	80014ec <HAL_GPIO_Init+0x48>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d007      	beq.n	80014ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e0:	2b11      	cmp	r3, #17
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b12      	cmp	r3, #18
 80014ea:	d130      	bne.n	800154e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	409a      	lsls	r2, r3
 80014fa:	0013      	movs	r3, r2
 80014fc:	43da      	mvns	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	409a      	lsls	r2, r3
 800150e:	0013      	movs	r3, r2
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001522:	2201      	movs	r2, #1
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	43da      	mvns	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	2201      	movs	r2, #1
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	43da      	mvns	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0xea>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b12      	cmp	r3, #18
 800158c:	d123      	bne.n	80015d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	58d3      	ldr	r3, [r2, r3]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2207      	movs	r2, #7
 80015a0:	4013      	ands	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2107      	movs	r1, #7
 80015ba:	400b      	ands	r3, r1
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	409a      	lsls	r2, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	08da      	lsrs	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3208      	adds	r2, #8
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	6939      	ldr	r1, [r7, #16]
 80015d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	43da      	mvns	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2203      	movs	r2, #3
 80015f4:	401a      	ands	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	055b      	lsls	r3, r3, #21
 8001612:	4013      	ands	r3, r2
 8001614:	d100      	bne.n	8001618 <HAL_GPIO_Init+0x174>
 8001616:	e09a      	b.n	800174e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001618:	4b54      	ldr	r3, [pc, #336]	; (800176c <HAL_GPIO_Init+0x2c8>)
 800161a:	699a      	ldr	r2, [r3, #24]
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_GPIO_Init+0x2c8>)
 800161e:	2101      	movs	r1, #1
 8001620:	430a      	orrs	r2, r1
 8001622:	619a      	str	r2, [r3, #24]
 8001624:	4b51      	ldr	r3, [pc, #324]	; (800176c <HAL_GPIO_Init+0x2c8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2201      	movs	r2, #1
 800162a:	4013      	ands	r3, r2
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001630:	4a4f      	ldr	r2, [pc, #316]	; (8001770 <HAL_GPIO_Init+0x2cc>)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	589b      	ldr	r3, [r3, r2]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2203      	movs	r2, #3
 8001642:	4013      	ands	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	409a      	lsls	r2, r3
 800164a:	0013      	movs	r3, r2
 800164c:	43da      	mvns	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	2390      	movs	r3, #144	; 0x90
 8001658:	05db      	lsls	r3, r3, #23
 800165a:	429a      	cmp	r2, r3
 800165c:	d013      	beq.n	8001686 <HAL_GPIO_Init+0x1e2>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a44      	ldr	r2, [pc, #272]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d00d      	beq.n	8001682 <HAL_GPIO_Init+0x1de>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a43      	ldr	r2, [pc, #268]	; (8001778 <HAL_GPIO_Init+0x2d4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d007      	beq.n	800167e <HAL_GPIO_Init+0x1da>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a42      	ldr	r2, [pc, #264]	; (800177c <HAL_GPIO_Init+0x2d8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d101      	bne.n	800167a <HAL_GPIO_Init+0x1d6>
 8001676:	2303      	movs	r3, #3
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x1e4>
 800167a:	2305      	movs	r3, #5
 800167c:	e004      	b.n	8001688 <HAL_GPIO_Init+0x1e4>
 800167e:	2302      	movs	r3, #2
 8001680:	e002      	b.n	8001688 <HAL_GPIO_Init+0x1e4>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x1e4>
 8001686:	2300      	movs	r3, #0
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	2103      	movs	r1, #3
 800168c:	400a      	ands	r2, r1
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	4093      	lsls	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001698:	4935      	ldr	r1, [pc, #212]	; (8001770 <HAL_GPIO_Init+0x2cc>)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3302      	adds	r3, #2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <HAL_GPIO_Init+0x2dc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43da      	mvns	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	025b      	lsls	r3, r3, #9
 80016be:	4013      	ands	r3, r2
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_GPIO_Init+0x2dc>)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <HAL_GPIO_Init+0x2dc>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43da      	mvns	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	029b      	lsls	r3, r3, #10
 80016e8:	4013      	ands	r3, r2
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016f4:	4b22      	ldr	r3, [pc, #136]	; (8001780 <HAL_GPIO_Init+0x2dc>)
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <HAL_GPIO_Init+0x2dc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43da      	mvns	r2, r3
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	035b      	lsls	r3, r3, #13
 8001712:	4013      	ands	r3, r2
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_GPIO_Init+0x2dc>)
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_GPIO_Init+0x2dc>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	43da      	mvns	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	039b      	lsls	r3, r3, #14
 800173c:	4013      	ands	r3, r2
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_GPIO_Init+0x2dc>)
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	40da      	lsrs	r2, r3
 800175c:	1e13      	subs	r3, r2, #0
 800175e:	d000      	beq.n	8001762 <HAL_GPIO_Init+0x2be>
 8001760:	e6a8      	b.n	80014b4 <HAL_GPIO_Init+0x10>
  } 
}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b006      	add	sp, #24
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	40021000 	.word	0x40021000
 8001770:	40010000 	.word	0x40010000
 8001774:	48000400 	.word	0x48000400
 8001778:	48000800 	.word	0x48000800
 800177c:	48000c00 	.word	0x48000c00
 8001780:	40010400 	.word	0x40010400

08001784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	0008      	movs	r0, r1
 800178e:	0011      	movs	r1, r2
 8001790:	1cbb      	adds	r3, r7, #2
 8001792:	1c02      	adds	r2, r0, #0
 8001794:	801a      	strh	r2, [r3, #0]
 8001796:	1c7b      	adds	r3, r7, #1
 8001798:	1c0a      	adds	r2, r1, #0
 800179a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179c:	1c7b      	adds	r3, r7, #1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a4:	1cbb      	adds	r3, r7, #2
 80017a6:	881a      	ldrh	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ac:	e003      	b.n	80017b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ae:	1cbb      	adds	r3, r7, #2
 80017b0:	881a      	ldrh	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e303      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4013      	ands	r3, r2
 80017da:	d100      	bne.n	80017de <HAL_RCC_OscConfig+0x1e>
 80017dc:	e08d      	b.n	80018fa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017de:	4bc4      	ldr	r3, [pc, #784]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	220c      	movs	r2, #12
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d00e      	beq.n	8001808 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ea:	4bc1      	ldr	r3, [pc, #772]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	220c      	movs	r2, #12
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d116      	bne.n	8001824 <HAL_RCC_OscConfig+0x64>
 80017f6:	4bbe      	ldr	r3, [pc, #760]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	025b      	lsls	r3, r3, #9
 80017fe:	401a      	ands	r2, r3
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	025b      	lsls	r3, r3, #9
 8001804:	429a      	cmp	r2, r3
 8001806:	d10d      	bne.n	8001824 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	4bb9      	ldr	r3, [pc, #740]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	4013      	ands	r3, r2
 8001812:	d100      	bne.n	8001816 <HAL_RCC_OscConfig+0x56>
 8001814:	e070      	b.n	80018f8 <HAL_RCC_OscConfig+0x138>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d000      	beq.n	8001820 <HAL_RCC_OscConfig+0x60>
 800181e:	e06b      	b.n	80018f8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e2da      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x7c>
 800182c:	4bb0      	ldr	r3, [pc, #704]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4baf      	ldr	r3, [pc, #700]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	0249      	lsls	r1, r1, #9
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e02f      	b.n	800189c <HAL_RCC_OscConfig+0xdc>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10c      	bne.n	800185e <HAL_RCC_OscConfig+0x9e>
 8001844:	4baa      	ldr	r3, [pc, #680]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4ba9      	ldr	r3, [pc, #676]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800184a:	49aa      	ldr	r1, [pc, #680]	; (8001af4 <HAL_RCC_OscConfig+0x334>)
 800184c:	400a      	ands	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	4ba7      	ldr	r3, [pc, #668]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4ba6      	ldr	r3, [pc, #664]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001856:	49a8      	ldr	r1, [pc, #672]	; (8001af8 <HAL_RCC_OscConfig+0x338>)
 8001858:	400a      	ands	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	e01e      	b.n	800189c <HAL_RCC_OscConfig+0xdc>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d10e      	bne.n	8001884 <HAL_RCC_OscConfig+0xc4>
 8001866:	4ba2      	ldr	r3, [pc, #648]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4ba1      	ldr	r3, [pc, #644]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	02c9      	lsls	r1, r1, #11
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	4b9e      	ldr	r3, [pc, #632]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b9d      	ldr	r3, [pc, #628]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	0249      	lsls	r1, r1, #9
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0xdc>
 8001884:	4b9a      	ldr	r3, [pc, #616]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b99      	ldr	r3, [pc, #612]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800188a:	499a      	ldr	r1, [pc, #616]	; (8001af4 <HAL_RCC_OscConfig+0x334>)
 800188c:	400a      	ands	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	4b97      	ldr	r3, [pc, #604]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b96      	ldr	r3, [pc, #600]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001896:	4998      	ldr	r1, [pc, #608]	; (8001af8 <HAL_RCC_OscConfig+0x338>)
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d014      	beq.n	80018ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fcd0 	bl	8001248 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ae:	f7ff fccb 	bl	8001248 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	; 0x64
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e28c      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c0:	4b8b      	ldr	r3, [pc, #556]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0xee>
 80018cc:	e015      	b.n	80018fa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff fcbb 	bl	8001248 <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fcb6 	bl	8001248 <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e277      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	029b      	lsls	r3, r3, #10
 80018f2:	4013      	ands	r3, r2
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x118>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2202      	movs	r2, #2
 8001900:	4013      	ands	r3, r2
 8001902:	d100      	bne.n	8001906 <HAL_RCC_OscConfig+0x146>
 8001904:	e069      	b.n	80019da <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001906:	4b7a      	ldr	r3, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	220c      	movs	r2, #12
 800190c:	4013      	ands	r3, r2
 800190e:	d00b      	beq.n	8001928 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001910:	4b77      	ldr	r3, [pc, #476]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	220c      	movs	r2, #12
 8001916:	4013      	ands	r3, r2
 8001918:	2b08      	cmp	r3, #8
 800191a:	d11c      	bne.n	8001956 <HAL_RCC_OscConfig+0x196>
 800191c:	4b74      	ldr	r3, [pc, #464]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	025b      	lsls	r3, r3, #9
 8001924:	4013      	ands	r3, r2
 8001926:	d116      	bne.n	8001956 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001928:	4b71      	ldr	r3, [pc, #452]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d005      	beq.n	800193e <HAL_RCC_OscConfig+0x17e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d001      	beq.n	800193e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e24d      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	4b6c      	ldr	r3, [pc, #432]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	22f8      	movs	r2, #248	; 0xf8
 8001944:	4393      	bics	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	00da      	lsls	r2, r3, #3
 800194e:	4b68      	ldr	r3, [pc, #416]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001954:	e041      	b.n	80019da <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d024      	beq.n	80019a8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800195e:	4b64      	ldr	r3, [pc, #400]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001964:	2101      	movs	r1, #1
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff fc6d 	bl	8001248 <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001974:	f7ff fc68 	bl	8001248 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e229      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2202      	movs	r2, #2
 800198c:	4013      	ands	r3, r2
 800198e:	d0f1      	beq.n	8001974 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001990:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	22f8      	movs	r2, #248	; 0xf8
 8001996:	4393      	bics	r3, r2
 8001998:	0019      	movs	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	00da      	lsls	r2, r3, #3
 80019a0:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e018      	b.n	80019da <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a8:	4b51      	ldr	r3, [pc, #324]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	438a      	bics	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fc48 	bl	8001248 <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff fc43 	bl	8001248 <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e204      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d0:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2202      	movs	r2, #2
 80019d6:	4013      	ands	r3, r2
 80019d8:	d1f1      	bne.n	80019be <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2208      	movs	r2, #8
 80019e0:	4013      	ands	r3, r2
 80019e2:	d036      	beq.n	8001a52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d019      	beq.n	8001a20 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ec:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80019ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f0:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	430a      	orrs	r2, r1
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff fc26 	bl	8001248 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a02:	f7ff fc21 	bl	8001248 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1e2      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	2202      	movs	r2, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d0f1      	beq.n	8001a02 <HAL_RCC_OscConfig+0x242>
 8001a1e:	e018      	b.n	8001a52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a24:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	438a      	bics	r2, r1
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fc0c 	bl	8001248 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a36:	f7ff fc07 	bl	8001248 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e1c8      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a48:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d1f1      	bne.n	8001a36 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2204      	movs	r2, #4
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d100      	bne.n	8001a5e <HAL_RCC_OscConfig+0x29e>
 8001a5c:	e0b6      	b.n	8001bcc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	231f      	movs	r3, #31
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a66:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	055b      	lsls	r3, r3, #21
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d111      	bne.n	8001a96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	0549      	lsls	r1, r1, #21
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	61da      	str	r2, [r3, #28]
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001a82:	69da      	ldr	r2, [r3, #28]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	055b      	lsls	r3, r3, #21
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a8e:	231f      	movs	r3, #31
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x33c>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d11a      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_RCC_OscConfig+0x33c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_RCC_OscConfig+0x33c>)
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	0049      	lsls	r1, r1, #1
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fbca 	bl	8001248 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff fbc5 	bl	8001248 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b64      	cmp	r3, #100	; 0x64
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e186      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_OscConfig+0x33c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d10f      	bne.n	8001b00 <HAL_RCC_OscConfig+0x340>
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001ae2:	6a1a      	ldr	r2, [r3, #32]
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <HAL_RCC_OscConfig+0x330>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	621a      	str	r2, [r3, #32]
 8001aec:	e036      	b.n	8001b5c <HAL_RCC_OscConfig+0x39c>
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	40021000 	.word	0x40021000
 8001af4:	fffeffff 	.word	0xfffeffff
 8001af8:	fffbffff 	.word	0xfffbffff
 8001afc:	40007000 	.word	0x40007000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x362>
 8001b08:	4bb6      	ldr	r3, [pc, #728]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	4bb5      	ldr	r3, [pc, #724]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b0e:	2101      	movs	r1, #1
 8001b10:	438a      	bics	r2, r1
 8001b12:	621a      	str	r2, [r3, #32]
 8001b14:	4bb3      	ldr	r3, [pc, #716]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b16:	6a1a      	ldr	r2, [r3, #32]
 8001b18:	4bb2      	ldr	r3, [pc, #712]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	438a      	bics	r2, r1
 8001b1e:	621a      	str	r2, [r3, #32]
 8001b20:	e01c      	b.n	8001b5c <HAL_RCC_OscConfig+0x39c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x384>
 8001b2a:	4bae      	ldr	r3, [pc, #696]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b2c:	6a1a      	ldr	r2, [r3, #32]
 8001b2e:	4bad      	ldr	r3, [pc, #692]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b30:	2104      	movs	r1, #4
 8001b32:	430a      	orrs	r2, r1
 8001b34:	621a      	str	r2, [r3, #32]
 8001b36:	4bab      	ldr	r3, [pc, #684]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b38:	6a1a      	ldr	r2, [r3, #32]
 8001b3a:	4baa      	ldr	r3, [pc, #680]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	621a      	str	r2, [r3, #32]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0x39c>
 8001b44:	4ba7      	ldr	r3, [pc, #668]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b46:	6a1a      	ldr	r2, [r3, #32]
 8001b48:	4ba6      	ldr	r3, [pc, #664]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	621a      	str	r2, [r3, #32]
 8001b50:	4ba4      	ldr	r3, [pc, #656]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	4ba3      	ldr	r3, [pc, #652]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b56:	2104      	movs	r1, #4
 8001b58:	438a      	bics	r2, r1
 8001b5a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d014      	beq.n	8001b8e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff fb70 	bl	8001248 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fb6b 	bl	8001248 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4a9b      	ldr	r2, [pc, #620]	; (8001de8 <HAL_RCC_OscConfig+0x628>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e12b      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b82:	4b98      	ldr	r3, [pc, #608]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x3ae>
 8001b8c:	e013      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fb5b 	bl	8001248 <HAL_GetTick>
 8001b92:	0003      	movs	r3, r0
 8001b94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b96:	e009      	b.n	8001bac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff fb56 	bl	8001248 <HAL_GetTick>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	4a91      	ldr	r2, [pc, #580]	; (8001de8 <HAL_RCC_OscConfig+0x628>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e116      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	4b8d      	ldr	r3, [pc, #564]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bb6:	231f      	movs	r3, #31
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4b88      	ldr	r3, [pc, #544]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001bc2:	69da      	ldr	r2, [r3, #28]
 8001bc4:	4b87      	ldr	r3, [pc, #540]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001bc6:	4989      	ldr	r1, [pc, #548]	; (8001dec <HAL_RCC_OscConfig+0x62c>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d063      	beq.n	8001c9e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d12a      	bne.n	8001c34 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bde:	4b81      	ldr	r3, [pc, #516]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be2:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001be4:	2104      	movs	r1, #4
 8001be6:	430a      	orrs	r2, r1
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001bea:	4b7e      	ldr	r3, [pc, #504]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bee:	4b7d      	ldr	r3, [pc, #500]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fb27 	bl	8001248 <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c00:	f7ff fb22 	bl	8001248 <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0e3      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c12:	4b74      	ldr	r3, [pc, #464]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c16:	2202      	movs	r2, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d0f1      	beq.n	8001c00 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c1c:	4b71      	ldr	r3, [pc, #452]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c20:	22f8      	movs	r2, #248	; 0xf8
 8001c22:	4393      	bics	r3, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	00da      	lsls	r2, r3, #3
 8001c2c:	4b6d      	ldr	r3, [pc, #436]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34
 8001c32:	e034      	b.n	8001c9e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	3305      	adds	r3, #5
 8001c3a:	d111      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c3c:	4b69      	ldr	r3, [pc, #420]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c40:	4b68      	ldr	r3, [pc, #416]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c42:	2104      	movs	r1, #4
 8001c44:	438a      	bics	r2, r1
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c48:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4c:	22f8      	movs	r2, #248	; 0xf8
 8001c4e:	4393      	bics	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	00da      	lsls	r2, r3, #3
 8001c58:	4b62      	ldr	r3, [pc, #392]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c5e:	e01e      	b.n	8001c9e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c60:	4b60      	ldr	r3, [pc, #384]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c64:	4b5f      	ldr	r3, [pc, #380]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c66:	2104      	movs	r1, #4
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c6c:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c70:	4b5c      	ldr	r3, [pc, #368]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c72:	2101      	movs	r1, #1
 8001c74:	438a      	bics	r2, r1
 8001c76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c78:	f7ff fae6 	bl	8001248 <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c82:	f7ff fae1 	bl	8001248 <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0a2      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c94:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c98:	2202      	movs	r2, #2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d1f1      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d100      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4e8>
 8001ca6:	e097      	b.n	8001dd8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	220c      	movs	r2, #12
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d100      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x4f6>
 8001cb4:	e06b      	b.n	8001d8e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d14c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b48      	ldr	r3, [pc, #288]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001cc4:	494a      	ldr	r1, [pc, #296]	; (8001df0 <HAL_RCC_OscConfig+0x630>)
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff fabd 	bl	8001248 <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff fab8 	bl	8001248 <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e079      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce6:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	049b      	lsls	r3, r3, #18
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	4393      	bics	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4a3a      	ldr	r2, [pc, #232]	; (8001df4 <HAL_RCC_OscConfig+0x634>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	0449      	lsls	r1, r1, #17
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fa8b 	bl	8001248 <HAL_GetTick>
 8001d32:	0003      	movs	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff fa86 	bl	8001248 <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e047      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	049b      	lsls	r3, r3, #18
 8001d52:	4013      	ands	r3, r2
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x578>
 8001d56:	e03f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d58:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d5e:	4924      	ldr	r1, [pc, #144]	; (8001df0 <HAL_RCC_OscConfig+0x630>)
 8001d60:	400a      	ands	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fa70 	bl	8001248 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff fa6b 	bl	8001248 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e02c      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	049b      	lsls	r3, r3, #18
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5ae>
 8001d8c:	e024      	b.n	8001dd8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e01f      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001da0:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	025b      	lsls	r3, r3, #9
 8001dac:	401a      	ands	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d10e      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	220f      	movs	r2, #15
 8001dba:	401a      	ands	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	23f0      	movs	r3, #240	; 0xf0
 8001dc8:	039b      	lsls	r3, r3, #14
 8001dca:	401a      	ands	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b008      	add	sp, #32
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	40021000 	.word	0x40021000
 8001de8:	00001388 	.word	0x00001388
 8001dec:	efffffff 	.word	0xefffffff
 8001df0:	feffffff 	.word	0xfeffffff
 8001df4:	ffc2ffff 	.word	0xffc2ffff

08001df8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0b3      	b.n	8001f74 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b5b      	ldr	r3, [pc, #364]	; (8001f7c <HAL_RCC_ClockConfig+0x184>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d911      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x184>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	4b55      	ldr	r3, [pc, #340]	; (8001f7c <HAL_RCC_ClockConfig+0x184>)
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x184>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2201      	movs	r2, #1
 8001e32:	4013      	ands	r3, r2
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e09a      	b.n	8001f74 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2202      	movs	r2, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	d015      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d006      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e52:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001e58:	21e0      	movs	r1, #224	; 0xe0
 8001e5a:	00c9      	lsls	r1, r1, #3
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b47      	ldr	r3, [pc, #284]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	22f0      	movs	r2, #240	; 0xf0
 8001e66:	4393      	bics	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d040      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	029b      	lsls	r3, r3, #10
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d114      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06e      	b.n	8001f74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	049b      	lsls	r3, r3, #18
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d108      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e062      	b.n	8001f74 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e05b      	b.n	8001f74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebc:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4393      	bics	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7ff f9ba 	bl	8001248 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed8:	e009      	b.n	8001eee <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eda:	f7ff f9b5 	bl	8001248 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	4a27      	ldr	r2, [pc, #156]	; (8001f84 <HAL_RCC_ClockConfig+0x18c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e042      	b.n	8001f74 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1ec      	bne.n	8001eda <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_RCC_ClockConfig+0x184>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d211      	bcs.n	8001f32 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_ClockConfig+0x184>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4393      	bics	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_RCC_ClockConfig+0x184>)
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x184>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e020      	b.n	8001f74 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2204      	movs	r2, #4
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_RCC_ClockConfig+0x190>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f50:	f000 f820 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f54:	0001      	movs	r1, r0
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x188>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	4013      	ands	r3, r2
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x194>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	000a      	movs	r2, r1
 8001f66:	40da      	lsrs	r2, r3
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x198>)
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff f925 	bl	80011bc <HAL_InitTick>
  
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b004      	add	sp, #16
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40022000 	.word	0x40022000
 8001f80:	40021000 	.word	0x40021000
 8001f84:	00001388 	.word	0x00001388
 8001f88:	fffff8ff 	.word	0xfffff8ff
 8001f8c:	08003b70 	.word	0x08003b70
 8001f90:	20000000 	.word	0x20000000

08001f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b08f      	sub	sp, #60	; 0x3c
 8001f98:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001f9a:	2314      	movs	r3, #20
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	4a2b      	ldr	r2, [pc, #172]	; (800204c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001fa2:	c313      	stmia	r3!, {r0, r1, r4}
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	4a29      	ldr	r2, [pc, #164]	; (8002050 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001fae:	c313      	stmia	r3!, {r0, r1, r4}
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	220c      	movs	r2, #12
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d002      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0x4a>
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d003      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x50>
 8001fdc:	e02d      	b.n	800203a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fe2:	e02d      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe6:	0c9b      	lsrs	r3, r3, #18
 8001fe8:	220f      	movs	r2, #15
 8001fea:	4013      	ands	r3, r2
 8001fec:	2214      	movs	r2, #20
 8001fee:	18ba      	adds	r2, r7, r2
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ff4:	4b17      	ldr	r3, [pc, #92]	; (8002054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	1d3a      	adds	r2, r7, #4
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	025b      	lsls	r3, r3, #9
 8002008:	4013      	ands	r3, r2
 800200a:	d009      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800200c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800200e:	4812      	ldr	r0, [pc, #72]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002010:	f7fe f87a 	bl	8000108 <__udivsi3>
 8002014:	0003      	movs	r3, r0
 8002016:	001a      	movs	r2, r3
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	4353      	muls	r3, r2
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
 800201e:	e009      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002022:	000a      	movs	r2, r1
 8002024:	0152      	lsls	r2, r2, #5
 8002026:	1a52      	subs	r2, r2, r1
 8002028:	0193      	lsls	r3, r2, #6
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	185b      	adds	r3, r3, r1
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002036:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002038:	e002      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc4>)
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800203e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b00f      	add	sp, #60	; 0x3c
 8002048:	bd90      	pop	{r4, r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	08003b50 	.word	0x08003b50
 8002050:	08003b60 	.word	0x08003b60
 8002054:	40021000 	.word	0x40021000
 8002058:	007a1200 	.word	0x007a1200

0800205c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002060:	4b02      	ldr	r3, [pc, #8]	; (800206c <HAL_RCC_GetHCLKFreq+0x10>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	20000000 	.word	0x20000000

08002070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002074:	f7ff fff2 	bl	800205c <HAL_RCC_GetHCLKFreq>
 8002078:	0001      	movs	r1, r0
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	2207      	movs	r2, #7
 8002082:	4013      	ands	r3, r2
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	40d9      	lsrs	r1, r3
 800208a:	000b      	movs	r3, r1
}    
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	40021000 	.word	0x40021000
 8002098:	08003b80 	.word	0x08003b80

0800209c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	4013      	ands	r3, r2
 80020b6:	d100      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80020b8:	e08f      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2317      	movs	r3, #23
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	055b      	lsls	r3, r3, #21
 80020ca:	4013      	ands	r3, r2
 80020cc:	d111      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0549      	lsls	r1, r1, #21
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]
 80020dc:	4b58      	ldr	r3, [pc, #352]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	055b      	lsls	r3, r3, #21
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	2317      	movs	r3, #23
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b54      	ldr	r3, [pc, #336]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	d11a      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fe:	4b51      	ldr	r3, [pc, #324]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4b50      	ldr	r3, [pc, #320]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0049      	lsls	r1, r1, #1
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210c:	f7ff f89c 	bl	8001248 <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	e008      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7ff f897 	bl	8001248 <HAL_GetTick>
 800211a:	0002      	movs	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	; 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e087      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4013      	ands	r3, r2
 8002132:	d0f0      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002134:	4b42      	ldr	r3, [pc, #264]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	23c0      	movs	r3, #192	; 0xc0
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4013      	ands	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d034      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	23c0      	movs	r3, #192	; 0xc0
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4013      	ands	r3, r2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	429a      	cmp	r2, r3
 8002154:	d02c      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002156:	4b3a      	ldr	r3, [pc, #232]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a3b      	ldr	r2, [pc, #236]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002160:	4b37      	ldr	r3, [pc, #220]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002166:	2180      	movs	r1, #128	; 0x80
 8002168:	0249      	lsls	r1, r1, #9
 800216a:	430a      	orrs	r2, r1
 800216c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800216e:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002170:	6a1a      	ldr	r2, [r3, #32]
 8002172:	4b33      	ldr	r3, [pc, #204]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002174:	4935      	ldr	r1, [pc, #212]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002176:	400a      	ands	r2, r1
 8002178:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800217a:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	4013      	ands	r3, r2
 8002186:	d013      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff f85e 	bl	8001248 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	e009      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7ff f859 	bl	8001248 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e048      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4a24      	ldr	r2, [pc, #144]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021c4:	2317      	movs	r3, #23
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021d4:	491f      	ldr	r1, [pc, #124]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021d6:	400a      	ands	r2, r1
 80021d8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2201      	movs	r2, #1
 80021e0:	4013      	ands	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	2203      	movs	r2, #3
 80021ea:	4393      	bics	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021f4:	430a      	orrs	r2, r1
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2220      	movs	r2, #32
 80021fe:	4013      	ands	r3, r2
 8002200:	d009      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	2210      	movs	r2, #16
 8002208:	4393      	bics	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002212:	430a      	orrs	r2, r1
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4013      	ands	r3, r2
 8002220:	d009      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	2240      	movs	r2, #64	; 0x40
 8002228:	4393      	bics	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002232:	430a      	orrs	r2, r1
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b006      	add	sp, #24
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
 8002248:	fffffcff 	.word	0xfffffcff
 800224c:	fffeffff 	.word	0xfffeffff
 8002250:	00001388 	.word	0x00001388
 8002254:	efffffff 	.word	0xefffffff

08002258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e01e      	b.n	80022a8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223d      	movs	r2, #61	; 0x3d
 800226e:	5c9b      	ldrb	r3, [r3, r2]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d107      	bne.n	8002286 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	223c      	movs	r2, #60	; 0x3c
 800227a:	2100      	movs	r1, #0
 800227c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f7fe fdbd 	bl	8000e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	223d      	movs	r2, #61	; 0x3d
 800228a:	2102      	movs	r1, #2
 800228c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	0019      	movs	r1, r3
 8002298:	0010      	movs	r0, r2
 800229a:	f000 fa5b 	bl	8002754 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	223d      	movs	r2, #61	; 0x3d
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	0018      	movs	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b002      	add	sp, #8
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e01e      	b.n	8002300 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	223d      	movs	r2, #61	; 0x3d
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223c      	movs	r2, #60	; 0x3c
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f7fe fdc1 	bl	8000e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	223d      	movs	r2, #61	; 0x3d
 80022e2:	2102      	movs	r1, #2
 80022e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	0019      	movs	r1, r3
 80022f0:	0010      	movs	r0, r2
 80022f2:	f000 fa2f 	bl	8002754 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	223d      	movs	r2, #61	; 0x3d
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	2201      	movs	r2, #1
 800231a:	0018      	movs	r0, r3
 800231c:	f000 fd30 	bl	8002d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <HAL_TIM_PWM_Start+0x88>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00e      	beq.n	8002348 <HAL_TIM_PWM_Start+0x40>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a19      	ldr	r2, [pc, #100]	; (8002394 <HAL_TIM_PWM_Start+0x8c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_TIM_PWM_Start+0x40>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a17      	ldr	r2, [pc, #92]	; (8002398 <HAL_TIM_PWM_Start+0x90>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_TIM_PWM_Start+0x40>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a16      	ldr	r2, [pc, #88]	; (800239c <HAL_TIM_PWM_Start+0x94>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_TIM_PWM_Start+0x44>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_TIM_PWM_Start+0x46>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0209      	lsls	r1, r1, #8
 8002360:	430a      	orrs	r2, r1
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2207      	movs	r2, #7
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b06      	cmp	r3, #6
 8002374:	d007      	beq.n	8002386 <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2101      	movs	r1, #1
 8002382:	430a      	orrs	r2, r1
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b004      	add	sp, #16
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40014000 	.word	0x40014000
 8002398:	40014400 	.word	0x40014400
 800239c:	40014800 	.word	0x40014800

080023a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6839      	ldr	r1, [r7, #0]
 80023b0:	2200      	movs	r2, #0
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 fce4 	bl	8002d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a23      	ldr	r2, [pc, #140]	; (800244c <HAL_TIM_PWM_Stop+0xac>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00e      	beq.n	80023e0 <HAL_TIM_PWM_Stop+0x40>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <HAL_TIM_PWM_Stop+0xb0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_TIM_PWM_Stop+0x40>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a20      	ldr	r2, [pc, #128]	; (8002454 <HAL_TIM_PWM_Stop+0xb4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_TIM_PWM_Stop+0x40>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <HAL_TIM_PWM_Stop+0xb8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_TIM_PWM_Stop+0x44>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_TIM_PWM_Stop+0x46>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d013      	beq.n	8002412 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a1a      	ldr	r2, [pc, #104]	; (800245c <HAL_TIM_PWM_Stop+0xbc>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	d10d      	bne.n	8002412 <HAL_TIM_PWM_Stop+0x72>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <HAL_TIM_PWM_Stop+0xc0>)
 80023fe:	4013      	ands	r3, r2
 8002400:	d107      	bne.n	8002412 <HAL_TIM_PWM_Stop+0x72>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4915      	ldr	r1, [pc, #84]	; (8002464 <HAL_TIM_PWM_Stop+0xc4>)
 800240e:	400a      	ands	r2, r1
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4a10      	ldr	r2, [pc, #64]	; (800245c <HAL_TIM_PWM_Stop+0xbc>)
 800241a:	4013      	ands	r3, r2
 800241c:	d10d      	bne.n	800243a <HAL_TIM_PWM_Stop+0x9a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <HAL_TIM_PWM_Stop+0xc0>)
 8002426:	4013      	ands	r3, r2
 8002428:	d107      	bne.n	800243a <HAL_TIM_PWM_Stop+0x9a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	438a      	bics	r2, r1
 8002438:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	223d      	movs	r2, #61	; 0x3d
 800243e:	2101      	movs	r1, #1
 8002440:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40014000 	.word	0x40014000
 8002454:	40014400 	.word	0x40014400
 8002458:	40014800 	.word	0x40014800
 800245c:	00001111 	.word	0x00001111
 8002460:	00000444 	.word	0x00000444
 8002464:	ffff7fff 	.word	0xffff7fff

08002468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	223c      	movs	r2, #60	; 0x3c
 8002478:	5c9b      	ldrb	r3, [r3, r2]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800247e:	2302      	movs	r3, #2
 8002480:	e0a4      	b.n	80025cc <HAL_TIM_PWM_ConfigChannel+0x164>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	223c      	movs	r2, #60	; 0x3c
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	223d      	movs	r2, #61	; 0x3d
 800248e:	2102      	movs	r1, #2
 8002490:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d029      	beq.n	80024ec <HAL_TIM_PWM_ConfigChannel+0x84>
 8002498:	d802      	bhi.n	80024a0 <HAL_TIM_PWM_ConfigChannel+0x38>
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800249e:	e08c      	b.n	80025ba <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d046      	beq.n	8002532 <HAL_TIM_PWM_ConfigChannel+0xca>
 80024a4:	2b0c      	cmp	r3, #12
 80024a6:	d065      	beq.n	8002574 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80024a8:	e087      	b.n	80025ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	0011      	movs	r1, r2
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 f9ce 	bl	8002854 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2108      	movs	r1, #8
 80024c4:	430a      	orrs	r2, r1
 80024c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2104      	movs	r1, #4
 80024d4:	438a      	bics	r2, r1
 80024d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6999      	ldr	r1, [r3, #24]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	619a      	str	r2, [r3, #24]
      break;
 80024ea:	e066      	b.n	80025ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	0011      	movs	r1, r2
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 fa35 	bl	8002964 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	0109      	lsls	r1, r1, #4
 8002508:	430a      	orrs	r2, r1
 800250a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	492f      	ldr	r1, [pc, #188]	; (80025d4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002518:	400a      	ands	r2, r1
 800251a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6999      	ldr	r1, [r3, #24]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	021a      	lsls	r2, r3, #8
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	619a      	str	r2, [r3, #24]
      break;
 8002530:	e043      	b.n	80025ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	0011      	movs	r1, r2
 800253a:	0018      	movs	r0, r3
 800253c:	f000 fa96 	bl	8002a6c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2108      	movs	r1, #8
 800254c:	430a      	orrs	r2, r1
 800254e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2104      	movs	r1, #4
 800255c:	438a      	bics	r2, r1
 800255e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69d9      	ldr	r1, [r3, #28]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	61da      	str	r2, [r3, #28]
      break;
 8002572:	e022      	b.n	80025ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	0011      	movs	r1, r2
 800257c:	0018      	movs	r0, r3
 800257e:	f000 fafb 	bl	8002b78 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	0109      	lsls	r1, r1, #4
 8002590:	430a      	orrs	r2, r1
 8002592:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	490d      	ldr	r1, [pc, #52]	; (80025d4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69d9      	ldr	r1, [r3, #28]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	021a      	lsls	r2, r3, #8
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	61da      	str	r2, [r3, #28]
      break;
 80025b8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	223d      	movs	r2, #61	; 0x3d
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	223c      	movs	r2, #60	; 0x3c
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b004      	add	sp, #16
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	fffffbff 	.word	0xfffffbff

080025d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	223c      	movs	r2, #60	; 0x3c
 80025e6:	5c9b      	ldrb	r3, [r3, r2]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_TIM_ConfigClockSource+0x18>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e0ab      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x170>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	223c      	movs	r2, #60	; 0x3c
 80025f4:	2101      	movs	r1, #1
 80025f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	223d      	movs	r2, #61	; 0x3d
 80025fc:	2102      	movs	r1, #2
 80025fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2277      	movs	r2, #119	; 0x77
 800260c:	4393      	bics	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4a4f      	ldr	r2, [pc, #316]	; (8002750 <HAL_TIM_ConfigClockSource+0x178>)
 8002614:	4013      	ands	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b40      	cmp	r3, #64	; 0x40
 8002626:	d100      	bne.n	800262a <HAL_TIM_ConfigClockSource+0x52>
 8002628:	e06b      	b.n	8002702 <HAL_TIM_ConfigClockSource+0x12a>
 800262a:	d80e      	bhi.n	800264a <HAL_TIM_ConfigClockSource+0x72>
 800262c:	2b10      	cmp	r3, #16
 800262e:	d100      	bne.n	8002632 <HAL_TIM_ConfigClockSource+0x5a>
 8002630:	e077      	b.n	8002722 <HAL_TIM_ConfigClockSource+0x14a>
 8002632:	d803      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x64>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d100      	bne.n	800263a <HAL_TIM_ConfigClockSource+0x62>
 8002638:	e073      	b.n	8002722 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800263a:	e07c      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800263c:	2b20      	cmp	r3, #32
 800263e:	d100      	bne.n	8002642 <HAL_TIM_ConfigClockSource+0x6a>
 8002640:	e06f      	b.n	8002722 <HAL_TIM_ConfigClockSource+0x14a>
 8002642:	2b30      	cmp	r3, #48	; 0x30
 8002644:	d100      	bne.n	8002648 <HAL_TIM_ConfigClockSource+0x70>
 8002646:	e06c      	b.n	8002722 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002648:	e075      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800264a:	2b70      	cmp	r3, #112	; 0x70
 800264c:	d00e      	beq.n	800266c <HAL_TIM_ConfigClockSource+0x94>
 800264e:	d804      	bhi.n	800265a <HAL_TIM_ConfigClockSource+0x82>
 8002650:	2b50      	cmp	r3, #80	; 0x50
 8002652:	d036      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0xea>
 8002654:	2b60      	cmp	r3, #96	; 0x60
 8002656:	d044      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002658:	e06d      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800265a:	2280      	movs	r2, #128	; 0x80
 800265c:	0152      	lsls	r2, r2, #5
 800265e:	4293      	cmp	r3, r2
 8002660:	d068      	beq.n	8002734 <HAL_TIM_ConfigClockSource+0x15c>
 8002662:	2280      	movs	r2, #128	; 0x80
 8002664:	0192      	lsls	r2, r2, #6
 8002666:	4293      	cmp	r3, r2
 8002668:	d017      	beq.n	800269a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800266a:	e064      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f000 fb60 	bl	8002d40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2277      	movs	r2, #119	; 0x77
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	609a      	str	r2, [r3, #8]
      break;
 8002698:	e04d      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f000 fb49 	bl	8002d40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	01c9      	lsls	r1, r1, #7
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]
      break;
 80026c0:	e039      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	001a      	movs	r2, r3
 80026d0:	f000 fabc 	bl	8002c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2150      	movs	r1, #80	; 0x50
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 fb16 	bl	8002d0c <TIM_ITRx_SetConfig>
      break;
 80026e0:	e029      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	001a      	movs	r2, r3
 80026f0:	f000 fada 	bl	8002ca8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2160      	movs	r1, #96	; 0x60
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 fb06 	bl	8002d0c <TIM_ITRx_SetConfig>
      break;
 8002700:	e019      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	001a      	movs	r2, r3
 8002710:	f000 fa9c 	bl	8002c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2140      	movs	r1, #64	; 0x40
 800271a:	0018      	movs	r0, r3
 800271c:	f000 faf6 	bl	8002d0c <TIM_ITRx_SetConfig>
      break;
 8002720:	e009      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	0019      	movs	r1, r3
 800272c:	0010      	movs	r0, r2
 800272e:	f000 faed 	bl	8002d0c <TIM_ITRx_SetConfig>
      break;
 8002732:	e000      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002734:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	223d      	movs	r2, #61	; 0x3d
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	223c      	movs	r2, #60	; 0x3c
 8002742:	2100      	movs	r1, #0
 8002744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b004      	add	sp, #16
 800274e:	bd80      	pop	{r7, pc}
 8002750:	ffff00ff 	.word	0xffff00ff

08002754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a34      	ldr	r2, [pc, #208]	; (8002838 <TIM_Base_SetConfig+0xe4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d008      	beq.n	800277e <TIM_Base_SetConfig+0x2a>
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	05db      	lsls	r3, r3, #23
 8002772:	429a      	cmp	r2, r3
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0x2a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a30      	ldr	r2, [pc, #192]	; (800283c <TIM_Base_SetConfig+0xe8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2270      	movs	r2, #112	; 0x70
 8002782:	4393      	bics	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a29      	ldr	r2, [pc, #164]	; (8002838 <TIM_Base_SetConfig+0xe4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d018      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	05db      	lsls	r3, r3, #23
 800279e:	429a      	cmp	r2, r3
 80027a0:	d013      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a25      	ldr	r2, [pc, #148]	; (800283c <TIM_Base_SetConfig+0xe8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00f      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a24      	ldr	r2, [pc, #144]	; (8002840 <TIM_Base_SetConfig+0xec>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00b      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a23      	ldr	r2, [pc, #140]	; (8002844 <TIM_Base_SetConfig+0xf0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a22      	ldr	r2, [pc, #136]	; (8002848 <TIM_Base_SetConfig+0xf4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d003      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a21      	ldr	r2, [pc, #132]	; (800284c <TIM_Base_SetConfig+0xf8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d108      	bne.n	80027dc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4a20      	ldr	r2, [pc, #128]	; (8002850 <TIM_Base_SetConfig+0xfc>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	4393      	bics	r3, r2
 80027e2:	001a      	movs	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <TIM_Base_SetConfig+0xe4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00b      	beq.n	8002822 <TIM_Base_SetConfig+0xce>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <TIM_Base_SetConfig+0xf0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <TIM_Base_SetConfig+0xce>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <TIM_Base_SetConfig+0xf4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_Base_SetConfig+0xce>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a0b      	ldr	r2, [pc, #44]	; (800284c <TIM_Base_SetConfig+0xf8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d103      	bne.n	800282a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	615a      	str	r2, [r3, #20]
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b004      	add	sp, #16
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40012c00 	.word	0x40012c00
 800283c:	40000400 	.word	0x40000400
 8002840:	40002000 	.word	0x40002000
 8002844:	40014000 	.word	0x40014000
 8002848:	40014400 	.word	0x40014400
 800284c:	40014800 	.word	0x40014800
 8002850:	fffffcff 	.word	0xfffffcff

08002854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	2201      	movs	r2, #1
 8002864:	4393      	bics	r3, r2
 8002866:	001a      	movs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2270      	movs	r2, #112	; 0x70
 8002882:	4393      	bics	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2203      	movs	r2, #3
 800288a:	4393      	bics	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2202      	movs	r2, #2
 800289c:	4393      	bics	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <TIM_OC1_SetConfig+0xf8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00b      	beq.n	80028ca <TIM_OC1_SetConfig+0x76>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a26      	ldr	r2, [pc, #152]	; (8002950 <TIM_OC1_SetConfig+0xfc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <TIM_OC1_SetConfig+0x76>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a25      	ldr	r2, [pc, #148]	; (8002954 <TIM_OC1_SetConfig+0x100>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d003      	beq.n	80028ca <TIM_OC1_SetConfig+0x76>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a24      	ldr	r2, [pc, #144]	; (8002958 <TIM_OC1_SetConfig+0x104>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10c      	bne.n	80028e4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2208      	movs	r2, #8
 80028ce:	4393      	bics	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2204      	movs	r2, #4
 80028e0:	4393      	bics	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a19      	ldr	r2, [pc, #100]	; (800294c <TIM_OC1_SetConfig+0xf8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00b      	beq.n	8002904 <TIM_OC1_SetConfig+0xb0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a18      	ldr	r2, [pc, #96]	; (8002950 <TIM_OC1_SetConfig+0xfc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d007      	beq.n	8002904 <TIM_OC1_SetConfig+0xb0>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a17      	ldr	r2, [pc, #92]	; (8002954 <TIM_OC1_SetConfig+0x100>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <TIM_OC1_SetConfig+0xb0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a16      	ldr	r2, [pc, #88]	; (8002958 <TIM_OC1_SetConfig+0x104>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d111      	bne.n	8002928 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4a15      	ldr	r2, [pc, #84]	; (800295c <TIM_OC1_SetConfig+0x108>)
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4a14      	ldr	r2, [pc, #80]	; (8002960 <TIM_OC1_SetConfig+0x10c>)
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	621a      	str	r2, [r3, #32]
}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	b006      	add	sp, #24
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	40012c00 	.word	0x40012c00
 8002950:	40014000 	.word	0x40014000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800
 800295c:	fffffeff 	.word	0xfffffeff
 8002960:	fffffdff 	.word	0xfffffdff

08002964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	2210      	movs	r2, #16
 8002974:	4393      	bics	r3, r2
 8002976:	001a      	movs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a2e      	ldr	r2, [pc, #184]	; (8002a4c <TIM_OC2_SetConfig+0xe8>)
 8002992:	4013      	ands	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4a2d      	ldr	r2, [pc, #180]	; (8002a50 <TIM_OC2_SetConfig+0xec>)
 800299a:	4013      	ands	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2220      	movs	r2, #32
 80029ae:	4393      	bics	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <TIM_OC2_SetConfig+0xf0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10d      	bne.n	80029e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	4393      	bics	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2240      	movs	r2, #64	; 0x40
 80029de:	4393      	bics	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <TIM_OC2_SetConfig+0xf0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00b      	beq.n	8002a02 <TIM_OC2_SetConfig+0x9e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1a      	ldr	r2, [pc, #104]	; (8002a58 <TIM_OC2_SetConfig+0xf4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <TIM_OC2_SetConfig+0x9e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <TIM_OC2_SetConfig+0xf8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d003      	beq.n	8002a02 <TIM_OC2_SetConfig+0x9e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a18      	ldr	r2, [pc, #96]	; (8002a60 <TIM_OC2_SetConfig+0xfc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d113      	bne.n	8002a2a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <TIM_OC2_SetConfig+0x100>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <TIM_OC2_SetConfig+0x104>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	621a      	str	r2, [r3, #32]
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b006      	add	sp, #24
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	ffff8fff 	.word	0xffff8fff
 8002a50:	fffffcff 	.word	0xfffffcff
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40014000 	.word	0x40014000
 8002a5c:	40014400 	.word	0x40014400
 8002a60:	40014800 	.word	0x40014800
 8002a64:	fffffbff 	.word	0xfffffbff
 8002a68:	fffff7ff 	.word	0xfffff7ff

08002a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4a35      	ldr	r2, [pc, #212]	; (8002b50 <TIM_OC3_SetConfig+0xe4>)
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2270      	movs	r2, #112	; 0x70
 8002a98:	4393      	bics	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	4393      	bics	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <TIM_OC3_SetConfig+0xe8>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <TIM_OC3_SetConfig+0xec>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10d      	bne.n	8002ae6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <TIM_OC3_SetConfig+0xf0>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <TIM_OC3_SetConfig+0xf4>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <TIM_OC3_SetConfig+0xec>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00b      	beq.n	8002b06 <TIM_OC3_SetConfig+0x9a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <TIM_OC3_SetConfig+0xf8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <TIM_OC3_SetConfig+0x9a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <TIM_OC3_SetConfig+0xfc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d003      	beq.n	8002b06 <TIM_OC3_SetConfig+0x9a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a1a      	ldr	r2, [pc, #104]	; (8002b6c <TIM_OC3_SetConfig+0x100>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d113      	bne.n	8002b2e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <TIM_OC3_SetConfig+0x104>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <TIM_OC3_SetConfig+0x108>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	621a      	str	r2, [r3, #32]
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	fffffeff 	.word	0xfffffeff
 8002b54:	fffffdff 	.word	0xfffffdff
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	fffff7ff 	.word	0xfffff7ff
 8002b60:	fffffbff 	.word	0xfffffbff
 8002b64:	40014000 	.word	0x40014000
 8002b68:	40014400 	.word	0x40014400
 8002b6c:	40014800 	.word	0x40014800
 8002b70:	ffffefff 	.word	0xffffefff
 8002b74:	ffffdfff 	.word	0xffffdfff

08002b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a28      	ldr	r2, [pc, #160]	; (8002c28 <TIM_OC4_SetConfig+0xb0>)
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <TIM_OC4_SetConfig+0xb4>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <TIM_OC4_SetConfig+0xb8>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <TIM_OC4_SetConfig+0xbc>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	031b      	lsls	r3, r3, #12
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <TIM_OC4_SetConfig+0xc0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00b      	beq.n	8002bf0 <TIM_OC4_SetConfig+0x78>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <TIM_OC4_SetConfig+0xc4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <TIM_OC4_SetConfig+0x78>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <TIM_OC4_SetConfig+0xc8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <TIM_OC4_SetConfig+0x78>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <TIM_OC4_SetConfig+0xcc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d109      	bne.n	8002c04 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <TIM_OC4_SetConfig+0xd0>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	019b      	lsls	r3, r3, #6
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b006      	add	sp, #24
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	ffffefff 	.word	0xffffefff
 8002c2c:	ffff8fff 	.word	0xffff8fff
 8002c30:	fffffcff 	.word	0xfffffcff
 8002c34:	ffffdfff 	.word	0xffffdfff
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40014400 	.word	0x40014400
 8002c44:	40014800 	.word	0x40014800
 8002c48:	ffffbfff 	.word	0xffffbfff

08002c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4393      	bics	r3, r2
 8002c66:	001a      	movs	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	22f0      	movs	r2, #240	; 0xf0
 8002c76:	4393      	bics	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	220a      	movs	r2, #10
 8002c88:	4393      	bics	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	621a      	str	r2, [r3, #32]
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b006      	add	sp, #24
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	2210      	movs	r2, #16
 8002cba:	4393      	bics	r3, r2
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <TIM_TI2_ConfigInputStage+0x60>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	031b      	lsls	r3, r3, #12
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	22a0      	movs	r2, #160	; 0xa0
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	621a      	str	r2, [r3, #32]
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b006      	add	sp, #24
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	ffff0fff 	.word	0xffff0fff

08002d0c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2270      	movs	r2, #112	; 0x70
 8002d20:	4393      	bics	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	609a      	str	r2, [r3, #8]
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b004      	add	sp, #16
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <TIM_ETR_SetConfig+0x3c>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	021a      	lsls	r2, r3, #8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	609a      	str	r2, [r3, #8]
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b006      	add	sp, #24
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	ffff00ff 	.word	0xffff00ff

08002d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	221f      	movs	r2, #31
 8002d90:	4013      	ands	r3, r2
 8002d92:	2201      	movs	r2, #1
 8002d94:	409a      	lsls	r2, r3
 8002d96:	0013      	movs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	43d2      	mvns	r2, r2
 8002da2:	401a      	ands	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a1a      	ldr	r2, [r3, #32]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	211f      	movs	r1, #31
 8002db0:	400b      	ands	r3, r1
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4099      	lsls	r1, r3
 8002db6:	000b      	movs	r3, r1
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b006      	add	sp, #24
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	223c      	movs	r2, #60	; 0x3c
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e047      	b.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	223c      	movs	r2, #60	; 0x3c
 8002de4:	2101      	movs	r1, #1
 8002de6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	223d      	movs	r2, #61	; 0x3d
 8002dec:	2102      	movs	r1, #2
 8002dee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2270      	movs	r2, #112	; 0x70
 8002e04:	4393      	bics	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00f      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	05db      	lsls	r3, r3, #23
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d009      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a10      	ldr	r2, [pc, #64]	; (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d10c      	bne.n	8002e5e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	4393      	bics	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	223d      	movs	r2, #61	; 0x3d
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	223c      	movs	r2, #60	; 0x3c
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b004      	add	sp, #16
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40014000 	.word	0x40014000

08002e84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	223c      	movs	r2, #60	; 0x3c
 8002e96:	5c9b      	ldrb	r3, [r3, r2]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e03e      	b.n	8002f1e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	223c      	movs	r2, #60	; 0x3c
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	22ff      	movs	r2, #255	; 0xff
 8002eac:	4393      	bics	r3, r2
 8002eae:	001a      	movs	r2, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002eca:	401a      	ands	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002ed8:	401a      	ands	r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002f02:	401a      	ands	r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	223c      	movs	r2, #60	; 0x3c
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b004      	add	sp, #16
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	fffffcff 	.word	0xfffffcff
 8002f2c:	fffffbff 	.word	0xfffffbff
 8002f30:	fffff7ff 	.word	0xfffff7ff
 8002f34:	ffffefff 	.word	0xffffefff
 8002f38:	ffffdfff 	.word	0xffffdfff
 8002f3c:	ffffbfff 	.word	0xffffbfff

08002f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e044      	b.n	8002fdc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2270      	movs	r2, #112	; 0x70
 8002f5e:	2100      	movs	r1, #0
 8002f60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7fe f859 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2224      	movs	r2, #36	; 0x24
 8002f6e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	438a      	bics	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 fa54 	bl	8003430 <UART_SetConfig>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e024      	b.n	8002fdc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f000 fbcd 	bl	800373c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	490d      	ldr	r1, [pc, #52]	; (8002fe4 <HAL_UART_Init+0xa4>)
 8002fae:	400a      	ands	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	212a      	movs	r1, #42	; 0x2a
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 fc65 	bl	80038a4 <UART_CheckIdleState>
 8002fda:	0003      	movs	r3, r0
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	ffffb7ff 	.word	0xffffb7ff

08002fe8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	1dbb      	adds	r3, r7, #6
 8002ff6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d000      	beq.n	8003002 <HAL_UART_Receive+0x1a>
 8003000:	e0c2      	b.n	8003188 <HAL_UART_Receive+0x1a0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_UART_Receive+0x28>
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0ba      	b.n	800318a <HAL_UART_Receive+0x1a2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	015b      	lsls	r3, r3, #5
 800301c:	429a      	cmp	r2, r3
 800301e:	d109      	bne.n	8003034 <HAL_UART_Receive+0x4c>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2201      	movs	r2, #1
 800302c:	4013      	ands	r3, r2
 800302e:	d001      	beq.n	8003034 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0aa      	b.n	800318a <HAL_UART_Receive+0x1a2>
      }
    }

    __HAL_LOCK(huart);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2270      	movs	r2, #112	; 0x70
 8003038:	5c9b      	ldrb	r3, [r3, r2]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_UART_Receive+0x5a>
 800303e:	2302      	movs	r3, #2
 8003040:	e0a3      	b.n	800318a <HAL_UART_Receive+0x1a2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2270      	movs	r2, #112	; 0x70
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2222      	movs	r2, #34	; 0x22
 8003054:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003056:	f7fe f8f7 	bl	8001248 <HAL_GetTick>
 800305a:	0003      	movs	r3, r0
 800305c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1dba      	adds	r2, r7, #6
 8003062:	2158      	movs	r1, #88	; 0x58
 8003064:	8812      	ldrh	r2, [r2, #0]
 8003066:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1dba      	adds	r2, r7, #6
 800306c:	215a      	movs	r1, #90	; 0x5a
 800306e:	8812      	ldrh	r2, [r2, #0]
 8003070:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	015b      	lsls	r3, r3, #5
 800307a:	429a      	cmp	r2, r3
 800307c:	d10d      	bne.n	800309a <HAL_UART_Receive+0xb2>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d104      	bne.n	8003090 <HAL_UART_Receive+0xa8>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	225c      	movs	r2, #92	; 0x5c
 800308a:	4942      	ldr	r1, [pc, #264]	; (8003194 <HAL_UART_Receive+0x1ac>)
 800308c:	5299      	strh	r1, [r3, r2]
 800308e:	e01a      	b.n	80030c6 <HAL_UART_Receive+0xde>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	225c      	movs	r2, #92	; 0x5c
 8003094:	21ff      	movs	r1, #255	; 0xff
 8003096:	5299      	strh	r1, [r3, r2]
 8003098:	e015      	b.n	80030c6 <HAL_UART_Receive+0xde>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <HAL_UART_Receive+0xd6>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d104      	bne.n	80030b4 <HAL_UART_Receive+0xcc>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	225c      	movs	r2, #92	; 0x5c
 80030ae:	21ff      	movs	r1, #255	; 0xff
 80030b0:	5299      	strh	r1, [r3, r2]
 80030b2:	e008      	b.n	80030c6 <HAL_UART_Receive+0xde>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	225c      	movs	r2, #92	; 0x5c
 80030b8:	217f      	movs	r1, #127	; 0x7f
 80030ba:	5299      	strh	r1, [r3, r2]
 80030bc:	e003      	b.n	80030c6 <HAL_UART_Receive+0xde>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	225c      	movs	r2, #92	; 0x5c
 80030c2:	2100      	movs	r1, #0
 80030c4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80030c6:	2312      	movs	r3, #18
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	215c      	movs	r1, #92	; 0x5c
 80030ce:	5a52      	ldrh	r2, [r2, r1]
 80030d0:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	015b      	lsls	r3, r3, #5
 80030da:	429a      	cmp	r2, r3
 80030dc:	d108      	bne.n	80030f0 <HAL_UART_Receive+0x108>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d104      	bne.n	80030f0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	e003      	b.n	80030f8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80030f8:	e037      	b.n	800316a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	0013      	movs	r3, r2
 8003104:	2200      	movs	r2, #0
 8003106:	2120      	movs	r1, #32
 8003108:	f000 fc12 	bl	8003930 <UART_WaitOnFlagUntilTimeout>
 800310c:	1e03      	subs	r3, r0, #0
 800310e:	d001      	beq.n	8003114 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e03a      	b.n	800318a <HAL_UART_Receive+0x1a2>
      }
      if (pdata8bits == NULL)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10e      	bne.n	8003138 <HAL_UART_Receive+0x150>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003120:	b29b      	uxth	r3, r3
 8003122:	2212      	movs	r2, #18
 8003124:	18ba      	adds	r2, r7, r2
 8003126:	8812      	ldrh	r2, [r2, #0]
 8003128:	4013      	ands	r3, r2
 800312a:	b29a      	uxth	r2, r3
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	3302      	adds	r3, #2
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	e00f      	b.n	8003158 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800313e:	b29b      	uxth	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2212      	movs	r2, #18
 8003144:	18ba      	adds	r2, r7, r2
 8003146:	8812      	ldrh	r2, [r2, #0]
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	4013      	ands	r3, r2
 800314c:	b2da      	uxtb	r2, r3
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3301      	adds	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	225a      	movs	r2, #90	; 0x5a
 800315c:	5a9b      	ldrh	r3, [r3, r2]
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b299      	uxth	r1, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	225a      	movs	r2, #90	; 0x5a
 8003168:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	225a      	movs	r2, #90	; 0x5a
 800316e:	5a9b      	ldrh	r3, [r3, r2]
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1c1      	bne.n	80030fa <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2270      	movs	r2, #112	; 0x70
 8003180:	2100      	movs	r1, #0
 8003182:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	e000      	b.n	800318a <HAL_UART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
  }
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b008      	add	sp, #32
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	000001ff 	.word	0x000001ff

08003198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	4a93      	ldr	r2, [pc, #588]	; (8003408 <HAL_UART_IRQHandler+0x270>)
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d112      	bne.n	80031ec <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	2220      	movs	r2, #32
 80031ca:	4013      	ands	r3, r2
 80031cc:	d00e      	beq.n	80031ec <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2220      	movs	r2, #32
 80031d2:	4013      	ands	r3, r2
 80031d4:	d00a      	beq.n	80031ec <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d100      	bne.n	80031e0 <HAL_UART_IRQHandler+0x48>
 80031de:	e10b      	b.n	80033f8 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	0010      	movs	r0, r2
 80031e8:	4798      	blx	r3
      }
      return;
 80031ea:	e105      	b.n	80033f8 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d100      	bne.n	80031f4 <HAL_UART_IRQHandler+0x5c>
 80031f2:	e0cd      	b.n	8003390 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2201      	movs	r2, #1
 80031f8:	4013      	ands	r3, r2
 80031fa:	d105      	bne.n	8003208 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	2390      	movs	r3, #144	; 0x90
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4013      	ands	r3, r2
 8003204:	d100      	bne.n	8003208 <HAL_UART_IRQHandler+0x70>
 8003206:	e0c3      	b.n	8003390 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2201      	movs	r2, #1
 800320c:	4013      	ands	r3, r2
 800320e:	d00e      	beq.n	800322e <HAL_UART_IRQHandler+0x96>
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4013      	ands	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2201      	movs	r2, #1
 8003220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003226:	2201      	movs	r2, #1
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2202      	movs	r2, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d00d      	beq.n	8003252 <HAL_UART_IRQHandler+0xba>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2201      	movs	r2, #1
 800323a:	4013      	ands	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2202      	movs	r2, #2
 8003244:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324a:	2204      	movs	r2, #4
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2204      	movs	r2, #4
 8003256:	4013      	ands	r3, r2
 8003258:	d00d      	beq.n	8003276 <HAL_UART_IRQHandler+0xde>
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2201      	movs	r2, #1
 800325e:	4013      	ands	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2204      	movs	r2, #4
 8003268:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800326e:	2202      	movs	r2, #2
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	2208      	movs	r2, #8
 800327a:	4013      	ands	r3, r2
 800327c:	d011      	beq.n	80032a2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2220      	movs	r2, #32
 8003282:	4013      	ands	r3, r2
 8003284:	d103      	bne.n	800328e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2201      	movs	r2, #1
 800328a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800328c:	d009      	beq.n	80032a2 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2208      	movs	r2, #8
 8003294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800329a:	2208      	movs	r2, #8
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	4013      	ands	r3, r2
 80032aa:	d00f      	beq.n	80032cc <HAL_UART_IRQHandler+0x134>
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	04db      	lsls	r3, r3, #19
 80032b2:	4013      	ands	r3, r2
 80032b4:	d00a      	beq.n	80032cc <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2280      	movs	r2, #128	; 0x80
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c4:	2220      	movs	r2, #32
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d100      	bne.n	80032d6 <HAL_UART_IRQHandler+0x13e>
 80032d4:	e092      	b.n	80033fc <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2220      	movs	r2, #32
 80032da:	4013      	ands	r3, r2
 80032dc:	d00c      	beq.n	80032f8 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2220      	movs	r2, #32
 80032e2:	4013      	ands	r3, r2
 80032e4:	d008      	beq.n	80032f8 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d004      	beq.n	80032f8 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	0010      	movs	r0, r2
 80032f6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032fc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2240      	movs	r2, #64	; 0x40
 8003306:	4013      	ands	r3, r2
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d003      	beq.n	8003314 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2228      	movs	r2, #40	; 0x28
 8003310:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003312:	d033      	beq.n	800337c <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0018      	movs	r0, r3
 8003318:	f000 fb88 	bl	8003a2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2240      	movs	r2, #64	; 0x40
 8003324:	4013      	ands	r3, r2
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d123      	bne.n	8003372 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2140      	movs	r1, #64	; 0x40
 8003336:	438a      	bics	r2, r1
 8003338:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d012      	beq.n	8003368 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003346:	4a31      	ldr	r2, [pc, #196]	; (800340c <HAL_UART_IRQHandler+0x274>)
 8003348:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800334e:	0018      	movs	r0, r3
 8003350:	f7fe f862 	bl	8001418 <HAL_DMA_Abort_IT>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d019      	beq.n	800338c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003362:	0018      	movs	r0, r3
 8003364:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003366:	e011      	b.n	800338c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0018      	movs	r0, r3
 800336c:	f000 f858 	bl	8003420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003370:	e00c      	b.n	800338c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	0018      	movs	r0, r3
 8003376:	f000 f853 	bl	8003420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337a:	e007      	b.n	800338c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	0018      	movs	r0, r3
 8003380:	f000 f84e 	bl	8003420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800338a:	e037      	b.n	80033fc <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338c:	46c0      	nop			; (mov r8, r8)
    return;
 800338e:	e035      	b.n	80033fc <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	035b      	lsls	r3, r3, #13
 8003396:	4013      	ands	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_UART_IRQHandler+0x220>
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	03db      	lsls	r3, r3, #15
 80033a0:	4013      	ands	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	0352      	lsls	r2, r2, #13
 80033ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 fb8c 	bl	8003ace <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033b6:	e024      	b.n	8003402 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	4013      	ands	r3, r2
 80033be:	d00d      	beq.n	80033dc <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	4013      	ands	r3, r2
 80033c6:	d009      	beq.n	80033dc <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	0010      	movs	r0, r2
 80033d8:	4798      	blx	r3
    }
    return;
 80033da:	e011      	b.n	8003400 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2240      	movs	r2, #64	; 0x40
 80033e0:	4013      	ands	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_UART_IRQHandler+0x26a>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2240      	movs	r2, #64	; 0x40
 80033e8:	4013      	ands	r3, r2
 80033ea:	d00a      	beq.n	8003402 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	0018      	movs	r0, r3
 80033f0:	f000 fb53 	bl	8003a9a <UART_EndTransmit_IT>
    return;
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	e004      	b.n	8003402 <HAL_UART_IRQHandler+0x26a>
      return;
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	e002      	b.n	8003402 <HAL_UART_IRQHandler+0x26a>
    return;
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	e000      	b.n	8003402 <HAL_UART_IRQHandler+0x26a>
    return;
 8003400:	46c0      	nop			; (mov r8, r8)
  }

}
 8003402:	46bd      	mov	sp, r7
 8003404:	b008      	add	sp, #32
 8003406:	bd80      	pop	{r7, pc}
 8003408:	0000080f 	.word	0x0000080f
 800340c:	08003a6d 	.word	0x08003a6d

08003410 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	b002      	add	sp, #8
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}

08003430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800343c:	2317      	movs	r3, #23
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4aad      	ldr	r2, [pc, #692]	; (8003718 <UART_SetConfig+0x2e8>)
 8003464:	4013      	ands	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	430a      	orrs	r2, r1
 8003470:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4aa8      	ldr	r2, [pc, #672]	; (800371c <UART_SetConfig+0x2ec>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a9f      	ldr	r2, [pc, #636]	; (8003720 <UART_SetConfig+0x2f0>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a9b      	ldr	r2, [pc, #620]	; (8003724 <UART_SetConfig+0x2f4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d125      	bne.n	8003506 <UART_SetConfig+0xd6>
 80034ba:	4b9b      	ldr	r3, [pc, #620]	; (8003728 <UART_SetConfig+0x2f8>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	2203      	movs	r2, #3
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d00f      	beq.n	80034e6 <UART_SetConfig+0xb6>
 80034c6:	d304      	bcc.n	80034d2 <UART_SetConfig+0xa2>
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d011      	beq.n	80034f0 <UART_SetConfig+0xc0>
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d005      	beq.n	80034dc <UART_SetConfig+0xac>
 80034d0:	e013      	b.n	80034fa <UART_SetConfig+0xca>
 80034d2:	231f      	movs	r3, #31
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	2200      	movs	r2, #0
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	e022      	b.n	8003522 <UART_SetConfig+0xf2>
 80034dc:	231f      	movs	r3, #31
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	2202      	movs	r2, #2
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e01d      	b.n	8003522 <UART_SetConfig+0xf2>
 80034e6:	231f      	movs	r3, #31
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	2204      	movs	r2, #4
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	e018      	b.n	8003522 <UART_SetConfig+0xf2>
 80034f0:	231f      	movs	r3, #31
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	2208      	movs	r2, #8
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	e013      	b.n	8003522 <UART_SetConfig+0xf2>
 80034fa:	231f      	movs	r3, #31
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	2210      	movs	r2, #16
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	e00d      	b.n	8003522 <UART_SetConfig+0xf2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a88      	ldr	r2, [pc, #544]	; (800372c <UART_SetConfig+0x2fc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d104      	bne.n	800351a <UART_SetConfig+0xea>
 8003510:	231f      	movs	r3, #31
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e003      	b.n	8003522 <UART_SetConfig+0xf2>
 800351a:	231f      	movs	r3, #31
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	2210      	movs	r2, #16
 8003520:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	429a      	cmp	r2, r3
 800352c:	d000      	beq.n	8003530 <UART_SetConfig+0x100>
 800352e:	e07d      	b.n	800362c <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003530:	231f      	movs	r3, #31
 8003532:	18fb      	adds	r3, r7, r3
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d01c      	beq.n	8003574 <UART_SetConfig+0x144>
 800353a:	dc02      	bgt.n	8003542 <UART_SetConfig+0x112>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <UART_SetConfig+0x11c>
 8003540:	e04b      	b.n	80035da <UART_SetConfig+0x1aa>
 8003542:	2b04      	cmp	r3, #4
 8003544:	d025      	beq.n	8003592 <UART_SetConfig+0x162>
 8003546:	2b08      	cmp	r3, #8
 8003548:	d037      	beq.n	80035ba <UART_SetConfig+0x18a>
 800354a:	e046      	b.n	80035da <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7fe fd90 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 8003550:	0003      	movs	r3, r0
 8003552:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	005a      	lsls	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	18d2      	adds	r2, r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	0019      	movs	r1, r3
 8003566:	0010      	movs	r0, r2
 8003568:	f7fc fdce 	bl	8000108 <__udivsi3>
 800356c:	0003      	movs	r3, r0
 800356e:	b29b      	uxth	r3, r3
 8003570:	61bb      	str	r3, [r7, #24]
        break;
 8003572:	e037      	b.n	80035e4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	4a6d      	ldr	r2, [pc, #436]	; (8003730 <UART_SetConfig+0x300>)
 800357c:	189a      	adds	r2, r3, r2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	0019      	movs	r1, r3
 8003584:	0010      	movs	r0, r2
 8003586:	f7fc fdbf 	bl	8000108 <__udivsi3>
 800358a:	0003      	movs	r3, r0
 800358c:	b29b      	uxth	r3, r3
 800358e:	61bb      	str	r3, [r7, #24]
        break;
 8003590:	e028      	b.n	80035e4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003592:	f7fe fcff 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8003596:	0003      	movs	r3, r0
 8003598:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	005a      	lsls	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	18d2      	adds	r2, r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	0019      	movs	r1, r3
 80035ac:	0010      	movs	r0, r2
 80035ae:	f7fc fdab 	bl	8000108 <__udivsi3>
 80035b2:	0003      	movs	r3, r0
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	61bb      	str	r3, [r7, #24]
        break;
 80035b8:	e014      	b.n	80035e4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	0252      	lsls	r2, r2, #9
 80035c4:	189a      	adds	r2, r3, r2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	0019      	movs	r1, r3
 80035cc:	0010      	movs	r0, r2
 80035ce:	f7fc fd9b 	bl	8000108 <__udivsi3>
 80035d2:	0003      	movs	r3, r0
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	61bb      	str	r3, [r7, #24]
        break;
 80035d8:	e004      	b.n	80035e4 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80035da:	2317      	movs	r3, #23
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
        break;
 80035e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b0f      	cmp	r3, #15
 80035e8:	d91b      	bls.n	8003622 <UART_SetConfig+0x1f2>
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	4a51      	ldr	r2, [pc, #324]	; (8003734 <UART_SetConfig+0x304>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d817      	bhi.n	8003622 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	200a      	movs	r0, #10
 80035f8:	183b      	adds	r3, r7, r0
 80035fa:	210f      	movs	r1, #15
 80035fc:	438a      	bics	r2, r1
 80035fe:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	b29b      	uxth	r3, r3
 8003606:	2207      	movs	r2, #7
 8003608:	4013      	ands	r3, r2
 800360a:	b299      	uxth	r1, r3
 800360c:	183b      	adds	r3, r7, r0
 800360e:	183a      	adds	r2, r7, r0
 8003610:	8812      	ldrh	r2, [r2, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	183a      	adds	r2, r7, r0
 800361c:	8812      	ldrh	r2, [r2, #0]
 800361e:	60da      	str	r2, [r3, #12]
 8003620:	e06c      	b.n	80036fc <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003622:	2317      	movs	r3, #23
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e067      	b.n	80036fc <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 800362c:	231f      	movs	r3, #31
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d01b      	beq.n	800366e <UART_SetConfig+0x23e>
 8003636:	dc02      	bgt.n	800363e <UART_SetConfig+0x20e>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <UART_SetConfig+0x218>
 800363c:	e049      	b.n	80036d2 <UART_SetConfig+0x2a2>
 800363e:	2b04      	cmp	r3, #4
 8003640:	d024      	beq.n	800368c <UART_SetConfig+0x25c>
 8003642:	2b08      	cmp	r3, #8
 8003644:	d035      	beq.n	80036b2 <UART_SetConfig+0x282>
 8003646:	e044      	b.n	80036d2 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003648:	f7fe fd12 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 800364c:	0003      	movs	r3, r0
 800364e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	085a      	lsrs	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	18d2      	adds	r2, r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	0019      	movs	r1, r3
 8003660:	0010      	movs	r0, r2
 8003662:	f7fc fd51 	bl	8000108 <__udivsi3>
 8003666:	0003      	movs	r3, r0
 8003668:	b29b      	uxth	r3, r3
 800366a:	61bb      	str	r3, [r7, #24]
        break;
 800366c:	e036      	b.n	80036dc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	4a30      	ldr	r2, [pc, #192]	; (8003738 <UART_SetConfig+0x308>)
 8003676:	189a      	adds	r2, r3, r2
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	0019      	movs	r1, r3
 800367e:	0010      	movs	r0, r2
 8003680:	f7fc fd42 	bl	8000108 <__udivsi3>
 8003684:	0003      	movs	r3, r0
 8003686:	b29b      	uxth	r3, r3
 8003688:	61bb      	str	r3, [r7, #24]
        break;
 800368a:	e027      	b.n	80036dc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368c:	f7fe fc82 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8003690:	0003      	movs	r3, r0
 8003692:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	085a      	lsrs	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	18d2      	adds	r2, r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0019      	movs	r1, r3
 80036a4:	0010      	movs	r0, r2
 80036a6:	f7fc fd2f 	bl	8000108 <__udivsi3>
 80036aa:	0003      	movs	r3, r0
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	61bb      	str	r3, [r7, #24]
        break;
 80036b0:	e014      	b.n	80036dc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	0212      	lsls	r2, r2, #8
 80036bc:	189a      	adds	r2, r3, r2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	0019      	movs	r1, r3
 80036c4:	0010      	movs	r0, r2
 80036c6:	f7fc fd1f 	bl	8000108 <__udivsi3>
 80036ca:	0003      	movs	r3, r0
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	61bb      	str	r3, [r7, #24]
        break;
 80036d0:	e004      	b.n	80036dc <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80036d2:	2317      	movs	r3, #23
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
        break;
 80036da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b0f      	cmp	r3, #15
 80036e0:	d908      	bls.n	80036f4 <UART_SetConfig+0x2c4>
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	4a13      	ldr	r2, [pc, #76]	; (8003734 <UART_SetConfig+0x304>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d804      	bhi.n	80036f4 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e003      	b.n	80036fc <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80036f4:	2317      	movs	r3, #23
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003708:	2317      	movs	r3, #23
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	781b      	ldrb	r3, [r3, #0]
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b008      	add	sp, #32
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	ffff69f3 	.word	0xffff69f3
 800371c:	ffffcfff 	.word	0xffffcfff
 8003720:	fffff4ff 	.word	0xfffff4ff
 8003724:	40013800 	.word	0x40013800
 8003728:	40021000 	.word	0x40021000
 800372c:	40004400 	.word	0x40004400
 8003730:	00f42400 	.word	0x00f42400
 8003734:	0000ffff 	.word	0x0000ffff
 8003738:	007a1200 	.word	0x007a1200

0800373c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	2201      	movs	r2, #1
 800374a:	4013      	ands	r3, r2
 800374c:	d00b      	beq.n	8003766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a4a      	ldr	r2, [pc, #296]	; (8003880 <UART_AdvFeatureConfig+0x144>)
 8003756:	4013      	ands	r3, r2
 8003758:	0019      	movs	r1, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2202      	movs	r2, #2
 800376c:	4013      	ands	r3, r2
 800376e:	d00b      	beq.n	8003788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4a43      	ldr	r2, [pc, #268]	; (8003884 <UART_AdvFeatureConfig+0x148>)
 8003778:	4013      	ands	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	2204      	movs	r2, #4
 800378e:	4013      	ands	r3, r2
 8003790:	d00b      	beq.n	80037aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a3b      	ldr	r2, [pc, #236]	; (8003888 <UART_AdvFeatureConfig+0x14c>)
 800379a:	4013      	ands	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2208      	movs	r2, #8
 80037b0:	4013      	ands	r3, r2
 80037b2:	d00b      	beq.n	80037cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4a34      	ldr	r2, [pc, #208]	; (800388c <UART_AdvFeatureConfig+0x150>)
 80037bc:	4013      	ands	r3, r2
 80037be:	0019      	movs	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	2210      	movs	r2, #16
 80037d2:	4013      	ands	r3, r2
 80037d4:	d00b      	beq.n	80037ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a2c      	ldr	r2, [pc, #176]	; (8003890 <UART_AdvFeatureConfig+0x154>)
 80037de:	4013      	ands	r3, r2
 80037e0:	0019      	movs	r1, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2220      	movs	r2, #32
 80037f4:	4013      	ands	r3, r2
 80037f6:	d00b      	beq.n	8003810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	4a25      	ldr	r2, [pc, #148]	; (8003894 <UART_AdvFeatureConfig+0x158>)
 8003800:	4013      	ands	r3, r2
 8003802:	0019      	movs	r1, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	2240      	movs	r2, #64	; 0x40
 8003816:	4013      	ands	r3, r2
 8003818:	d01d      	beq.n	8003856 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <UART_AdvFeatureConfig+0x15c>)
 8003822:	4013      	ands	r3, r2
 8003824:	0019      	movs	r1, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	035b      	lsls	r3, r3, #13
 800383a:	429a      	cmp	r2, r3
 800383c:	d10b      	bne.n	8003856 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a15      	ldr	r2, [pc, #84]	; (800389c <UART_AdvFeatureConfig+0x160>)
 8003846:	4013      	ands	r3, r2
 8003848:	0019      	movs	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	2280      	movs	r2, #128	; 0x80
 800385c:	4013      	ands	r3, r2
 800385e:	d00b      	beq.n	8003878 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a0e      	ldr	r2, [pc, #56]	; (80038a0 <UART_AdvFeatureConfig+0x164>)
 8003868:	4013      	ands	r3, r2
 800386a:	0019      	movs	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	605a      	str	r2, [r3, #4]
  }
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}
 8003880:	fffdffff 	.word	0xfffdffff
 8003884:	fffeffff 	.word	0xfffeffff
 8003888:	fffbffff 	.word	0xfffbffff
 800388c:	ffff7fff 	.word	0xffff7fff
 8003890:	ffffefff 	.word	0xffffefff
 8003894:	ffffdfff 	.word	0xffffdfff
 8003898:	ffefffff 	.word	0xffefffff
 800389c:	ff9fffff 	.word	0xff9fffff
 80038a0:	fff7ffff 	.word	0xfff7ffff

080038a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80038b2:	f7fd fcc9 	bl	8001248 <HAL_GetTick>
 80038b6:	0003      	movs	r3, r0
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2208      	movs	r2, #8
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d10d      	bne.n	80038e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	0399      	lsls	r1, r3, #14
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4b16      	ldr	r3, [pc, #88]	; (800392c <UART_CheckIdleState+0x88>)
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	0013      	movs	r3, r2
 80038d6:	2200      	movs	r2, #0
 80038d8:	f000 f82a 	bl	8003930 <UART_WaitOnFlagUntilTimeout>
 80038dc:	1e03      	subs	r3, r0, #0
 80038de:	d001      	beq.n	80038e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e01f      	b.n	8003924 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2204      	movs	r2, #4
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d10d      	bne.n	800390e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	03d9      	lsls	r1, r3, #15
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <UART_CheckIdleState+0x88>)
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	0013      	movs	r3, r2
 8003900:	2200      	movs	r2, #0
 8003902:	f000 f815 	bl	8003930 <UART_WaitOnFlagUntilTimeout>
 8003906:	1e03      	subs	r3, r0, #0
 8003908:	d001      	beq.n	800390e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e00a      	b.n	8003924 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2270      	movs	r2, #112	; 0x70
 800391e:	2100      	movs	r1, #0
 8003920:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b004      	add	sp, #16
 800392a:	bd80      	pop	{r7, pc}
 800392c:	01ffffff 	.word	0x01ffffff

08003930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003940:	e05d      	b.n	80039fe <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	3301      	adds	r3, #1
 8003946:	d05a      	beq.n	80039fe <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003948:	f7fd fc7e 	bl	8001248 <HAL_GetTick>
 800394c:	0002      	movs	r2, r0
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	429a      	cmp	r2, r3
 8003956:	d302      	bcc.n	800395e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d11b      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	492f      	ldr	r1, [pc, #188]	; (8003a28 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800396a:	400a      	ands	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2101      	movs	r1, #1
 800397a:	438a      	bics	r2, r1
 800397c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2270      	movs	r2, #112	; 0x70
 800398e:	2100      	movs	r1, #0
 8003990:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e043      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2204      	movs	r2, #4
 800399e:	4013      	ands	r3, r2
 80039a0:	d02d      	beq.n	80039fe <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	401a      	ands	r2, r3
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d123      	bne.n	80039fe <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4917      	ldr	r1, [pc, #92]	; (8003a28 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80039cc:	400a      	ands	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2101      	movs	r1, #1
 80039dc:	438a      	bics	r2, r1
 80039de:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2270      	movs	r2, #112	; 0x70
 80039f6:	2100      	movs	r1, #0
 80039f8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e00f      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	4013      	ands	r3, r2
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	425a      	negs	r2, r3
 8003a0e:	4153      	adcs	r3, r2
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	001a      	movs	r2, r3
 8003a14:	1dfb      	adds	r3, r7, #7
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d092      	beq.n	8003942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b004      	add	sp, #16
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	fffffe5f 	.word	0xfffffe5f

08003a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	490a      	ldr	r1, [pc, #40]	; (8003a68 <UART_EndRxTransfer+0x3c>)
 8003a40:	400a      	ands	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2101      	movs	r1, #1
 8003a50:	438a      	bics	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b002      	add	sp, #8
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	fffffedf 	.word	0xfffffedf

08003a6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	225a      	movs	r2, #90	; 0x5a
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2252      	movs	r2, #82	; 0x52
 8003a86:	2100      	movs	r1, #0
 8003a88:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7ff fcc7 	bl	8003420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b004      	add	sp, #16
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2140      	movs	r1, #64	; 0x40
 8003aae:	438a      	bics	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7ff fca5 	bl	8003410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b002      	add	sp, #8
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <__libc_init_array>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	4d0c      	ldr	r5, [pc, #48]	; (8003b18 <__libc_init_array+0x38>)
 8003ae6:	4c0d      	ldr	r4, [pc, #52]	; (8003b1c <__libc_init_array+0x3c>)
 8003ae8:	1b64      	subs	r4, r4, r5
 8003aea:	10a4      	asrs	r4, r4, #2
 8003aec:	42a6      	cmp	r6, r4
 8003aee:	d109      	bne.n	8003b04 <__libc_init_array+0x24>
 8003af0:	2600      	movs	r6, #0
 8003af2:	f000 f821 	bl	8003b38 <_init>
 8003af6:	4d0a      	ldr	r5, [pc, #40]	; (8003b20 <__libc_init_array+0x40>)
 8003af8:	4c0a      	ldr	r4, [pc, #40]	; (8003b24 <__libc_init_array+0x44>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	42a6      	cmp	r6, r4
 8003b00:	d105      	bne.n	8003b0e <__libc_init_array+0x2e>
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
 8003b04:	00b3      	lsls	r3, r6, #2
 8003b06:	58eb      	ldr	r3, [r5, r3]
 8003b08:	4798      	blx	r3
 8003b0a:	3601      	adds	r6, #1
 8003b0c:	e7ee      	b.n	8003aec <__libc_init_array+0xc>
 8003b0e:	00b3      	lsls	r3, r6, #2
 8003b10:	58eb      	ldr	r3, [r5, r3]
 8003b12:	4798      	blx	r3
 8003b14:	3601      	adds	r6, #1
 8003b16:	e7f2      	b.n	8003afe <__libc_init_array+0x1e>
 8003b18:	08003b88 	.word	0x08003b88
 8003b1c:	08003b88 	.word	0x08003b88
 8003b20:	08003b88 	.word	0x08003b88
 8003b24:	08003b8c 	.word	0x08003b8c

08003b28 <memset>:
 8003b28:	0003      	movs	r3, r0
 8003b2a:	1812      	adds	r2, r2, r0
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d100      	bne.n	8003b32 <memset+0xa>
 8003b30:	4770      	bx	lr
 8003b32:	7019      	strb	r1, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	e7f9      	b.n	8003b2c <memset+0x4>

08003b38 <_init>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr

08003b44 <_fini>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr
