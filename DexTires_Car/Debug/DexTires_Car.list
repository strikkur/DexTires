
DexTires_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004780  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080048b8  080048b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048b8  080048b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048bc  080048bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  080048cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080048cc  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a558  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b05  00000000  00000000  0002a58c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  0002c098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  0002cc88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000018e1  00000000  00000000  0002d790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090d0  00000000  00000000  0002f071  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000544ee  00000000  00000000  00038141  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008c62f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b80  00000000  00000000  0008c6ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004828 	.word	0x08004828

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004828 	.word	0x08004828

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_dmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	4657      	mov	r7, sl
 80003f8:	46de      	mov	lr, fp
 80003fa:	464e      	mov	r6, r9
 80003fc:	4645      	mov	r5, r8
 80003fe:	b5e0      	push	{r5, r6, r7, lr}
 8000400:	4683      	mov	fp, r0
 8000402:	0006      	movs	r6, r0
 8000404:	030f      	lsls	r7, r1, #12
 8000406:	0048      	lsls	r0, r1, #1
 8000408:	b087      	sub	sp, #28
 800040a:	4692      	mov	sl, r2
 800040c:	001d      	movs	r5, r3
 800040e:	0b3f      	lsrs	r7, r7, #12
 8000410:	0d40      	lsrs	r0, r0, #21
 8000412:	0fcc      	lsrs	r4, r1, #31
 8000414:	2800      	cmp	r0, #0
 8000416:	d100      	bne.n	800041a <__aeabi_dmul+0x26>
 8000418:	e06f      	b.n	80004fa <__aeabi_dmul+0x106>
 800041a:	4bde      	ldr	r3, [pc, #888]	; (8000794 <__aeabi_dmul+0x3a0>)
 800041c:	4298      	cmp	r0, r3
 800041e:	d038      	beq.n	8000492 <__aeabi_dmul+0x9e>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	00ff      	lsls	r7, r7, #3
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	431f      	orrs	r7, r3
 8000428:	0f73      	lsrs	r3, r6, #29
 800042a:	433b      	orrs	r3, r7
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	4bda      	ldr	r3, [pc, #872]	; (8000798 <__aeabi_dmul+0x3a4>)
 8000430:	2700      	movs	r7, #0
 8000432:	4699      	mov	r9, r3
 8000434:	2300      	movs	r3, #0
 8000436:	469b      	mov	fp, r3
 8000438:	00f6      	lsls	r6, r6, #3
 800043a:	4481      	add	r9, r0
 800043c:	032b      	lsls	r3, r5, #12
 800043e:	0069      	lsls	r1, r5, #1
 8000440:	0b1b      	lsrs	r3, r3, #12
 8000442:	4652      	mov	r2, sl
 8000444:	4698      	mov	r8, r3
 8000446:	0d49      	lsrs	r1, r1, #21
 8000448:	0fed      	lsrs	r5, r5, #31
 800044a:	2900      	cmp	r1, #0
 800044c:	d100      	bne.n	8000450 <__aeabi_dmul+0x5c>
 800044e:	e085      	b.n	800055c <__aeabi_dmul+0x168>
 8000450:	4bd0      	ldr	r3, [pc, #832]	; (8000794 <__aeabi_dmul+0x3a0>)
 8000452:	4299      	cmp	r1, r3
 8000454:	d100      	bne.n	8000458 <__aeabi_dmul+0x64>
 8000456:	e073      	b.n	8000540 <__aeabi_dmul+0x14c>
 8000458:	4643      	mov	r3, r8
 800045a:	00da      	lsls	r2, r3, #3
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	041b      	lsls	r3, r3, #16
 8000460:	4313      	orrs	r3, r2
 8000462:	4652      	mov	r2, sl
 8000464:	48cc      	ldr	r0, [pc, #816]	; (8000798 <__aeabi_dmul+0x3a4>)
 8000466:	0f52      	lsrs	r2, r2, #29
 8000468:	4684      	mov	ip, r0
 800046a:	4313      	orrs	r3, r2
 800046c:	4652      	mov	r2, sl
 800046e:	2000      	movs	r0, #0
 8000470:	4461      	add	r1, ip
 8000472:	00d2      	lsls	r2, r2, #3
 8000474:	4489      	add	r9, r1
 8000476:	0021      	movs	r1, r4
 8000478:	4069      	eors	r1, r5
 800047a:	9100      	str	r1, [sp, #0]
 800047c:	468c      	mov	ip, r1
 800047e:	2101      	movs	r1, #1
 8000480:	4449      	add	r1, r9
 8000482:	468a      	mov	sl, r1
 8000484:	2f0f      	cmp	r7, #15
 8000486:	d900      	bls.n	800048a <__aeabi_dmul+0x96>
 8000488:	e090      	b.n	80005ac <__aeabi_dmul+0x1b8>
 800048a:	49c4      	ldr	r1, [pc, #784]	; (800079c <__aeabi_dmul+0x3a8>)
 800048c:	00bf      	lsls	r7, r7, #2
 800048e:	59cf      	ldr	r7, [r1, r7]
 8000490:	46bf      	mov	pc, r7
 8000492:	465b      	mov	r3, fp
 8000494:	433b      	orrs	r3, r7
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	d000      	beq.n	800049c <__aeabi_dmul+0xa8>
 800049a:	e16a      	b.n	8000772 <__aeabi_dmul+0x37e>
 800049c:	2302      	movs	r3, #2
 800049e:	2708      	movs	r7, #8
 80004a0:	2600      	movs	r6, #0
 80004a2:	4681      	mov	r9, r0
 80004a4:	469b      	mov	fp, r3
 80004a6:	e7c9      	b.n	800043c <__aeabi_dmul+0x48>
 80004a8:	0032      	movs	r2, r6
 80004aa:	4658      	mov	r0, fp
 80004ac:	9b01      	ldr	r3, [sp, #4]
 80004ae:	4661      	mov	r1, ip
 80004b0:	9100      	str	r1, [sp, #0]
 80004b2:	2802      	cmp	r0, #2
 80004b4:	d100      	bne.n	80004b8 <__aeabi_dmul+0xc4>
 80004b6:	e075      	b.n	80005a4 <__aeabi_dmul+0x1b0>
 80004b8:	2803      	cmp	r0, #3
 80004ba:	d100      	bne.n	80004be <__aeabi_dmul+0xca>
 80004bc:	e1fe      	b.n	80008bc <__aeabi_dmul+0x4c8>
 80004be:	2801      	cmp	r0, #1
 80004c0:	d000      	beq.n	80004c4 <__aeabi_dmul+0xd0>
 80004c2:	e12c      	b.n	800071e <__aeabi_dmul+0x32a>
 80004c4:	2300      	movs	r3, #0
 80004c6:	2700      	movs	r7, #0
 80004c8:	2600      	movs	r6, #0
 80004ca:	2500      	movs	r5, #0
 80004cc:	033f      	lsls	r7, r7, #12
 80004ce:	0d2a      	lsrs	r2, r5, #20
 80004d0:	0b3f      	lsrs	r7, r7, #12
 80004d2:	48b3      	ldr	r0, [pc, #716]	; (80007a0 <__aeabi_dmul+0x3ac>)
 80004d4:	0512      	lsls	r2, r2, #20
 80004d6:	433a      	orrs	r2, r7
 80004d8:	4002      	ands	r2, r0
 80004da:	051b      	lsls	r3, r3, #20
 80004dc:	4313      	orrs	r3, r2
 80004de:	9a00      	ldr	r2, [sp, #0]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	07d1      	lsls	r1, r2, #31
 80004e4:	085b      	lsrs	r3, r3, #1
 80004e6:	430b      	orrs	r3, r1
 80004e8:	0030      	movs	r0, r6
 80004ea:	0019      	movs	r1, r3
 80004ec:	b007      	add	sp, #28
 80004ee:	bc3c      	pop	{r2, r3, r4, r5}
 80004f0:	4690      	mov	r8, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	46a2      	mov	sl, r4
 80004f6:	46ab      	mov	fp, r5
 80004f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fa:	465b      	mov	r3, fp
 80004fc:	433b      	orrs	r3, r7
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	d100      	bne.n	8000504 <__aeabi_dmul+0x110>
 8000502:	e12f      	b.n	8000764 <__aeabi_dmul+0x370>
 8000504:	2f00      	cmp	r7, #0
 8000506:	d100      	bne.n	800050a <__aeabi_dmul+0x116>
 8000508:	e1a5      	b.n	8000856 <__aeabi_dmul+0x462>
 800050a:	0038      	movs	r0, r7
 800050c:	f000 fd94 	bl	8001038 <__clzsi2>
 8000510:	0003      	movs	r3, r0
 8000512:	3b0b      	subs	r3, #11
 8000514:	2b1c      	cmp	r3, #28
 8000516:	dd00      	ble.n	800051a <__aeabi_dmul+0x126>
 8000518:	e196      	b.n	8000848 <__aeabi_dmul+0x454>
 800051a:	221d      	movs	r2, #29
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	465a      	mov	r2, fp
 8000520:	0001      	movs	r1, r0
 8000522:	40da      	lsrs	r2, r3
 8000524:	465e      	mov	r6, fp
 8000526:	3908      	subs	r1, #8
 8000528:	408f      	lsls	r7, r1
 800052a:	0013      	movs	r3, r2
 800052c:	408e      	lsls	r6, r1
 800052e:	433b      	orrs	r3, r7
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	4b9c      	ldr	r3, [pc, #624]	; (80007a4 <__aeabi_dmul+0x3b0>)
 8000534:	2700      	movs	r7, #0
 8000536:	1a1b      	subs	r3, r3, r0
 8000538:	4699      	mov	r9, r3
 800053a:	2300      	movs	r3, #0
 800053c:	469b      	mov	fp, r3
 800053e:	e77d      	b.n	800043c <__aeabi_dmul+0x48>
 8000540:	4641      	mov	r1, r8
 8000542:	4653      	mov	r3, sl
 8000544:	430b      	orrs	r3, r1
 8000546:	4993      	ldr	r1, [pc, #588]	; (8000794 <__aeabi_dmul+0x3a0>)
 8000548:	468c      	mov	ip, r1
 800054a:	44e1      	add	r9, ip
 800054c:	2b00      	cmp	r3, #0
 800054e:	d000      	beq.n	8000552 <__aeabi_dmul+0x15e>
 8000550:	e11a      	b.n	8000788 <__aeabi_dmul+0x394>
 8000552:	2202      	movs	r2, #2
 8000554:	2002      	movs	r0, #2
 8000556:	4317      	orrs	r7, r2
 8000558:	2200      	movs	r2, #0
 800055a:	e78c      	b.n	8000476 <__aeabi_dmul+0x82>
 800055c:	4313      	orrs	r3, r2
 800055e:	d100      	bne.n	8000562 <__aeabi_dmul+0x16e>
 8000560:	e10d      	b.n	800077e <__aeabi_dmul+0x38a>
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d100      	bne.n	800056a <__aeabi_dmul+0x176>
 8000568:	e181      	b.n	800086e <__aeabi_dmul+0x47a>
 800056a:	4640      	mov	r0, r8
 800056c:	f000 fd64 	bl	8001038 <__clzsi2>
 8000570:	0002      	movs	r2, r0
 8000572:	3a0b      	subs	r2, #11
 8000574:	2a1c      	cmp	r2, #28
 8000576:	dd00      	ble.n	800057a <__aeabi_dmul+0x186>
 8000578:	e172      	b.n	8000860 <__aeabi_dmul+0x46c>
 800057a:	0001      	movs	r1, r0
 800057c:	4643      	mov	r3, r8
 800057e:	3908      	subs	r1, #8
 8000580:	408b      	lsls	r3, r1
 8000582:	4698      	mov	r8, r3
 8000584:	231d      	movs	r3, #29
 8000586:	1a9a      	subs	r2, r3, r2
 8000588:	4653      	mov	r3, sl
 800058a:	40d3      	lsrs	r3, r2
 800058c:	001a      	movs	r2, r3
 800058e:	4643      	mov	r3, r8
 8000590:	4313      	orrs	r3, r2
 8000592:	4652      	mov	r2, sl
 8000594:	408a      	lsls	r2, r1
 8000596:	4649      	mov	r1, r9
 8000598:	1a08      	subs	r0, r1, r0
 800059a:	4982      	ldr	r1, [pc, #520]	; (80007a4 <__aeabi_dmul+0x3b0>)
 800059c:	4689      	mov	r9, r1
 800059e:	4481      	add	r9, r0
 80005a0:	2000      	movs	r0, #0
 80005a2:	e768      	b.n	8000476 <__aeabi_dmul+0x82>
 80005a4:	4b7b      	ldr	r3, [pc, #492]	; (8000794 <__aeabi_dmul+0x3a0>)
 80005a6:	2700      	movs	r7, #0
 80005a8:	2600      	movs	r6, #0
 80005aa:	e78e      	b.n	80004ca <__aeabi_dmul+0xd6>
 80005ac:	0c14      	lsrs	r4, r2, #16
 80005ae:	0412      	lsls	r2, r2, #16
 80005b0:	0c12      	lsrs	r2, r2, #16
 80005b2:	0011      	movs	r1, r2
 80005b4:	0c37      	lsrs	r7, r6, #16
 80005b6:	0436      	lsls	r6, r6, #16
 80005b8:	0c35      	lsrs	r5, r6, #16
 80005ba:	4379      	muls	r1, r7
 80005bc:	0028      	movs	r0, r5
 80005be:	468c      	mov	ip, r1
 80005c0:	002e      	movs	r6, r5
 80005c2:	4360      	muls	r0, r4
 80005c4:	4460      	add	r0, ip
 80005c6:	4683      	mov	fp, r0
 80005c8:	4356      	muls	r6, r2
 80005ca:	0021      	movs	r1, r4
 80005cc:	0c30      	lsrs	r0, r6, #16
 80005ce:	4680      	mov	r8, r0
 80005d0:	4658      	mov	r0, fp
 80005d2:	4379      	muls	r1, r7
 80005d4:	4440      	add	r0, r8
 80005d6:	9102      	str	r1, [sp, #8]
 80005d8:	4584      	cmp	ip, r0
 80005da:	d906      	bls.n	80005ea <__aeabi_dmul+0x1f6>
 80005dc:	4688      	mov	r8, r1
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	0249      	lsls	r1, r1, #9
 80005e2:	468c      	mov	ip, r1
 80005e4:	44e0      	add	r8, ip
 80005e6:	4641      	mov	r1, r8
 80005e8:	9102      	str	r1, [sp, #8]
 80005ea:	0436      	lsls	r6, r6, #16
 80005ec:	0c01      	lsrs	r1, r0, #16
 80005ee:	0c36      	lsrs	r6, r6, #16
 80005f0:	0400      	lsls	r0, r0, #16
 80005f2:	468b      	mov	fp, r1
 80005f4:	1981      	adds	r1, r0, r6
 80005f6:	0c1e      	lsrs	r6, r3, #16
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	0c1b      	lsrs	r3, r3, #16
 80005fc:	9103      	str	r1, [sp, #12]
 80005fe:	0019      	movs	r1, r3
 8000600:	4379      	muls	r1, r7
 8000602:	468c      	mov	ip, r1
 8000604:	0028      	movs	r0, r5
 8000606:	4375      	muls	r5, r6
 8000608:	4465      	add	r5, ip
 800060a:	46a8      	mov	r8, r5
 800060c:	4358      	muls	r0, r3
 800060e:	0c05      	lsrs	r5, r0, #16
 8000610:	4445      	add	r5, r8
 8000612:	4377      	muls	r7, r6
 8000614:	42a9      	cmp	r1, r5
 8000616:	d903      	bls.n	8000620 <__aeabi_dmul+0x22c>
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0249      	lsls	r1, r1, #9
 800061c:	468c      	mov	ip, r1
 800061e:	4467      	add	r7, ip
 8000620:	0c29      	lsrs	r1, r5, #16
 8000622:	468c      	mov	ip, r1
 8000624:	0039      	movs	r1, r7
 8000626:	0400      	lsls	r0, r0, #16
 8000628:	0c00      	lsrs	r0, r0, #16
 800062a:	042d      	lsls	r5, r5, #16
 800062c:	182d      	adds	r5, r5, r0
 800062e:	4461      	add	r1, ip
 8000630:	44ab      	add	fp, r5
 8000632:	9105      	str	r1, [sp, #20]
 8000634:	4659      	mov	r1, fp
 8000636:	9104      	str	r1, [sp, #16]
 8000638:	9901      	ldr	r1, [sp, #4]
 800063a:	040f      	lsls	r7, r1, #16
 800063c:	0c3f      	lsrs	r7, r7, #16
 800063e:	0c08      	lsrs	r0, r1, #16
 8000640:	0039      	movs	r1, r7
 8000642:	4351      	muls	r1, r2
 8000644:	4342      	muls	r2, r0
 8000646:	4690      	mov	r8, r2
 8000648:	0002      	movs	r2, r0
 800064a:	468c      	mov	ip, r1
 800064c:	0c09      	lsrs	r1, r1, #16
 800064e:	468b      	mov	fp, r1
 8000650:	4362      	muls	r2, r4
 8000652:	437c      	muls	r4, r7
 8000654:	4444      	add	r4, r8
 8000656:	445c      	add	r4, fp
 8000658:	45a0      	cmp	r8, r4
 800065a:	d903      	bls.n	8000664 <__aeabi_dmul+0x270>
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0249      	lsls	r1, r1, #9
 8000660:	4688      	mov	r8, r1
 8000662:	4442      	add	r2, r8
 8000664:	0c21      	lsrs	r1, r4, #16
 8000666:	4688      	mov	r8, r1
 8000668:	4661      	mov	r1, ip
 800066a:	0409      	lsls	r1, r1, #16
 800066c:	0c09      	lsrs	r1, r1, #16
 800066e:	468c      	mov	ip, r1
 8000670:	0039      	movs	r1, r7
 8000672:	4359      	muls	r1, r3
 8000674:	4343      	muls	r3, r0
 8000676:	4370      	muls	r0, r6
 8000678:	437e      	muls	r6, r7
 800067a:	0c0f      	lsrs	r7, r1, #16
 800067c:	18f6      	adds	r6, r6, r3
 800067e:	0424      	lsls	r4, r4, #16
 8000680:	19be      	adds	r6, r7, r6
 8000682:	4464      	add	r4, ip
 8000684:	4442      	add	r2, r8
 8000686:	468c      	mov	ip, r1
 8000688:	42b3      	cmp	r3, r6
 800068a:	d903      	bls.n	8000694 <__aeabi_dmul+0x2a0>
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	025b      	lsls	r3, r3, #9
 8000690:	4698      	mov	r8, r3
 8000692:	4440      	add	r0, r8
 8000694:	9b02      	ldr	r3, [sp, #8]
 8000696:	4661      	mov	r1, ip
 8000698:	4698      	mov	r8, r3
 800069a:	9b04      	ldr	r3, [sp, #16]
 800069c:	0437      	lsls	r7, r6, #16
 800069e:	4443      	add	r3, r8
 80006a0:	469b      	mov	fp, r3
 80006a2:	45ab      	cmp	fp, r5
 80006a4:	41ad      	sbcs	r5, r5
 80006a6:	426b      	negs	r3, r5
 80006a8:	040d      	lsls	r5, r1, #16
 80006aa:	9905      	ldr	r1, [sp, #20]
 80006ac:	0c2d      	lsrs	r5, r5, #16
 80006ae:	468c      	mov	ip, r1
 80006b0:	197f      	adds	r7, r7, r5
 80006b2:	4467      	add	r7, ip
 80006b4:	18fd      	adds	r5, r7, r3
 80006b6:	46a8      	mov	r8, r5
 80006b8:	465d      	mov	r5, fp
 80006ba:	192d      	adds	r5, r5, r4
 80006bc:	42a5      	cmp	r5, r4
 80006be:	41a4      	sbcs	r4, r4
 80006c0:	4693      	mov	fp, r2
 80006c2:	4264      	negs	r4, r4
 80006c4:	46a4      	mov	ip, r4
 80006c6:	44c3      	add	fp, r8
 80006c8:	44dc      	add	ip, fp
 80006ca:	428f      	cmp	r7, r1
 80006cc:	41bf      	sbcs	r7, r7
 80006ce:	4598      	cmp	r8, r3
 80006d0:	419b      	sbcs	r3, r3
 80006d2:	4593      	cmp	fp, r2
 80006d4:	4192      	sbcs	r2, r2
 80006d6:	45a4      	cmp	ip, r4
 80006d8:	41a4      	sbcs	r4, r4
 80006da:	425b      	negs	r3, r3
 80006dc:	427f      	negs	r7, r7
 80006de:	431f      	orrs	r7, r3
 80006e0:	0c36      	lsrs	r6, r6, #16
 80006e2:	4252      	negs	r2, r2
 80006e4:	4264      	negs	r4, r4
 80006e6:	19bf      	adds	r7, r7, r6
 80006e8:	4322      	orrs	r2, r4
 80006ea:	18bf      	adds	r7, r7, r2
 80006ec:	4662      	mov	r2, ip
 80006ee:	1838      	adds	r0, r7, r0
 80006f0:	0243      	lsls	r3, r0, #9
 80006f2:	0dd2      	lsrs	r2, r2, #23
 80006f4:	9903      	ldr	r1, [sp, #12]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	026a      	lsls	r2, r5, #9
 80006fa:	430a      	orrs	r2, r1
 80006fc:	1e50      	subs	r0, r2, #1
 80006fe:	4182      	sbcs	r2, r0
 8000700:	4661      	mov	r1, ip
 8000702:	0ded      	lsrs	r5, r5, #23
 8000704:	432a      	orrs	r2, r5
 8000706:	024e      	lsls	r6, r1, #9
 8000708:	4332      	orrs	r2, r6
 800070a:	01d9      	lsls	r1, r3, #7
 800070c:	d400      	bmi.n	8000710 <__aeabi_dmul+0x31c>
 800070e:	e0b3      	b.n	8000878 <__aeabi_dmul+0x484>
 8000710:	2601      	movs	r6, #1
 8000712:	0850      	lsrs	r0, r2, #1
 8000714:	4032      	ands	r2, r6
 8000716:	4302      	orrs	r2, r0
 8000718:	07de      	lsls	r6, r3, #31
 800071a:	4332      	orrs	r2, r6
 800071c:	085b      	lsrs	r3, r3, #1
 800071e:	4c22      	ldr	r4, [pc, #136]	; (80007a8 <__aeabi_dmul+0x3b4>)
 8000720:	4454      	add	r4, sl
 8000722:	2c00      	cmp	r4, #0
 8000724:	dd62      	ble.n	80007ec <__aeabi_dmul+0x3f8>
 8000726:	0751      	lsls	r1, r2, #29
 8000728:	d009      	beq.n	800073e <__aeabi_dmul+0x34a>
 800072a:	200f      	movs	r0, #15
 800072c:	4010      	ands	r0, r2
 800072e:	2804      	cmp	r0, #4
 8000730:	d005      	beq.n	800073e <__aeabi_dmul+0x34a>
 8000732:	1d10      	adds	r0, r2, #4
 8000734:	4290      	cmp	r0, r2
 8000736:	4192      	sbcs	r2, r2
 8000738:	4252      	negs	r2, r2
 800073a:	189b      	adds	r3, r3, r2
 800073c:	0002      	movs	r2, r0
 800073e:	01d9      	lsls	r1, r3, #7
 8000740:	d504      	bpl.n	800074c <__aeabi_dmul+0x358>
 8000742:	2480      	movs	r4, #128	; 0x80
 8000744:	4819      	ldr	r0, [pc, #100]	; (80007ac <__aeabi_dmul+0x3b8>)
 8000746:	00e4      	lsls	r4, r4, #3
 8000748:	4003      	ands	r3, r0
 800074a:	4454      	add	r4, sl
 800074c:	4818      	ldr	r0, [pc, #96]	; (80007b0 <__aeabi_dmul+0x3bc>)
 800074e:	4284      	cmp	r4, r0
 8000750:	dd00      	ble.n	8000754 <__aeabi_dmul+0x360>
 8000752:	e727      	b.n	80005a4 <__aeabi_dmul+0x1b0>
 8000754:	075e      	lsls	r6, r3, #29
 8000756:	025b      	lsls	r3, r3, #9
 8000758:	08d2      	lsrs	r2, r2, #3
 800075a:	0b1f      	lsrs	r7, r3, #12
 800075c:	0563      	lsls	r3, r4, #21
 800075e:	4316      	orrs	r6, r2
 8000760:	0d5b      	lsrs	r3, r3, #21
 8000762:	e6b2      	b.n	80004ca <__aeabi_dmul+0xd6>
 8000764:	2300      	movs	r3, #0
 8000766:	4699      	mov	r9, r3
 8000768:	3301      	adds	r3, #1
 800076a:	2704      	movs	r7, #4
 800076c:	2600      	movs	r6, #0
 800076e:	469b      	mov	fp, r3
 8000770:	e664      	b.n	800043c <__aeabi_dmul+0x48>
 8000772:	2303      	movs	r3, #3
 8000774:	9701      	str	r7, [sp, #4]
 8000776:	4681      	mov	r9, r0
 8000778:	270c      	movs	r7, #12
 800077a:	469b      	mov	fp, r3
 800077c:	e65e      	b.n	800043c <__aeabi_dmul+0x48>
 800077e:	2201      	movs	r2, #1
 8000780:	2001      	movs	r0, #1
 8000782:	4317      	orrs	r7, r2
 8000784:	2200      	movs	r2, #0
 8000786:	e676      	b.n	8000476 <__aeabi_dmul+0x82>
 8000788:	2303      	movs	r3, #3
 800078a:	2003      	movs	r0, #3
 800078c:	431f      	orrs	r7, r3
 800078e:	4643      	mov	r3, r8
 8000790:	e671      	b.n	8000476 <__aeabi_dmul+0x82>
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	000007ff 	.word	0x000007ff
 8000798:	fffffc01 	.word	0xfffffc01
 800079c:	08004860 	.word	0x08004860
 80007a0:	800fffff 	.word	0x800fffff
 80007a4:	fffffc0d 	.word	0xfffffc0d
 80007a8:	000003ff 	.word	0x000003ff
 80007ac:	feffffff 	.word	0xfeffffff
 80007b0:	000007fe 	.word	0x000007fe
 80007b4:	2300      	movs	r3, #0
 80007b6:	2780      	movs	r7, #128	; 0x80
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	033f      	lsls	r7, r7, #12
 80007bc:	2600      	movs	r6, #0
 80007be:	4b43      	ldr	r3, [pc, #268]	; (80008cc <__aeabi_dmul+0x4d8>)
 80007c0:	e683      	b.n	80004ca <__aeabi_dmul+0xd6>
 80007c2:	9b01      	ldr	r3, [sp, #4]
 80007c4:	0032      	movs	r2, r6
 80007c6:	46a4      	mov	ip, r4
 80007c8:	4658      	mov	r0, fp
 80007ca:	e670      	b.n	80004ae <__aeabi_dmul+0xba>
 80007cc:	46ac      	mov	ip, r5
 80007ce:	e66e      	b.n	80004ae <__aeabi_dmul+0xba>
 80007d0:	2780      	movs	r7, #128	; 0x80
 80007d2:	9901      	ldr	r1, [sp, #4]
 80007d4:	033f      	lsls	r7, r7, #12
 80007d6:	4239      	tst	r1, r7
 80007d8:	d02d      	beq.n	8000836 <__aeabi_dmul+0x442>
 80007da:	423b      	tst	r3, r7
 80007dc:	d12b      	bne.n	8000836 <__aeabi_dmul+0x442>
 80007de:	431f      	orrs	r7, r3
 80007e0:	033f      	lsls	r7, r7, #12
 80007e2:	0b3f      	lsrs	r7, r7, #12
 80007e4:	9500      	str	r5, [sp, #0]
 80007e6:	0016      	movs	r6, r2
 80007e8:	4b38      	ldr	r3, [pc, #224]	; (80008cc <__aeabi_dmul+0x4d8>)
 80007ea:	e66e      	b.n	80004ca <__aeabi_dmul+0xd6>
 80007ec:	2501      	movs	r5, #1
 80007ee:	1b2d      	subs	r5, r5, r4
 80007f0:	2d38      	cmp	r5, #56	; 0x38
 80007f2:	dd00      	ble.n	80007f6 <__aeabi_dmul+0x402>
 80007f4:	e666      	b.n	80004c4 <__aeabi_dmul+0xd0>
 80007f6:	2d1f      	cmp	r5, #31
 80007f8:	dc40      	bgt.n	800087c <__aeabi_dmul+0x488>
 80007fa:	4835      	ldr	r0, [pc, #212]	; (80008d0 <__aeabi_dmul+0x4dc>)
 80007fc:	001c      	movs	r4, r3
 80007fe:	4450      	add	r0, sl
 8000800:	0016      	movs	r6, r2
 8000802:	4082      	lsls	r2, r0
 8000804:	4084      	lsls	r4, r0
 8000806:	40ee      	lsrs	r6, r5
 8000808:	1e50      	subs	r0, r2, #1
 800080a:	4182      	sbcs	r2, r0
 800080c:	4334      	orrs	r4, r6
 800080e:	4314      	orrs	r4, r2
 8000810:	40eb      	lsrs	r3, r5
 8000812:	0762      	lsls	r2, r4, #29
 8000814:	d009      	beq.n	800082a <__aeabi_dmul+0x436>
 8000816:	220f      	movs	r2, #15
 8000818:	4022      	ands	r2, r4
 800081a:	2a04      	cmp	r2, #4
 800081c:	d005      	beq.n	800082a <__aeabi_dmul+0x436>
 800081e:	0022      	movs	r2, r4
 8000820:	1d14      	adds	r4, r2, #4
 8000822:	4294      	cmp	r4, r2
 8000824:	4180      	sbcs	r0, r0
 8000826:	4240      	negs	r0, r0
 8000828:	181b      	adds	r3, r3, r0
 800082a:	021a      	lsls	r2, r3, #8
 800082c:	d53e      	bpl.n	80008ac <__aeabi_dmul+0x4b8>
 800082e:	2301      	movs	r3, #1
 8000830:	2700      	movs	r7, #0
 8000832:	2600      	movs	r6, #0
 8000834:	e649      	b.n	80004ca <__aeabi_dmul+0xd6>
 8000836:	2780      	movs	r7, #128	; 0x80
 8000838:	9b01      	ldr	r3, [sp, #4]
 800083a:	033f      	lsls	r7, r7, #12
 800083c:	431f      	orrs	r7, r3
 800083e:	033f      	lsls	r7, r7, #12
 8000840:	0b3f      	lsrs	r7, r7, #12
 8000842:	9400      	str	r4, [sp, #0]
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <__aeabi_dmul+0x4d8>)
 8000846:	e640      	b.n	80004ca <__aeabi_dmul+0xd6>
 8000848:	0003      	movs	r3, r0
 800084a:	465a      	mov	r2, fp
 800084c:	3b28      	subs	r3, #40	; 0x28
 800084e:	409a      	lsls	r2, r3
 8000850:	2600      	movs	r6, #0
 8000852:	9201      	str	r2, [sp, #4]
 8000854:	e66d      	b.n	8000532 <__aeabi_dmul+0x13e>
 8000856:	4658      	mov	r0, fp
 8000858:	f000 fbee 	bl	8001038 <__clzsi2>
 800085c:	3020      	adds	r0, #32
 800085e:	e657      	b.n	8000510 <__aeabi_dmul+0x11c>
 8000860:	0003      	movs	r3, r0
 8000862:	4652      	mov	r2, sl
 8000864:	3b28      	subs	r3, #40	; 0x28
 8000866:	409a      	lsls	r2, r3
 8000868:	0013      	movs	r3, r2
 800086a:	2200      	movs	r2, #0
 800086c:	e693      	b.n	8000596 <__aeabi_dmul+0x1a2>
 800086e:	4650      	mov	r0, sl
 8000870:	f000 fbe2 	bl	8001038 <__clzsi2>
 8000874:	3020      	adds	r0, #32
 8000876:	e67b      	b.n	8000570 <__aeabi_dmul+0x17c>
 8000878:	46ca      	mov	sl, r9
 800087a:	e750      	b.n	800071e <__aeabi_dmul+0x32a>
 800087c:	201f      	movs	r0, #31
 800087e:	001e      	movs	r6, r3
 8000880:	4240      	negs	r0, r0
 8000882:	1b04      	subs	r4, r0, r4
 8000884:	40e6      	lsrs	r6, r4
 8000886:	2d20      	cmp	r5, #32
 8000888:	d003      	beq.n	8000892 <__aeabi_dmul+0x49e>
 800088a:	4c12      	ldr	r4, [pc, #72]	; (80008d4 <__aeabi_dmul+0x4e0>)
 800088c:	4454      	add	r4, sl
 800088e:	40a3      	lsls	r3, r4
 8000890:	431a      	orrs	r2, r3
 8000892:	1e50      	subs	r0, r2, #1
 8000894:	4182      	sbcs	r2, r0
 8000896:	4332      	orrs	r2, r6
 8000898:	2607      	movs	r6, #7
 800089a:	2700      	movs	r7, #0
 800089c:	4016      	ands	r6, r2
 800089e:	d009      	beq.n	80008b4 <__aeabi_dmul+0x4c0>
 80008a0:	200f      	movs	r0, #15
 80008a2:	2300      	movs	r3, #0
 80008a4:	4010      	ands	r0, r2
 80008a6:	0014      	movs	r4, r2
 80008a8:	2804      	cmp	r0, #4
 80008aa:	d1b9      	bne.n	8000820 <__aeabi_dmul+0x42c>
 80008ac:	0022      	movs	r2, r4
 80008ae:	075e      	lsls	r6, r3, #29
 80008b0:	025b      	lsls	r3, r3, #9
 80008b2:	0b1f      	lsrs	r7, r3, #12
 80008b4:	08d2      	lsrs	r2, r2, #3
 80008b6:	4316      	orrs	r6, r2
 80008b8:	2300      	movs	r3, #0
 80008ba:	e606      	b.n	80004ca <__aeabi_dmul+0xd6>
 80008bc:	2780      	movs	r7, #128	; 0x80
 80008be:	033f      	lsls	r7, r7, #12
 80008c0:	431f      	orrs	r7, r3
 80008c2:	033f      	lsls	r7, r7, #12
 80008c4:	0b3f      	lsrs	r7, r7, #12
 80008c6:	0016      	movs	r6, r2
 80008c8:	4b00      	ldr	r3, [pc, #0]	; (80008cc <__aeabi_dmul+0x4d8>)
 80008ca:	e5fe      	b.n	80004ca <__aeabi_dmul+0xd6>
 80008cc:	000007ff 	.word	0x000007ff
 80008d0:	0000041e 	.word	0x0000041e
 80008d4:	0000043e 	.word	0x0000043e

080008d8 <__aeabi_dsub>:
 80008d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008da:	4657      	mov	r7, sl
 80008dc:	464e      	mov	r6, r9
 80008de:	4645      	mov	r5, r8
 80008e0:	46de      	mov	lr, fp
 80008e2:	000c      	movs	r4, r1
 80008e4:	0309      	lsls	r1, r1, #12
 80008e6:	b5e0      	push	{r5, r6, r7, lr}
 80008e8:	0a49      	lsrs	r1, r1, #9
 80008ea:	0f46      	lsrs	r6, r0, #29
 80008ec:	005f      	lsls	r7, r3, #1
 80008ee:	4331      	orrs	r1, r6
 80008f0:	031e      	lsls	r6, r3, #12
 80008f2:	0fdb      	lsrs	r3, r3, #31
 80008f4:	0a76      	lsrs	r6, r6, #9
 80008f6:	469b      	mov	fp, r3
 80008f8:	0f53      	lsrs	r3, r2, #29
 80008fa:	4333      	orrs	r3, r6
 80008fc:	4ec8      	ldr	r6, [pc, #800]	; (8000c20 <__aeabi_dsub+0x348>)
 80008fe:	0065      	lsls	r5, r4, #1
 8000900:	00c0      	lsls	r0, r0, #3
 8000902:	0fe4      	lsrs	r4, r4, #31
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	0d6d      	lsrs	r5, r5, #21
 8000908:	46a2      	mov	sl, r4
 800090a:	4681      	mov	r9, r0
 800090c:	0d7f      	lsrs	r7, r7, #21
 800090e:	469c      	mov	ip, r3
 8000910:	4690      	mov	r8, r2
 8000912:	42b7      	cmp	r7, r6
 8000914:	d100      	bne.n	8000918 <__aeabi_dsub+0x40>
 8000916:	e0b9      	b.n	8000a8c <__aeabi_dsub+0x1b4>
 8000918:	465b      	mov	r3, fp
 800091a:	2601      	movs	r6, #1
 800091c:	4073      	eors	r3, r6
 800091e:	469b      	mov	fp, r3
 8000920:	1bee      	subs	r6, r5, r7
 8000922:	45a3      	cmp	fp, r4
 8000924:	d100      	bne.n	8000928 <__aeabi_dsub+0x50>
 8000926:	e083      	b.n	8000a30 <__aeabi_dsub+0x158>
 8000928:	2e00      	cmp	r6, #0
 800092a:	dd63      	ble.n	80009f4 <__aeabi_dsub+0x11c>
 800092c:	2f00      	cmp	r7, #0
 800092e:	d000      	beq.n	8000932 <__aeabi_dsub+0x5a>
 8000930:	e0b1      	b.n	8000a96 <__aeabi_dsub+0x1be>
 8000932:	4663      	mov	r3, ip
 8000934:	4313      	orrs	r3, r2
 8000936:	d100      	bne.n	800093a <__aeabi_dsub+0x62>
 8000938:	e123      	b.n	8000b82 <__aeabi_dsub+0x2aa>
 800093a:	1e73      	subs	r3, r6, #1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d000      	beq.n	8000942 <__aeabi_dsub+0x6a>
 8000940:	e1ba      	b.n	8000cb8 <__aeabi_dsub+0x3e0>
 8000942:	1a86      	subs	r6, r0, r2
 8000944:	4663      	mov	r3, ip
 8000946:	42b0      	cmp	r0, r6
 8000948:	4180      	sbcs	r0, r0
 800094a:	2501      	movs	r5, #1
 800094c:	1ac9      	subs	r1, r1, r3
 800094e:	4240      	negs	r0, r0
 8000950:	1a09      	subs	r1, r1, r0
 8000952:	020b      	lsls	r3, r1, #8
 8000954:	d400      	bmi.n	8000958 <__aeabi_dsub+0x80>
 8000956:	e147      	b.n	8000be8 <__aeabi_dsub+0x310>
 8000958:	0249      	lsls	r1, r1, #9
 800095a:	0a4b      	lsrs	r3, r1, #9
 800095c:	4698      	mov	r8, r3
 800095e:	4643      	mov	r3, r8
 8000960:	2b00      	cmp	r3, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_dsub+0x8e>
 8000964:	e189      	b.n	8000c7a <__aeabi_dsub+0x3a2>
 8000966:	4640      	mov	r0, r8
 8000968:	f000 fb66 	bl	8001038 <__clzsi2>
 800096c:	0003      	movs	r3, r0
 800096e:	3b08      	subs	r3, #8
 8000970:	2b1f      	cmp	r3, #31
 8000972:	dd00      	ble.n	8000976 <__aeabi_dsub+0x9e>
 8000974:	e17c      	b.n	8000c70 <__aeabi_dsub+0x398>
 8000976:	2220      	movs	r2, #32
 8000978:	0030      	movs	r0, r6
 800097a:	1ad2      	subs	r2, r2, r3
 800097c:	4641      	mov	r1, r8
 800097e:	40d0      	lsrs	r0, r2
 8000980:	4099      	lsls	r1, r3
 8000982:	0002      	movs	r2, r0
 8000984:	409e      	lsls	r6, r3
 8000986:	430a      	orrs	r2, r1
 8000988:	429d      	cmp	r5, r3
 800098a:	dd00      	ble.n	800098e <__aeabi_dsub+0xb6>
 800098c:	e16a      	b.n	8000c64 <__aeabi_dsub+0x38c>
 800098e:	1b5d      	subs	r5, r3, r5
 8000990:	1c6b      	adds	r3, r5, #1
 8000992:	2b1f      	cmp	r3, #31
 8000994:	dd00      	ble.n	8000998 <__aeabi_dsub+0xc0>
 8000996:	e194      	b.n	8000cc2 <__aeabi_dsub+0x3ea>
 8000998:	2120      	movs	r1, #32
 800099a:	0010      	movs	r0, r2
 800099c:	0035      	movs	r5, r6
 800099e:	1ac9      	subs	r1, r1, r3
 80009a0:	408e      	lsls	r6, r1
 80009a2:	40da      	lsrs	r2, r3
 80009a4:	4088      	lsls	r0, r1
 80009a6:	40dd      	lsrs	r5, r3
 80009a8:	1e71      	subs	r1, r6, #1
 80009aa:	418e      	sbcs	r6, r1
 80009ac:	0011      	movs	r1, r2
 80009ae:	2207      	movs	r2, #7
 80009b0:	4328      	orrs	r0, r5
 80009b2:	2500      	movs	r5, #0
 80009b4:	4306      	orrs	r6, r0
 80009b6:	4032      	ands	r2, r6
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d009      	beq.n	80009d0 <__aeabi_dsub+0xf8>
 80009bc:	230f      	movs	r3, #15
 80009be:	4033      	ands	r3, r6
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d005      	beq.n	80009d0 <__aeabi_dsub+0xf8>
 80009c4:	1d33      	adds	r3, r6, #4
 80009c6:	42b3      	cmp	r3, r6
 80009c8:	41b6      	sbcs	r6, r6
 80009ca:	4276      	negs	r6, r6
 80009cc:	1989      	adds	r1, r1, r6
 80009ce:	001e      	movs	r6, r3
 80009d0:	020b      	lsls	r3, r1, #8
 80009d2:	d400      	bmi.n	80009d6 <__aeabi_dsub+0xfe>
 80009d4:	e23d      	b.n	8000e52 <__aeabi_dsub+0x57a>
 80009d6:	1c6a      	adds	r2, r5, #1
 80009d8:	4b91      	ldr	r3, [pc, #580]	; (8000c20 <__aeabi_dsub+0x348>)
 80009da:	0555      	lsls	r5, r2, #21
 80009dc:	0d6d      	lsrs	r5, r5, #21
 80009de:	429a      	cmp	r2, r3
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dsub+0x10c>
 80009e2:	e119      	b.n	8000c18 <__aeabi_dsub+0x340>
 80009e4:	4a8f      	ldr	r2, [pc, #572]	; (8000c24 <__aeabi_dsub+0x34c>)
 80009e6:	08f6      	lsrs	r6, r6, #3
 80009e8:	400a      	ands	r2, r1
 80009ea:	0757      	lsls	r7, r2, #29
 80009ec:	0252      	lsls	r2, r2, #9
 80009ee:	4337      	orrs	r7, r6
 80009f0:	0b12      	lsrs	r2, r2, #12
 80009f2:	e09b      	b.n	8000b2c <__aeabi_dsub+0x254>
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d000      	beq.n	80009fa <__aeabi_dsub+0x122>
 80009f8:	e0c5      	b.n	8000b86 <__aeabi_dsub+0x2ae>
 80009fa:	1c6e      	adds	r6, r5, #1
 80009fc:	0576      	lsls	r6, r6, #21
 80009fe:	0d76      	lsrs	r6, r6, #21
 8000a00:	2e01      	cmp	r6, #1
 8000a02:	dc00      	bgt.n	8000a06 <__aeabi_dsub+0x12e>
 8000a04:	e148      	b.n	8000c98 <__aeabi_dsub+0x3c0>
 8000a06:	4667      	mov	r7, ip
 8000a08:	1a86      	subs	r6, r0, r2
 8000a0a:	1bcb      	subs	r3, r1, r7
 8000a0c:	42b0      	cmp	r0, r6
 8000a0e:	41bf      	sbcs	r7, r7
 8000a10:	427f      	negs	r7, r7
 8000a12:	46b8      	mov	r8, r7
 8000a14:	001f      	movs	r7, r3
 8000a16:	4643      	mov	r3, r8
 8000a18:	1aff      	subs	r7, r7, r3
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	46b8      	mov	r8, r7
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	d500      	bpl.n	8000a24 <__aeabi_dsub+0x14c>
 8000a22:	e15f      	b.n	8000ce4 <__aeabi_dsub+0x40c>
 8000a24:	4337      	orrs	r7, r6
 8000a26:	d19a      	bne.n	800095e <__aeabi_dsub+0x86>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	e079      	b.n	8000b24 <__aeabi_dsub+0x24c>
 8000a30:	2e00      	cmp	r6, #0
 8000a32:	dc00      	bgt.n	8000a36 <__aeabi_dsub+0x15e>
 8000a34:	e0fa      	b.n	8000c2c <__aeabi_dsub+0x354>
 8000a36:	2f00      	cmp	r7, #0
 8000a38:	d100      	bne.n	8000a3c <__aeabi_dsub+0x164>
 8000a3a:	e08d      	b.n	8000b58 <__aeabi_dsub+0x280>
 8000a3c:	4b78      	ldr	r3, [pc, #480]	; (8000c20 <__aeabi_dsub+0x348>)
 8000a3e:	429d      	cmp	r5, r3
 8000a40:	d067      	beq.n	8000b12 <__aeabi_dsub+0x23a>
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	4667      	mov	r7, ip
 8000a46:	041b      	lsls	r3, r3, #16
 8000a48:	431f      	orrs	r7, r3
 8000a4a:	46bc      	mov	ip, r7
 8000a4c:	2e38      	cmp	r6, #56	; 0x38
 8000a4e:	dc00      	bgt.n	8000a52 <__aeabi_dsub+0x17a>
 8000a50:	e152      	b.n	8000cf8 <__aeabi_dsub+0x420>
 8000a52:	4663      	mov	r3, ip
 8000a54:	4313      	orrs	r3, r2
 8000a56:	1e5a      	subs	r2, r3, #1
 8000a58:	4193      	sbcs	r3, r2
 8000a5a:	181e      	adds	r6, r3, r0
 8000a5c:	4286      	cmp	r6, r0
 8000a5e:	4180      	sbcs	r0, r0
 8000a60:	4240      	negs	r0, r0
 8000a62:	1809      	adds	r1, r1, r0
 8000a64:	020b      	lsls	r3, r1, #8
 8000a66:	d400      	bmi.n	8000a6a <__aeabi_dsub+0x192>
 8000a68:	e0be      	b.n	8000be8 <__aeabi_dsub+0x310>
 8000a6a:	4b6d      	ldr	r3, [pc, #436]	; (8000c20 <__aeabi_dsub+0x348>)
 8000a6c:	3501      	adds	r5, #1
 8000a6e:	429d      	cmp	r5, r3
 8000a70:	d100      	bne.n	8000a74 <__aeabi_dsub+0x19c>
 8000a72:	e0d2      	b.n	8000c1a <__aeabi_dsub+0x342>
 8000a74:	4a6b      	ldr	r2, [pc, #428]	; (8000c24 <__aeabi_dsub+0x34c>)
 8000a76:	0873      	lsrs	r3, r6, #1
 8000a78:	400a      	ands	r2, r1
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	400e      	ands	r6, r1
 8000a7e:	431e      	orrs	r6, r3
 8000a80:	0851      	lsrs	r1, r2, #1
 8000a82:	07d3      	lsls	r3, r2, #31
 8000a84:	2207      	movs	r2, #7
 8000a86:	431e      	orrs	r6, r3
 8000a88:	4032      	ands	r2, r6
 8000a8a:	e795      	b.n	80009b8 <__aeabi_dsub+0xe0>
 8000a8c:	001e      	movs	r6, r3
 8000a8e:	4316      	orrs	r6, r2
 8000a90:	d000      	beq.n	8000a94 <__aeabi_dsub+0x1bc>
 8000a92:	e745      	b.n	8000920 <__aeabi_dsub+0x48>
 8000a94:	e740      	b.n	8000918 <__aeabi_dsub+0x40>
 8000a96:	4b62      	ldr	r3, [pc, #392]	; (8000c20 <__aeabi_dsub+0x348>)
 8000a98:	429d      	cmp	r5, r3
 8000a9a:	d03a      	beq.n	8000b12 <__aeabi_dsub+0x23a>
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	041b      	lsls	r3, r3, #16
 8000aa2:	431f      	orrs	r7, r3
 8000aa4:	46bc      	mov	ip, r7
 8000aa6:	2e38      	cmp	r6, #56	; 0x38
 8000aa8:	dd00      	ble.n	8000aac <__aeabi_dsub+0x1d4>
 8000aaa:	e0eb      	b.n	8000c84 <__aeabi_dsub+0x3ac>
 8000aac:	2e1f      	cmp	r6, #31
 8000aae:	dc00      	bgt.n	8000ab2 <__aeabi_dsub+0x1da>
 8000ab0:	e13a      	b.n	8000d28 <__aeabi_dsub+0x450>
 8000ab2:	0033      	movs	r3, r6
 8000ab4:	4667      	mov	r7, ip
 8000ab6:	3b20      	subs	r3, #32
 8000ab8:	40df      	lsrs	r7, r3
 8000aba:	003b      	movs	r3, r7
 8000abc:	2e20      	cmp	r6, #32
 8000abe:	d005      	beq.n	8000acc <__aeabi_dsub+0x1f4>
 8000ac0:	2740      	movs	r7, #64	; 0x40
 8000ac2:	1bbf      	subs	r7, r7, r6
 8000ac4:	4666      	mov	r6, ip
 8000ac6:	40be      	lsls	r6, r7
 8000ac8:	4332      	orrs	r2, r6
 8000aca:	4690      	mov	r8, r2
 8000acc:	4646      	mov	r6, r8
 8000ace:	1e72      	subs	r2, r6, #1
 8000ad0:	4196      	sbcs	r6, r2
 8000ad2:	4333      	orrs	r3, r6
 8000ad4:	e0da      	b.n	8000c8c <__aeabi_dsub+0x3b4>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dsub+0x204>
 8000ada:	e214      	b.n	8000f06 <__aeabi_dsub+0x62e>
 8000adc:	4663      	mov	r3, ip
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dsub+0x20c>
 8000ae2:	e168      	b.n	8000db6 <__aeabi_dsub+0x4de>
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	074e      	lsls	r6, r1, #29
 8000ae8:	08c0      	lsrs	r0, r0, #3
 8000aea:	08c9      	lsrs	r1, r1, #3
 8000aec:	031b      	lsls	r3, r3, #12
 8000aee:	4306      	orrs	r6, r0
 8000af0:	4219      	tst	r1, r3
 8000af2:	d008      	beq.n	8000b06 <__aeabi_dsub+0x22e>
 8000af4:	4660      	mov	r0, ip
 8000af6:	08c0      	lsrs	r0, r0, #3
 8000af8:	4218      	tst	r0, r3
 8000afa:	d104      	bne.n	8000b06 <__aeabi_dsub+0x22e>
 8000afc:	4663      	mov	r3, ip
 8000afe:	0001      	movs	r1, r0
 8000b00:	08d2      	lsrs	r2, r2, #3
 8000b02:	075e      	lsls	r6, r3, #29
 8000b04:	4316      	orrs	r6, r2
 8000b06:	00f3      	lsls	r3, r6, #3
 8000b08:	4699      	mov	r9, r3
 8000b0a:	00c9      	lsls	r1, r1, #3
 8000b0c:	0f72      	lsrs	r2, r6, #29
 8000b0e:	4d44      	ldr	r5, [pc, #272]	; (8000c20 <__aeabi_dsub+0x348>)
 8000b10:	4311      	orrs	r1, r2
 8000b12:	464b      	mov	r3, r9
 8000b14:	08de      	lsrs	r6, r3, #3
 8000b16:	4b42      	ldr	r3, [pc, #264]	; (8000c20 <__aeabi_dsub+0x348>)
 8000b18:	074f      	lsls	r7, r1, #29
 8000b1a:	4337      	orrs	r7, r6
 8000b1c:	08ca      	lsrs	r2, r1, #3
 8000b1e:	429d      	cmp	r5, r3
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dsub+0x24c>
 8000b22:	e06e      	b.n	8000c02 <__aeabi_dsub+0x32a>
 8000b24:	0312      	lsls	r2, r2, #12
 8000b26:	056d      	lsls	r5, r5, #21
 8000b28:	0b12      	lsrs	r2, r2, #12
 8000b2a:	0d6d      	lsrs	r5, r5, #21
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	0312      	lsls	r2, r2, #12
 8000b30:	0b13      	lsrs	r3, r2, #12
 8000b32:	0d0a      	lsrs	r2, r1, #20
 8000b34:	0512      	lsls	r2, r2, #20
 8000b36:	431a      	orrs	r2, r3
 8000b38:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <__aeabi_dsub+0x350>)
 8000b3a:	052d      	lsls	r5, r5, #20
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	432b      	orrs	r3, r5
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	07e4      	lsls	r4, r4, #31
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	4323      	orrs	r3, r4
 8000b48:	0038      	movs	r0, r7
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	bc3c      	pop	{r2, r3, r4, r5}
 8000b4e:	4690      	mov	r8, r2
 8000b50:	4699      	mov	r9, r3
 8000b52:	46a2      	mov	sl, r4
 8000b54:	46ab      	mov	fp, r5
 8000b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b58:	4663      	mov	r3, ip
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	d011      	beq.n	8000b82 <__aeabi_dsub+0x2aa>
 8000b5e:	1e73      	subs	r3, r6, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d000      	beq.n	8000b66 <__aeabi_dsub+0x28e>
 8000b64:	e107      	b.n	8000d76 <__aeabi_dsub+0x49e>
 8000b66:	1886      	adds	r6, r0, r2
 8000b68:	4286      	cmp	r6, r0
 8000b6a:	4180      	sbcs	r0, r0
 8000b6c:	4461      	add	r1, ip
 8000b6e:	4240      	negs	r0, r0
 8000b70:	1809      	adds	r1, r1, r0
 8000b72:	2501      	movs	r5, #1
 8000b74:	020b      	lsls	r3, r1, #8
 8000b76:	d537      	bpl.n	8000be8 <__aeabi_dsub+0x310>
 8000b78:	2502      	movs	r5, #2
 8000b7a:	e77b      	b.n	8000a74 <__aeabi_dsub+0x19c>
 8000b7c:	003e      	movs	r6, r7
 8000b7e:	4661      	mov	r1, ip
 8000b80:	4691      	mov	r9, r2
 8000b82:	0035      	movs	r5, r6
 8000b84:	e7c5      	b.n	8000b12 <__aeabi_dsub+0x23a>
 8000b86:	465c      	mov	r4, fp
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dsub+0x2b6>
 8000b8c:	e0e1      	b.n	8000d52 <__aeabi_dsub+0x47a>
 8000b8e:	000b      	movs	r3, r1
 8000b90:	4303      	orrs	r3, r0
 8000b92:	d0f3      	beq.n	8000b7c <__aeabi_dsub+0x2a4>
 8000b94:	1c73      	adds	r3, r6, #1
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dsub+0x2c2>
 8000b98:	e1ac      	b.n	8000ef4 <__aeabi_dsub+0x61c>
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <__aeabi_dsub+0x348>)
 8000b9c:	429f      	cmp	r7, r3
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dsub+0x2ca>
 8000ba0:	e13a      	b.n	8000e18 <__aeabi_dsub+0x540>
 8000ba2:	43f3      	mvns	r3, r6
 8000ba4:	2b38      	cmp	r3, #56	; 0x38
 8000ba6:	dd00      	ble.n	8000baa <__aeabi_dsub+0x2d2>
 8000ba8:	e16f      	b.n	8000e8a <__aeabi_dsub+0x5b2>
 8000baa:	2b1f      	cmp	r3, #31
 8000bac:	dd00      	ble.n	8000bb0 <__aeabi_dsub+0x2d8>
 8000bae:	e18c      	b.n	8000eca <__aeabi_dsub+0x5f2>
 8000bb0:	2520      	movs	r5, #32
 8000bb2:	000e      	movs	r6, r1
 8000bb4:	1aed      	subs	r5, r5, r3
 8000bb6:	40ae      	lsls	r6, r5
 8000bb8:	46b0      	mov	r8, r6
 8000bba:	0006      	movs	r6, r0
 8000bbc:	46aa      	mov	sl, r5
 8000bbe:	40de      	lsrs	r6, r3
 8000bc0:	4645      	mov	r5, r8
 8000bc2:	4335      	orrs	r5, r6
 8000bc4:	002e      	movs	r6, r5
 8000bc6:	4655      	mov	r5, sl
 8000bc8:	40d9      	lsrs	r1, r3
 8000bca:	40a8      	lsls	r0, r5
 8000bcc:	4663      	mov	r3, ip
 8000bce:	1e45      	subs	r5, r0, #1
 8000bd0:	41a8      	sbcs	r0, r5
 8000bd2:	1a5b      	subs	r3, r3, r1
 8000bd4:	469c      	mov	ip, r3
 8000bd6:	4330      	orrs	r0, r6
 8000bd8:	1a16      	subs	r6, r2, r0
 8000bda:	42b2      	cmp	r2, r6
 8000bdc:	4192      	sbcs	r2, r2
 8000bde:	4663      	mov	r3, ip
 8000be0:	4252      	negs	r2, r2
 8000be2:	1a99      	subs	r1, r3, r2
 8000be4:	003d      	movs	r5, r7
 8000be6:	e6b4      	b.n	8000952 <__aeabi_dsub+0x7a>
 8000be8:	2207      	movs	r2, #7
 8000bea:	4032      	ands	r2, r6
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_dsub+0x31a>
 8000bf0:	e6e4      	b.n	80009bc <__aeabi_dsub+0xe4>
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <__aeabi_dsub+0x348>)
 8000bf4:	08f6      	lsrs	r6, r6, #3
 8000bf6:	074f      	lsls	r7, r1, #29
 8000bf8:	4337      	orrs	r7, r6
 8000bfa:	08ca      	lsrs	r2, r1, #3
 8000bfc:	429d      	cmp	r5, r3
 8000bfe:	d000      	beq.n	8000c02 <__aeabi_dsub+0x32a>
 8000c00:	e790      	b.n	8000b24 <__aeabi_dsub+0x24c>
 8000c02:	003b      	movs	r3, r7
 8000c04:	4313      	orrs	r3, r2
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dsub+0x332>
 8000c08:	e1a6      	b.n	8000f58 <__aeabi_dsub+0x680>
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	031b      	lsls	r3, r3, #12
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	0312      	lsls	r2, r2, #12
 8000c12:	0b12      	lsrs	r2, r2, #12
 8000c14:	4d02      	ldr	r5, [pc, #8]	; (8000c20 <__aeabi_dsub+0x348>)
 8000c16:	e789      	b.n	8000b2c <__aeabi_dsub+0x254>
 8000c18:	0015      	movs	r5, r2
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	e785      	b.n	8000b2c <__aeabi_dsub+0x254>
 8000c20:	000007ff 	.word	0x000007ff
 8000c24:	ff7fffff 	.word	0xff7fffff
 8000c28:	800fffff 	.word	0x800fffff
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_dsub+0x35a>
 8000c30:	e0c7      	b.n	8000dc2 <__aeabi_dsub+0x4ea>
 8000c32:	1c6b      	adds	r3, r5, #1
 8000c34:	055e      	lsls	r6, r3, #21
 8000c36:	0d76      	lsrs	r6, r6, #21
 8000c38:	2e01      	cmp	r6, #1
 8000c3a:	dc00      	bgt.n	8000c3e <__aeabi_dsub+0x366>
 8000c3c:	e0f0      	b.n	8000e20 <__aeabi_dsub+0x548>
 8000c3e:	4dc8      	ldr	r5, [pc, #800]	; (8000f60 <__aeabi_dsub+0x688>)
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dsub+0x36e>
 8000c44:	e0b9      	b.n	8000dba <__aeabi_dsub+0x4e2>
 8000c46:	1885      	adds	r5, r0, r2
 8000c48:	000a      	movs	r2, r1
 8000c4a:	4285      	cmp	r5, r0
 8000c4c:	4189      	sbcs	r1, r1
 8000c4e:	4462      	add	r2, ip
 8000c50:	4249      	negs	r1, r1
 8000c52:	1851      	adds	r1, r2, r1
 8000c54:	2207      	movs	r2, #7
 8000c56:	07ce      	lsls	r6, r1, #31
 8000c58:	086d      	lsrs	r5, r5, #1
 8000c5a:	432e      	orrs	r6, r5
 8000c5c:	0849      	lsrs	r1, r1, #1
 8000c5e:	4032      	ands	r2, r6
 8000c60:	001d      	movs	r5, r3
 8000c62:	e6a9      	b.n	80009b8 <__aeabi_dsub+0xe0>
 8000c64:	49bf      	ldr	r1, [pc, #764]	; (8000f64 <__aeabi_dsub+0x68c>)
 8000c66:	1aed      	subs	r5, r5, r3
 8000c68:	4011      	ands	r1, r2
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	4032      	ands	r2, r6
 8000c6e:	e6a3      	b.n	80009b8 <__aeabi_dsub+0xe0>
 8000c70:	0032      	movs	r2, r6
 8000c72:	3828      	subs	r0, #40	; 0x28
 8000c74:	4082      	lsls	r2, r0
 8000c76:	2600      	movs	r6, #0
 8000c78:	e686      	b.n	8000988 <__aeabi_dsub+0xb0>
 8000c7a:	0030      	movs	r0, r6
 8000c7c:	f000 f9dc 	bl	8001038 <__clzsi2>
 8000c80:	3020      	adds	r0, #32
 8000c82:	e673      	b.n	800096c <__aeabi_dsub+0x94>
 8000c84:	4663      	mov	r3, ip
 8000c86:	4313      	orrs	r3, r2
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	4193      	sbcs	r3, r2
 8000c8c:	1ac6      	subs	r6, r0, r3
 8000c8e:	42b0      	cmp	r0, r6
 8000c90:	4180      	sbcs	r0, r0
 8000c92:	4240      	negs	r0, r0
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	e65c      	b.n	8000952 <__aeabi_dsub+0x7a>
 8000c98:	000e      	movs	r6, r1
 8000c9a:	4667      	mov	r7, ip
 8000c9c:	4306      	orrs	r6, r0
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	2d00      	cmp	r5, #0
 8000ca2:	d15e      	bne.n	8000d62 <__aeabi_dsub+0x48a>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d000      	beq.n	8000caa <__aeabi_dsub+0x3d2>
 8000ca8:	e0f3      	b.n	8000e92 <__aeabi_dsub+0x5ba>
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dsub+0x3d8>
 8000cae:	e11e      	b.n	8000eee <__aeabi_dsub+0x616>
 8000cb0:	465c      	mov	r4, fp
 8000cb2:	4661      	mov	r1, ip
 8000cb4:	4691      	mov	r9, r2
 8000cb6:	e72c      	b.n	8000b12 <__aeabi_dsub+0x23a>
 8000cb8:	4fa9      	ldr	r7, [pc, #676]	; (8000f60 <__aeabi_dsub+0x688>)
 8000cba:	42be      	cmp	r6, r7
 8000cbc:	d07b      	beq.n	8000db6 <__aeabi_dsub+0x4de>
 8000cbe:	001e      	movs	r6, r3
 8000cc0:	e6f1      	b.n	8000aa6 <__aeabi_dsub+0x1ce>
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	3d1f      	subs	r5, #31
 8000cc6:	40e8      	lsrs	r0, r5
 8000cc8:	2b20      	cmp	r3, #32
 8000cca:	d003      	beq.n	8000cd4 <__aeabi_dsub+0x3fc>
 8000ccc:	2140      	movs	r1, #64	; 0x40
 8000cce:	1acb      	subs	r3, r1, r3
 8000cd0:	409a      	lsls	r2, r3
 8000cd2:	4316      	orrs	r6, r2
 8000cd4:	1e73      	subs	r3, r6, #1
 8000cd6:	419e      	sbcs	r6, r3
 8000cd8:	2207      	movs	r2, #7
 8000cda:	4306      	orrs	r6, r0
 8000cdc:	4032      	ands	r2, r6
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	e783      	b.n	8000bec <__aeabi_dsub+0x314>
 8000ce4:	1a16      	subs	r6, r2, r0
 8000ce6:	4663      	mov	r3, ip
 8000ce8:	42b2      	cmp	r2, r6
 8000cea:	4180      	sbcs	r0, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	4240      	negs	r0, r0
 8000cf0:	1a0b      	subs	r3, r1, r0
 8000cf2:	4698      	mov	r8, r3
 8000cf4:	465c      	mov	r4, fp
 8000cf6:	e632      	b.n	800095e <__aeabi_dsub+0x86>
 8000cf8:	2e1f      	cmp	r6, #31
 8000cfa:	dd00      	ble.n	8000cfe <__aeabi_dsub+0x426>
 8000cfc:	e0ab      	b.n	8000e56 <__aeabi_dsub+0x57e>
 8000cfe:	2720      	movs	r7, #32
 8000d00:	1bbb      	subs	r3, r7, r6
 8000d02:	469a      	mov	sl, r3
 8000d04:	4663      	mov	r3, ip
 8000d06:	4657      	mov	r7, sl
 8000d08:	40bb      	lsls	r3, r7
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	464f      	mov	r7, r9
 8000d10:	40f3      	lsrs	r3, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	003b      	movs	r3, r7
 8000d16:	4657      	mov	r7, sl
 8000d18:	40ba      	lsls	r2, r7
 8000d1a:	1e57      	subs	r7, r2, #1
 8000d1c:	41ba      	sbcs	r2, r7
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	4662      	mov	r2, ip
 8000d22:	40f2      	lsrs	r2, r6
 8000d24:	1889      	adds	r1, r1, r2
 8000d26:	e698      	b.n	8000a5a <__aeabi_dsub+0x182>
 8000d28:	2720      	movs	r7, #32
 8000d2a:	1bbb      	subs	r3, r7, r6
 8000d2c:	469a      	mov	sl, r3
 8000d2e:	4663      	mov	r3, ip
 8000d30:	4657      	mov	r7, sl
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	4699      	mov	r9, r3
 8000d36:	0013      	movs	r3, r2
 8000d38:	464f      	mov	r7, r9
 8000d3a:	40f3      	lsrs	r3, r6
 8000d3c:	431f      	orrs	r7, r3
 8000d3e:	003b      	movs	r3, r7
 8000d40:	4657      	mov	r7, sl
 8000d42:	40ba      	lsls	r2, r7
 8000d44:	1e57      	subs	r7, r2, #1
 8000d46:	41ba      	sbcs	r2, r7
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	4662      	mov	r2, ip
 8000d4c:	40f2      	lsrs	r2, r6
 8000d4e:	1a89      	subs	r1, r1, r2
 8000d50:	e79c      	b.n	8000c8c <__aeabi_dsub+0x3b4>
 8000d52:	4b83      	ldr	r3, [pc, #524]	; (8000f60 <__aeabi_dsub+0x688>)
 8000d54:	429f      	cmp	r7, r3
 8000d56:	d05f      	beq.n	8000e18 <__aeabi_dsub+0x540>
 8000d58:	2580      	movs	r5, #128	; 0x80
 8000d5a:	042d      	lsls	r5, r5, #16
 8000d5c:	4273      	negs	r3, r6
 8000d5e:	4329      	orrs	r1, r5
 8000d60:	e720      	b.n	8000ba4 <__aeabi_dsub+0x2cc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d10c      	bne.n	8000d80 <__aeabi_dsub+0x4a8>
 8000d66:	2f00      	cmp	r7, #0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_dsub+0x494>
 8000d6a:	e0d0      	b.n	8000f0e <__aeabi_dsub+0x636>
 8000d6c:	465c      	mov	r4, fp
 8000d6e:	4661      	mov	r1, ip
 8000d70:	4691      	mov	r9, r2
 8000d72:	4d7b      	ldr	r5, [pc, #492]	; (8000f60 <__aeabi_dsub+0x688>)
 8000d74:	e6cd      	b.n	8000b12 <__aeabi_dsub+0x23a>
 8000d76:	4f7a      	ldr	r7, [pc, #488]	; (8000f60 <__aeabi_dsub+0x688>)
 8000d78:	42be      	cmp	r6, r7
 8000d7a:	d01c      	beq.n	8000db6 <__aeabi_dsub+0x4de>
 8000d7c:	001e      	movs	r6, r3
 8000d7e:	e665      	b.n	8000a4c <__aeabi_dsub+0x174>
 8000d80:	2f00      	cmp	r7, #0
 8000d82:	d018      	beq.n	8000db6 <__aeabi_dsub+0x4de>
 8000d84:	08c0      	lsrs	r0, r0, #3
 8000d86:	074e      	lsls	r6, r1, #29
 8000d88:	4306      	orrs	r6, r0
 8000d8a:	2080      	movs	r0, #128	; 0x80
 8000d8c:	08c9      	lsrs	r1, r1, #3
 8000d8e:	0300      	lsls	r0, r0, #12
 8000d90:	4201      	tst	r1, r0
 8000d92:	d008      	beq.n	8000da6 <__aeabi_dsub+0x4ce>
 8000d94:	4663      	mov	r3, ip
 8000d96:	08dc      	lsrs	r4, r3, #3
 8000d98:	4204      	tst	r4, r0
 8000d9a:	d104      	bne.n	8000da6 <__aeabi_dsub+0x4ce>
 8000d9c:	0021      	movs	r1, r4
 8000d9e:	46da      	mov	sl, fp
 8000da0:	08d2      	lsrs	r2, r2, #3
 8000da2:	075e      	lsls	r6, r3, #29
 8000da4:	4316      	orrs	r6, r2
 8000da6:	00f3      	lsls	r3, r6, #3
 8000da8:	4699      	mov	r9, r3
 8000daa:	2401      	movs	r4, #1
 8000dac:	4653      	mov	r3, sl
 8000dae:	00c9      	lsls	r1, r1, #3
 8000db0:	0f72      	lsrs	r2, r6, #29
 8000db2:	4311      	orrs	r1, r2
 8000db4:	401c      	ands	r4, r3
 8000db6:	4d6a      	ldr	r5, [pc, #424]	; (8000f60 <__aeabi_dsub+0x688>)
 8000db8:	e6ab      	b.n	8000b12 <__aeabi_dsub+0x23a>
 8000dba:	001d      	movs	r5, r3
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2700      	movs	r7, #0
 8000dc0:	e6b4      	b.n	8000b2c <__aeabi_dsub+0x254>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d159      	bne.n	8000e7a <__aeabi_dsub+0x5a2>
 8000dc6:	000b      	movs	r3, r1
 8000dc8:	4303      	orrs	r3, r0
 8000dca:	d100      	bne.n	8000dce <__aeabi_dsub+0x4f6>
 8000dcc:	e6d6      	b.n	8000b7c <__aeabi_dsub+0x2a4>
 8000dce:	1c73      	adds	r3, r6, #1
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dsub+0x4fc>
 8000dd2:	e0b2      	b.n	8000f3a <__aeabi_dsub+0x662>
 8000dd4:	4b62      	ldr	r3, [pc, #392]	; (8000f60 <__aeabi_dsub+0x688>)
 8000dd6:	429f      	cmp	r7, r3
 8000dd8:	d01e      	beq.n	8000e18 <__aeabi_dsub+0x540>
 8000dda:	43f3      	mvns	r3, r6
 8000ddc:	2b38      	cmp	r3, #56	; 0x38
 8000dde:	dc6f      	bgt.n	8000ec0 <__aeabi_dsub+0x5e8>
 8000de0:	2b1f      	cmp	r3, #31
 8000de2:	dd00      	ble.n	8000de6 <__aeabi_dsub+0x50e>
 8000de4:	e097      	b.n	8000f16 <__aeabi_dsub+0x63e>
 8000de6:	2520      	movs	r5, #32
 8000de8:	000e      	movs	r6, r1
 8000dea:	1aed      	subs	r5, r5, r3
 8000dec:	40ae      	lsls	r6, r5
 8000dee:	46b0      	mov	r8, r6
 8000df0:	0006      	movs	r6, r0
 8000df2:	46aa      	mov	sl, r5
 8000df4:	40de      	lsrs	r6, r3
 8000df6:	4645      	mov	r5, r8
 8000df8:	4335      	orrs	r5, r6
 8000dfa:	002e      	movs	r6, r5
 8000dfc:	4655      	mov	r5, sl
 8000dfe:	40a8      	lsls	r0, r5
 8000e00:	40d9      	lsrs	r1, r3
 8000e02:	1e45      	subs	r5, r0, #1
 8000e04:	41a8      	sbcs	r0, r5
 8000e06:	448c      	add	ip, r1
 8000e08:	4306      	orrs	r6, r0
 8000e0a:	18b6      	adds	r6, r6, r2
 8000e0c:	4296      	cmp	r6, r2
 8000e0e:	4192      	sbcs	r2, r2
 8000e10:	4251      	negs	r1, r2
 8000e12:	4461      	add	r1, ip
 8000e14:	003d      	movs	r5, r7
 8000e16:	e625      	b.n	8000a64 <__aeabi_dsub+0x18c>
 8000e18:	003d      	movs	r5, r7
 8000e1a:	4661      	mov	r1, ip
 8000e1c:	4691      	mov	r9, r2
 8000e1e:	e678      	b.n	8000b12 <__aeabi_dsub+0x23a>
 8000e20:	000b      	movs	r3, r1
 8000e22:	4303      	orrs	r3, r0
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	d000      	beq.n	8000e2a <__aeabi_dsub+0x552>
 8000e28:	e655      	b.n	8000ad6 <__aeabi_dsub+0x1fe>
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f5      	beq.n	8000e1a <__aeabi_dsub+0x542>
 8000e2e:	4663      	mov	r3, ip
 8000e30:	4313      	orrs	r3, r2
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dsub+0x55e>
 8000e34:	e66d      	b.n	8000b12 <__aeabi_dsub+0x23a>
 8000e36:	1886      	adds	r6, r0, r2
 8000e38:	4286      	cmp	r6, r0
 8000e3a:	4180      	sbcs	r0, r0
 8000e3c:	4461      	add	r1, ip
 8000e3e:	4240      	negs	r0, r0
 8000e40:	1809      	adds	r1, r1, r0
 8000e42:	2200      	movs	r2, #0
 8000e44:	020b      	lsls	r3, r1, #8
 8000e46:	d400      	bmi.n	8000e4a <__aeabi_dsub+0x572>
 8000e48:	e6d0      	b.n	8000bec <__aeabi_dsub+0x314>
 8000e4a:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <__aeabi_dsub+0x68c>)
 8000e4c:	3501      	adds	r5, #1
 8000e4e:	4019      	ands	r1, r3
 8000e50:	e5b2      	b.n	80009b8 <__aeabi_dsub+0xe0>
 8000e52:	46b1      	mov	r9, r6
 8000e54:	e65d      	b.n	8000b12 <__aeabi_dsub+0x23a>
 8000e56:	0033      	movs	r3, r6
 8000e58:	4667      	mov	r7, ip
 8000e5a:	3b20      	subs	r3, #32
 8000e5c:	40df      	lsrs	r7, r3
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2e20      	cmp	r6, #32
 8000e62:	d005      	beq.n	8000e70 <__aeabi_dsub+0x598>
 8000e64:	2740      	movs	r7, #64	; 0x40
 8000e66:	1bbf      	subs	r7, r7, r6
 8000e68:	4666      	mov	r6, ip
 8000e6a:	40be      	lsls	r6, r7
 8000e6c:	4332      	orrs	r2, r6
 8000e6e:	4690      	mov	r8, r2
 8000e70:	4646      	mov	r6, r8
 8000e72:	1e72      	subs	r2, r6, #1
 8000e74:	4196      	sbcs	r6, r2
 8000e76:	4333      	orrs	r3, r6
 8000e78:	e5ef      	b.n	8000a5a <__aeabi_dsub+0x182>
 8000e7a:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <__aeabi_dsub+0x688>)
 8000e7c:	429f      	cmp	r7, r3
 8000e7e:	d0cb      	beq.n	8000e18 <__aeabi_dsub+0x540>
 8000e80:	2580      	movs	r5, #128	; 0x80
 8000e82:	042d      	lsls	r5, r5, #16
 8000e84:	4273      	negs	r3, r6
 8000e86:	4329      	orrs	r1, r5
 8000e88:	e7a8      	b.n	8000ddc <__aeabi_dsub+0x504>
 8000e8a:	4308      	orrs	r0, r1
 8000e8c:	1e41      	subs	r1, r0, #1
 8000e8e:	4188      	sbcs	r0, r1
 8000e90:	e6a2      	b.n	8000bd8 <__aeabi_dsub+0x300>
 8000e92:	2f00      	cmp	r7, #0
 8000e94:	d100      	bne.n	8000e98 <__aeabi_dsub+0x5c0>
 8000e96:	e63c      	b.n	8000b12 <__aeabi_dsub+0x23a>
 8000e98:	4663      	mov	r3, ip
 8000e9a:	1a86      	subs	r6, r0, r2
 8000e9c:	1acf      	subs	r7, r1, r3
 8000e9e:	42b0      	cmp	r0, r6
 8000ea0:	419b      	sbcs	r3, r3
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	1afb      	subs	r3, r7, r3
 8000ea6:	4698      	mov	r8, r3
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	d54e      	bpl.n	8000f4a <__aeabi_dsub+0x672>
 8000eac:	1a16      	subs	r6, r2, r0
 8000eae:	4663      	mov	r3, ip
 8000eb0:	42b2      	cmp	r2, r6
 8000eb2:	4192      	sbcs	r2, r2
 8000eb4:	1a59      	subs	r1, r3, r1
 8000eb6:	4252      	negs	r2, r2
 8000eb8:	1a89      	subs	r1, r1, r2
 8000eba:	465c      	mov	r4, fp
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e57b      	b.n	80009b8 <__aeabi_dsub+0xe0>
 8000ec0:	4301      	orrs	r1, r0
 8000ec2:	000e      	movs	r6, r1
 8000ec4:	1e71      	subs	r1, r6, #1
 8000ec6:	418e      	sbcs	r6, r1
 8000ec8:	e79f      	b.n	8000e0a <__aeabi_dsub+0x532>
 8000eca:	001d      	movs	r5, r3
 8000ecc:	000e      	movs	r6, r1
 8000ece:	3d20      	subs	r5, #32
 8000ed0:	40ee      	lsrs	r6, r5
 8000ed2:	46b0      	mov	r8, r6
 8000ed4:	2b20      	cmp	r3, #32
 8000ed6:	d004      	beq.n	8000ee2 <__aeabi_dsub+0x60a>
 8000ed8:	2540      	movs	r5, #64	; 0x40
 8000eda:	1aeb      	subs	r3, r5, r3
 8000edc:	4099      	lsls	r1, r3
 8000ede:	4308      	orrs	r0, r1
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	4648      	mov	r0, r9
 8000ee4:	4643      	mov	r3, r8
 8000ee6:	1e41      	subs	r1, r0, #1
 8000ee8:	4188      	sbcs	r0, r1
 8000eea:	4318      	orrs	r0, r3
 8000eec:	e674      	b.n	8000bd8 <__aeabi_dsub+0x300>
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	e617      	b.n	8000b24 <__aeabi_dsub+0x24c>
 8000ef4:	1a16      	subs	r6, r2, r0
 8000ef6:	4663      	mov	r3, ip
 8000ef8:	42b2      	cmp	r2, r6
 8000efa:	4192      	sbcs	r2, r2
 8000efc:	1a59      	subs	r1, r3, r1
 8000efe:	4252      	negs	r2, r2
 8000f00:	1a89      	subs	r1, r1, r2
 8000f02:	003d      	movs	r5, r7
 8000f04:	e525      	b.n	8000952 <__aeabi_dsub+0x7a>
 8000f06:	4661      	mov	r1, ip
 8000f08:	4691      	mov	r9, r2
 8000f0a:	4d15      	ldr	r5, [pc, #84]	; (8000f60 <__aeabi_dsub+0x688>)
 8000f0c:	e601      	b.n	8000b12 <__aeabi_dsub+0x23a>
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	2400      	movs	r4, #0
 8000f12:	0312      	lsls	r2, r2, #12
 8000f14:	e679      	b.n	8000c0a <__aeabi_dsub+0x332>
 8000f16:	001d      	movs	r5, r3
 8000f18:	000e      	movs	r6, r1
 8000f1a:	3d20      	subs	r5, #32
 8000f1c:	40ee      	lsrs	r6, r5
 8000f1e:	46b0      	mov	r8, r6
 8000f20:	2b20      	cmp	r3, #32
 8000f22:	d004      	beq.n	8000f2e <__aeabi_dsub+0x656>
 8000f24:	2540      	movs	r5, #64	; 0x40
 8000f26:	1aeb      	subs	r3, r5, r3
 8000f28:	4099      	lsls	r1, r3
 8000f2a:	4308      	orrs	r0, r1
 8000f2c:	4681      	mov	r9, r0
 8000f2e:	464e      	mov	r6, r9
 8000f30:	4643      	mov	r3, r8
 8000f32:	1e71      	subs	r1, r6, #1
 8000f34:	418e      	sbcs	r6, r1
 8000f36:	431e      	orrs	r6, r3
 8000f38:	e767      	b.n	8000e0a <__aeabi_dsub+0x532>
 8000f3a:	1886      	adds	r6, r0, r2
 8000f3c:	4296      	cmp	r6, r2
 8000f3e:	419b      	sbcs	r3, r3
 8000f40:	4461      	add	r1, ip
 8000f42:	425b      	negs	r3, r3
 8000f44:	18c9      	adds	r1, r1, r3
 8000f46:	003d      	movs	r5, r7
 8000f48:	e58c      	b.n	8000a64 <__aeabi_dsub+0x18c>
 8000f4a:	4647      	mov	r7, r8
 8000f4c:	4337      	orrs	r7, r6
 8000f4e:	d0ce      	beq.n	8000eee <__aeabi_dsub+0x616>
 8000f50:	2207      	movs	r2, #7
 8000f52:	4641      	mov	r1, r8
 8000f54:	4032      	ands	r2, r6
 8000f56:	e649      	b.n	8000bec <__aeabi_dsub+0x314>
 8000f58:	2700      	movs	r7, #0
 8000f5a:	003a      	movs	r2, r7
 8000f5c:	e5e6      	b.n	8000b2c <__aeabi_dsub+0x254>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	000007ff 	.word	0x000007ff
 8000f64:	ff7fffff 	.word	0xff7fffff

08000f68 <__aeabi_d2iz>:
 8000f68:	b530      	push	{r4, r5, lr}
 8000f6a:	4d14      	ldr	r5, [pc, #80]	; (8000fbc <__aeabi_d2iz+0x54>)
 8000f6c:	030a      	lsls	r2, r1, #12
 8000f6e:	004b      	lsls	r3, r1, #1
 8000f70:	0b12      	lsrs	r2, r2, #12
 8000f72:	0d5b      	lsrs	r3, r3, #21
 8000f74:	0fc9      	lsrs	r1, r1, #31
 8000f76:	2400      	movs	r4, #0
 8000f78:	42ab      	cmp	r3, r5
 8000f7a:	dd11      	ble.n	8000fa0 <__aeabi_d2iz+0x38>
 8000f7c:	4c10      	ldr	r4, [pc, #64]	; (8000fc0 <__aeabi_d2iz+0x58>)
 8000f7e:	42a3      	cmp	r3, r4
 8000f80:	dc10      	bgt.n	8000fa4 <__aeabi_d2iz+0x3c>
 8000f82:	2480      	movs	r4, #128	; 0x80
 8000f84:	0364      	lsls	r4, r4, #13
 8000f86:	4322      	orrs	r2, r4
 8000f88:	4c0e      	ldr	r4, [pc, #56]	; (8000fc4 <__aeabi_d2iz+0x5c>)
 8000f8a:	1ae4      	subs	r4, r4, r3
 8000f8c:	2c1f      	cmp	r4, #31
 8000f8e:	dd0c      	ble.n	8000faa <__aeabi_d2iz+0x42>
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <__aeabi_d2iz+0x60>)
 8000f92:	1ac3      	subs	r3, r0, r3
 8000f94:	40da      	lsrs	r2, r3
 8000f96:	0013      	movs	r3, r2
 8000f98:	425c      	negs	r4, r3
 8000f9a:	2900      	cmp	r1, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_d2iz+0x38>
 8000f9e:	001c      	movs	r4, r3
 8000fa0:	0020      	movs	r0, r4
 8000fa2:	bd30      	pop	{r4, r5, pc}
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <__aeabi_d2iz+0x64>)
 8000fa6:	18cc      	adds	r4, r1, r3
 8000fa8:	e7fa      	b.n	8000fa0 <__aeabi_d2iz+0x38>
 8000faa:	4d09      	ldr	r5, [pc, #36]	; (8000fd0 <__aeabi_d2iz+0x68>)
 8000fac:	40e0      	lsrs	r0, r4
 8000fae:	46ac      	mov	ip, r5
 8000fb0:	4463      	add	r3, ip
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	4303      	orrs	r3, r0
 8000fb8:	e7ee      	b.n	8000f98 <__aeabi_d2iz+0x30>
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	000003fe 	.word	0x000003fe
 8000fc0:	0000041d 	.word	0x0000041d
 8000fc4:	00000433 	.word	0x00000433
 8000fc8:	00000413 	.word	0x00000413
 8000fcc:	7fffffff 	.word	0x7fffffff
 8000fd0:	fffffbed 	.word	0xfffffbed

08000fd4 <__aeabi_ui2d>:
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	1e04      	subs	r4, r0, #0
 8000fd8:	d025      	beq.n	8001026 <__aeabi_ui2d+0x52>
 8000fda:	f000 f82d 	bl	8001038 <__clzsi2>
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <__aeabi_ui2d+0x5c>)
 8000fe0:	1a1b      	subs	r3, r3, r0
 8000fe2:	055b      	lsls	r3, r3, #21
 8000fe4:	0d5b      	lsrs	r3, r3, #21
 8000fe6:	280a      	cmp	r0, #10
 8000fe8:	dd12      	ble.n	8001010 <__aeabi_ui2d+0x3c>
 8000fea:	380b      	subs	r0, #11
 8000fec:	4084      	lsls	r4, r0
 8000fee:	2200      	movs	r2, #0
 8000ff0:	0324      	lsls	r4, r4, #12
 8000ff2:	0b24      	lsrs	r4, r4, #12
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	0010      	movs	r0, r2
 8000ff8:	0324      	lsls	r4, r4, #12
 8000ffa:	0d0a      	lsrs	r2, r1, #20
 8000ffc:	0b24      	lsrs	r4, r4, #12
 8000ffe:	0512      	lsls	r2, r2, #20
 8001000:	4322      	orrs	r2, r4
 8001002:	4c0c      	ldr	r4, [pc, #48]	; (8001034 <__aeabi_ui2d+0x60>)
 8001004:	051b      	lsls	r3, r3, #20
 8001006:	4022      	ands	r2, r4
 8001008:	4313      	orrs	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	0859      	lsrs	r1, r3, #1
 800100e:	bd10      	pop	{r4, pc}
 8001010:	0002      	movs	r2, r0
 8001012:	0021      	movs	r1, r4
 8001014:	3215      	adds	r2, #21
 8001016:	4091      	lsls	r1, r2
 8001018:	000a      	movs	r2, r1
 800101a:	210b      	movs	r1, #11
 800101c:	1a08      	subs	r0, r1, r0
 800101e:	40c4      	lsrs	r4, r0
 8001020:	0324      	lsls	r4, r4, #12
 8001022:	0b24      	lsrs	r4, r4, #12
 8001024:	e7e6      	b.n	8000ff4 <__aeabi_ui2d+0x20>
 8001026:	2300      	movs	r3, #0
 8001028:	2400      	movs	r4, #0
 800102a:	2200      	movs	r2, #0
 800102c:	e7e2      	b.n	8000ff4 <__aeabi_ui2d+0x20>
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	0000041e 	.word	0x0000041e
 8001034:	800fffff 	.word	0x800fffff

08001038 <__clzsi2>:
 8001038:	211c      	movs	r1, #28
 800103a:	2301      	movs	r3, #1
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	4298      	cmp	r0, r3
 8001040:	d301      	bcc.n	8001046 <__clzsi2+0xe>
 8001042:	0c00      	lsrs	r0, r0, #16
 8001044:	3910      	subs	r1, #16
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	4298      	cmp	r0, r3
 800104a:	d301      	bcc.n	8001050 <__clzsi2+0x18>
 800104c:	0a00      	lsrs	r0, r0, #8
 800104e:	3908      	subs	r1, #8
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	4298      	cmp	r0, r3
 8001054:	d301      	bcc.n	800105a <__clzsi2+0x22>
 8001056:	0900      	lsrs	r0, r0, #4
 8001058:	3904      	subs	r1, #4
 800105a:	a202      	add	r2, pc, #8	; (adr r2, 8001064 <__clzsi2+0x2c>)
 800105c:	5c10      	ldrb	r0, [r2, r0]
 800105e:	1840      	adds	r0, r0, r1
 8001060:	4770      	bx	lr
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	02020304 	.word	0x02020304
 8001068:	01010101 	.word	0x01010101
	...

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f000 ff46 	bl	8001f08 <HAL_Init>

  /* USER CODE BEGIN Init */
  ADC_val = 0;
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <main+0x9c>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
  LEDsRunning = 0;
 8001082:	4b24      	ldr	r3, [pc, #144]	; (8001114 <main+0xa0>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
  enableLEDs = 0;
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <main+0xa4>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
  prevSpeed = 0;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <main+0xa8>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
  prevForwardBackward = 3;
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <main+0xac>)
 8001096:	2203      	movs	r2, #3
 8001098:	601a      	str	r2, [r3, #0]
  ledPulseWidth = 0;
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <main+0xb0>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a0:	f000 f84c 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a4:	f000 fa90 	bl	80015c8 <MX_GPIO_Init>
  MX_TIM3_Init();
 80010a8:	f000 f92a 	bl	8001300 <MX_TIM3_Init>
  MX_TIM2_Init();
 80010ac:	f000 f8a8 	bl	8001200 <MX_TIM2_Init>
  MX_TIM15_Init();
 80010b0:	f000 f9c4 	bl	800143c <MX_TIM15_Init>
  MX_USART1_UART_Init();
 80010b4:	f000 fa58 	bl	8001568 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //START TIMERS
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <main+0xb4>)
 80010ba:	210c      	movs	r1, #12
 80010bc:	0018      	movs	r0, r3
 80010be:	f001 ffff 	bl	80030c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <main+0xb8>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	0018      	movs	r0, r3
 80010c8:	f001 fffa 	bl	80030c0 <HAL_TIM_PWM_Start>

  //Enable Timer Channels
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <main+0xbc>)
 80010ce:	2100      	movs	r1, #0
 80010d0:	0018      	movs	r0, r3
 80010d2:	f001 fff5 	bl	80030c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <main+0xbc>)
 80010d8:	2104      	movs	r1, #4
 80010da:	0018      	movs	r0, r3
 80010dc:	f001 fff0 	bl	80030c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <main+0xbc>)
 80010e2:	2108      	movs	r1, #8
 80010e4:	0018      	movs	r0, r3
 80010e6:	f001 ffeb 	bl	80030c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <main+0xbc>)
 80010ec:	210c      	movs	r1, #12
 80010ee:	0018      	movs	r0, r3
 80010f0:	f001 ffe6 	bl	80030c0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Enabling the Receiver Interrupt for UART transmission
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <main+0xc0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <main+0xc0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2120      	movs	r1, #32
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DecodeData(rxbuffer);
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <main+0xc4>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	0018      	movs	r0, r3
 800110a:	f000 fae3 	bl	80016d4 <DecodeData>
 800110e:	e7f9      	b.n	8001104 <main+0x90>
 8001110:	20000134 	.word	0x20000134
 8001114:	20000028 	.word	0x20000028
 8001118:	2000002c 	.word	0x2000002c
 800111c:	20000070 	.word	0x20000070
 8001120:	20000138 	.word	0x20000138
 8001124:	2000017c 	.word	0x2000017c
 8001128:	2000013c 	.word	0x2000013c
 800112c:	20000030 	.word	0x20000030
 8001130:	20000074 	.word	0x20000074
 8001134:	200000b4 	.word	0x200000b4
 8001138:	20000180 	.word	0x20000180

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b097      	sub	sp, #92	; 0x5c
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	2428      	movs	r4, #40	; 0x28
 8001144:	193b      	adds	r3, r7, r4
 8001146:	0018      	movs	r0, r3
 8001148:	2330      	movs	r3, #48	; 0x30
 800114a:	001a      	movs	r2, r3
 800114c:	2100      	movs	r1, #0
 800114e:	f003 fb63 	bl	8004818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001152:	2318      	movs	r3, #24
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	0018      	movs	r0, r3
 8001158:	2310      	movs	r3, #16
 800115a:	001a      	movs	r2, r3
 800115c:	2100      	movs	r1, #0
 800115e:	f003 fb5b 	bl	8004818 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	0018      	movs	r0, r3
 8001166:	2314      	movs	r3, #20
 8001168:	001a      	movs	r2, r3
 800116a:	2100      	movs	r1, #0
 800116c:	f003 fb54 	bl	8004818 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001170:	0021      	movs	r1, r4
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2202      	movs	r2, #2
 8001176:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2201      	movs	r2, #1
 800117c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2210      	movs	r2, #16
 8001182:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2202      	movs	r2, #2
 8001188:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	22a0      	movs	r2, #160	; 0xa0
 8001194:	0392      	lsls	r2, r2, #14
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2200      	movs	r2, #0
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	0018      	movs	r0, r3
 80011a2:	f001 f9e9 	bl	8002578 <HAL_RCC_OscConfig>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011aa:	f000 fcb9 	bl	8001b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	2118      	movs	r1, #24
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2207      	movs	r2, #7
 80011b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2202      	movs	r2, #2
 80011ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2101      	movs	r1, #1
 80011cc:	0018      	movs	r0, r3
 80011ce:	f001 fcef 	bl	8002bb0 <HAL_RCC_ClockConfig>
 80011d2:	1e03      	subs	r3, r0, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011d6:	f000 fca3 	bl	8001b20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	0018      	movs	r0, r3
 80011ea:	f001 fe33 	bl	8002e54 <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	1e03      	subs	r3, r0, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011f2:	f000 fc95 	bl	8001b20 <Error_Handler>
  }
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b017      	add	sp, #92	; 0x5c
 80011fc:	bd90      	pop	{r4, r7, pc}
	...

08001200 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	2328      	movs	r3, #40	; 0x28
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	0018      	movs	r0, r3
 800120c:	2310      	movs	r3, #16
 800120e:	001a      	movs	r2, r3
 8001210:	2100      	movs	r1, #0
 8001212:	f003 fb01 	bl	8004818 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001216:	2320      	movs	r3, #32
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	0018      	movs	r0, r3
 800121c:	2308      	movs	r3, #8
 800121e:	001a      	movs	r2, r3
 8001220:	2100      	movs	r1, #0
 8001222:	f003 faf9 	bl	8004818 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	0018      	movs	r0, r3
 800122a:	231c      	movs	r3, #28
 800122c:	001a      	movs	r2, r3
 800122e:	2100      	movs	r1, #0
 8001230:	f003 faf2 	bl	8004818 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MX_TIM2_Init+0xf8>)
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	05d2      	lsls	r2, r2, #23
 800123a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <MX_TIM2_Init+0xf8>)
 800123e:	225f      	movs	r2, #95	; 0x5f
 8001240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_TIM2_Init+0xf8>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <MX_TIM2_Init+0xf8>)
 800124a:	4a2c      	ldr	r2, [pc, #176]	; (80012fc <MX_TIM2_Init+0xfc>)
 800124c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <MX_TIM2_Init+0xf8>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_TIM2_Init+0xf8>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <MX_TIM2_Init+0xf8>)
 800125c:	0018      	movs	r0, r3
 800125e:	f001 fed7 	bl	8003010 <HAL_TIM_Base_Init>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001266:	f000 fc5b 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	2128      	movs	r1, #40	; 0x28
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	0152      	lsls	r2, r2, #5
 8001272:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001274:	187a      	adds	r2, r7, r1
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <MX_TIM2_Init+0xf8>)
 8001278:	0011      	movs	r1, r2
 800127a:	0018      	movs	r0, r3
 800127c:	f002 f824 	bl	80032c8 <HAL_TIM_ConfigClockSource>
 8001280:	1e03      	subs	r3, r0, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001284:	f000 fc4c 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_TIM2_Init+0xf8>)
 800128a:	0018      	movs	r0, r3
 800128c:	f001 feec 	bl	8003068 <HAL_TIM_PWM_Init>
 8001290:	1e03      	subs	r3, r0, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001294:	f000 fc44 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2120      	movs	r1, #32
 800129a:	187b      	adds	r3, r7, r1
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a6:	187a      	adds	r2, r7, r1
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_TIM2_Init+0xf8>)
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f002 fc03 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80012b6:	f000 fc33 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2260      	movs	r2, #96	; 0x60
 80012be:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d2:	1d39      	adds	r1, r7, #4
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_TIM2_Init+0xf8>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	0018      	movs	r0, r3
 80012da:	f001 ff3d 	bl	8003158 <HAL_TIM_PWM_ConfigChannel>
 80012de:	1e03      	subs	r3, r0, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80012e2:	f000 fc1d 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <MX_TIM2_Init+0xf8>)
 80012e8:	0018      	movs	r0, r3
 80012ea:	f000 fc93 	bl	8001c14 <HAL_TIM_MspPostInit>

}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b00e      	add	sp, #56	; 0x38
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	2000013c 	.word	0x2000013c
 80012fc:	0000270f 	.word	0x0000270f

08001300 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08e      	sub	sp, #56	; 0x38
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	2328      	movs	r3, #40	; 0x28
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	0018      	movs	r0, r3
 800130c:	2310      	movs	r3, #16
 800130e:	001a      	movs	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	f003 fa81 	bl	8004818 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001316:	2320      	movs	r3, #32
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	0018      	movs	r0, r3
 800131c:	2308      	movs	r3, #8
 800131e:	001a      	movs	r2, r3
 8001320:	2100      	movs	r1, #0
 8001322:	f003 fa79 	bl	8004818 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	0018      	movs	r0, r3
 800132a:	231c      	movs	r3, #28
 800132c:	001a      	movs	r2, r3
 800132e:	2100      	movs	r1, #0
 8001330:	f003 fa72 	bl	8004818 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001334:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <MX_TIM3_Init+0x130>)
 8001336:	4a3f      	ldr	r2, [pc, #252]	; (8001434 <MX_TIM3_Init+0x134>)
 8001338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800133a:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <MX_TIM3_Init+0x130>)
 800133c:	4a3e      	ldr	r2, [pc, #248]	; (8001438 <MX_TIM3_Init+0x138>)
 800133e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <MX_TIM3_Init+0x130>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8001346:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <MX_TIM3_Init+0x130>)
 8001348:	2231      	movs	r2, #49	; 0x31
 800134a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <MX_TIM3_Init+0x130>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b37      	ldr	r3, [pc, #220]	; (8001430 <MX_TIM3_Init+0x130>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <MX_TIM3_Init+0x130>)
 800135a:	0018      	movs	r0, r3
 800135c:	f001 fe58 	bl	8003010 <HAL_TIM_Base_Init>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001364:	f000 fbdc 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	2128      	movs	r1, #40	; 0x28
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	0152      	lsls	r2, r2, #5
 8001370:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001372:	187a      	adds	r2, r7, r1
 8001374:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <MX_TIM3_Init+0x130>)
 8001376:	0011      	movs	r1, r2
 8001378:	0018      	movs	r0, r3
 800137a:	f001 ffa5 	bl	80032c8 <HAL_TIM_ConfigClockSource>
 800137e:	1e03      	subs	r3, r0, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001382:	f000 fbcd 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <MX_TIM3_Init+0x130>)
 8001388:	0018      	movs	r0, r3
 800138a:	f001 fe6d 	bl	8003068 <HAL_TIM_PWM_Init>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001392:	f000 fbc5 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001396:	2120      	movs	r1, #32
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a4:	187a      	adds	r2, r7, r1
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <MX_TIM3_Init+0x130>)
 80013a8:	0011      	movs	r1, r2
 80013aa:	0018      	movs	r0, r3
 80013ac:	f002 fb84 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80013b0:	1e03      	subs	r3, r0, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80013b4:	f000 fbb4 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2260      	movs	r2, #96	; 0x60
 80013bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d0:	1d39      	adds	r1, r7, #4
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_TIM3_Init+0x130>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	0018      	movs	r0, r3
 80013d8:	f001 febe 	bl	8003158 <HAL_TIM_PWM_ConfigChannel>
 80013dc:	1e03      	subs	r3, r0, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80013e0:	f000 fb9e 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e4:	1d39      	adds	r1, r7, #4
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_TIM3_Init+0x130>)
 80013e8:	2204      	movs	r2, #4
 80013ea:	0018      	movs	r0, r3
 80013ec:	f001 feb4 	bl	8003158 <HAL_TIM_PWM_ConfigChannel>
 80013f0:	1e03      	subs	r3, r0, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80013f4:	f000 fb94 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f8:	1d39      	adds	r1, r7, #4
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <MX_TIM3_Init+0x130>)
 80013fc:	2208      	movs	r2, #8
 80013fe:	0018      	movs	r0, r3
 8001400:	f001 feaa 	bl	8003158 <HAL_TIM_PWM_ConfigChannel>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d001      	beq.n	800140c <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8001408:	f000 fb8a 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800140c:	1d39      	adds	r1, r7, #4
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_TIM3_Init+0x130>)
 8001410:	220c      	movs	r2, #12
 8001412:	0018      	movs	r0, r3
 8001414:	f001 fea0 	bl	8003158 <HAL_TIM_PWM_ConfigChannel>
 8001418:	1e03      	subs	r3, r0, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 800141c:	f000 fb80 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <MX_TIM3_Init+0x130>)
 8001422:	0018      	movs	r0, r3
 8001424:	f000 fbf6 	bl	8001c14 <HAL_TIM_MspPostInit>

}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b00e      	add	sp, #56	; 0x38
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000074 	.word	0x20000074
 8001434:	40000400 	.word	0x40000400
 8001438:	000003e7 	.word	0x000003e7

0800143c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b092      	sub	sp, #72	; 0x48
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001442:	2340      	movs	r3, #64	; 0x40
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	0018      	movs	r0, r3
 8001448:	2308      	movs	r3, #8
 800144a:	001a      	movs	r2, r3
 800144c:	2100      	movs	r1, #0
 800144e:	f003 f9e3 	bl	8004818 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001452:	2324      	movs	r3, #36	; 0x24
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	0018      	movs	r0, r3
 8001458:	231c      	movs	r3, #28
 800145a:	001a      	movs	r2, r3
 800145c:	2100      	movs	r1, #0
 800145e:	f003 f9db 	bl	8004818 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	0018      	movs	r0, r3
 8001466:	2320      	movs	r3, #32
 8001468:	001a      	movs	r2, r3
 800146a:	2100      	movs	r1, #0
 800146c:	f003 f9d4 	bl	8004818 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001470:	4b3a      	ldr	r3, [pc, #232]	; (800155c <MX_TIM15_Init+0x120>)
 8001472:	4a3b      	ldr	r2, [pc, #236]	; (8001560 <MX_TIM15_Init+0x124>)
 8001474:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 95;
 8001476:	4b39      	ldr	r3, [pc, #228]	; (800155c <MX_TIM15_Init+0x120>)
 8001478:	225f      	movs	r2, #95	; 0x5f
 800147a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <MX_TIM15_Init+0x120>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 8001482:	4b36      	ldr	r3, [pc, #216]	; (800155c <MX_TIM15_Init+0x120>)
 8001484:	4a37      	ldr	r2, [pc, #220]	; (8001564 <MX_TIM15_Init+0x128>)
 8001486:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <MX_TIM15_Init+0x120>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800148e:	4b33      	ldr	r3, [pc, #204]	; (800155c <MX_TIM15_Init+0x120>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b31      	ldr	r3, [pc, #196]	; (800155c <MX_TIM15_Init+0x120>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800149a:	4b30      	ldr	r3, [pc, #192]	; (800155c <MX_TIM15_Init+0x120>)
 800149c:	0018      	movs	r0, r3
 800149e:	f001 fde3 	bl	8003068 <HAL_TIM_PWM_Init>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f000 fb3b 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2140      	movs	r1, #64	; 0x40
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80014b8:	187a      	adds	r2, r7, r1
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <MX_TIM15_Init+0x120>)
 80014bc:	0011      	movs	r1, r2
 80014be:	0018      	movs	r0, r3
 80014c0:	f002 fafa 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80014c4:	1e03      	subs	r3, r0, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80014c8:	f000 fb2a 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014cc:	2124      	movs	r1, #36	; 0x24
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2260      	movs	r2, #96	; 0x60
 80014d2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f8:	1879      	adds	r1, r7, r1
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_TIM15_Init+0x120>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	0018      	movs	r0, r3
 8001500:	f001 fe2a 	bl	8003158 <HAL_TIM_PWM_ConfigChannel>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d001      	beq.n	800150c <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001508:	f000 fb0a 	bl	8001b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	0192      	lsls	r2, r2, #6
 8001530:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001538:	1d3a      	adds	r2, r7, #4
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_TIM15_Init+0x120>)
 800153c:	0011      	movs	r1, r2
 800153e:	0018      	movs	r0, r3
 8001540:	f002 fb18 	bl	8003b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d001      	beq.n	800154c <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 8001548:	f000 faea 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <MX_TIM15_Init+0x120>)
 800154e:	0018      	movs	r0, r3
 8001550:	f000 fb60 	bl	8001c14 <HAL_TIM_MspPostInit>

}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b012      	add	sp, #72	; 0x48
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000030 	.word	0x20000030
 8001560:	40014000 	.word	0x40014000
 8001564:	0000270f 	.word	0x0000270f

08001568 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_USART1_UART_Init+0x58>)
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <MX_USART1_UART_Init+0x5c>)
 8001570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_USART1_UART_Init+0x58>)
 8001574:	2296      	movs	r2, #150	; 0x96
 8001576:	0192      	lsls	r2, r2, #6
 8001578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_USART1_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_USART1_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_USART1_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_USART1_UART_Init+0x58>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_USART1_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_USART1_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_USART1_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_USART1_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <MX_USART1_UART_Init+0x58>)
 80015ac:	0018      	movs	r0, r3
 80015ae:	f002 fb3f 	bl	8003c30 <HAL_UART_Init>
 80015b2:	1e03      	subs	r3, r0, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015b6:	f000 fab3 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200000b4 	.word	0x200000b4
 80015c4:	40013800 	.word	0x40013800

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	240c      	movs	r4, #12
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	0018      	movs	r0, r3
 80015d4:	2314      	movs	r3, #20
 80015d6:	001a      	movs	r2, r3
 80015d8:	2100      	movs	r1, #0
 80015da:	f003 f91d 	bl	8004818 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015e4:	2180      	movs	r1, #128	; 0x80
 80015e6:	0289      	lsls	r1, r1, #10
 80015e8:	430a      	orrs	r2, r1
 80015ea:	615a      	str	r2, [r3, #20]
 80015ec:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	029b      	lsls	r3, r3, #10
 80015f4:	4013      	ands	r3, r2
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <MX_GPIO_Init+0x100>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	02c9      	lsls	r1, r1, #11
 8001604:	430a      	orrs	r2, r1
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <MX_GPIO_Init+0x100>)
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	02db      	lsls	r3, r3, #11
 8001610:	4013      	ands	r3, r2
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <MX_GPIO_Init+0x100>)
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_GPIO_Init+0x100>)
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	0309      	lsls	r1, r1, #12
 8001620:	430a      	orrs	r2, r1
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_GPIO_Init+0x100>)
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	031b      	lsls	r3, r3, #12
 800162c:	4013      	ands	r3, r2
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA_Pin|INB_Pin, GPIO_PIN_RESET);
 8001632:	2390      	movs	r3, #144	; 0x90
 8001634:	05db      	lsls	r3, r3, #23
 8001636:	2200      	movs	r2, #0
 8001638:	2130      	movs	r1, #48	; 0x30
 800163a:	0018      	movs	r0, r3
 800163c:	f000 ff7e 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001640:	23c0      	movs	r3, #192	; 0xc0
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4821      	ldr	r0, [pc, #132]	; (80016cc <MX_GPIO_Init+0x104>)
 8001646:	2200      	movs	r2, #0
 8001648:	0019      	movs	r1, r3
 800164a:	f000 ff77 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800164e:	193b      	adds	r3, r7, r4
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001654:	193b      	adds	r3, r7, r4
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <MX_GPIO_Init+0x108>)
 8001658:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	193b      	adds	r3, r7, r4
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001660:	193a      	adds	r2, r7, r4
 8001662:	2390      	movs	r3, #144	; 0x90
 8001664:	05db      	lsls	r3, r3, #23
 8001666:	0011      	movs	r1, r2
 8001668:	0018      	movs	r0, r3
 800166a:	f000 fdf7 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : INA_Pin INB_Pin */
  GPIO_InitStruct.Pin = INA_Pin|INB_Pin;
 800166e:	0021      	movs	r1, r4
 8001670:	187b      	adds	r3, r7, r1
 8001672:	2230      	movs	r2, #48	; 0x30
 8001674:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2201      	movs	r2, #1
 800167a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	187b      	adds	r3, r7, r1
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	000c      	movs	r4, r1
 800168a:	187a      	adds	r2, r7, r1
 800168c:	2390      	movs	r3, #144	; 0x90
 800168e:	05db      	lsls	r3, r3, #23
 8001690:	0011      	movs	r1, r2
 8001692:	0018      	movs	r0, r3
 8001694:	f000 fde2 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001698:	0021      	movs	r1, r4
 800169a:	187b      	adds	r3, r7, r1
 800169c:	22c0      	movs	r2, #192	; 0xc0
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	187b      	adds	r3, r7, r1
 80016a4:	2201      	movs	r2, #1
 80016a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <MX_GPIO_Init+0x104>)
 80016b8:	0019      	movs	r1, r3
 80016ba:	0010      	movs	r0, r2
 80016bc:	f000 fdce 	bl	800225c <HAL_GPIO_Init>

}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b009      	add	sp, #36	; 0x24
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	40021000 	.word	0x40021000
 80016cc:	48000800 	.word	0x48000800
 80016d0:	10110000 	.word	0x10110000

080016d4 <DecodeData>:
/* void DecodeData(uint8_t message)
 * Function takes in the received rxbuffer value and decodes it into the appropriate
 * mode, speed, and direction bits. If the remote is in calibration mode, then motors are disabled
 * and LEDs are enabled. Else, motors are enabled and appropriate speed translations into
 * PWM are performed.*/
void DecodeData(uint8_t message) {
 80016d4:	b5b0      	push	{r4, r5, r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	0002      	movs	r2, r0
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	701a      	strb	r2, [r3, #0]
	uint8_t mode = message >> 7; //Get bit-7
 80016e0:	200f      	movs	r0, #15
 80016e2:	183b      	adds	r3, r7, r0
 80016e4:	1dfa      	adds	r2, r7, #7
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	09d2      	lsrs	r2, r2, #7
 80016ea:	701a      	strb	r2, [r3, #0]
	uint8_t direction = (message >> 5) & 0x3; // Get bit-6 and bit-5
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	095b      	lsrs	r3, r3, #5
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	230e      	movs	r3, #14
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	2103      	movs	r1, #3
 80016fa:	400a      	ands	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
	uint8_t speed = message & 0x1F; //Get the bottom 5 bits (0 to 4)
 80016fe:	230d      	movs	r3, #13
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	1dfa      	adds	r2, r7, #7
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	211f      	movs	r1, #31
 8001708:	400a      	ands	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]

	//Check for Calibration Mode (mode is 0 if calibration)
	if (mode == 0) {
 800170c:	183b      	adds	r3, r7, r0
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10e      	bne.n	8001732 <DecodeData+0x5e>
		enableLEDs = 1;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <DecodeData+0xa4>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]
		speed_conversion(0, direction); //Don't run the DC Motors
 800171a:	230e      	movs	r3, #14
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	0019      	movs	r1, r3
 8001722:	2000      	movs	r0, #0
 8001724:	f000 f922 	bl	800196c <speed_conversion>
		angle_conversion(0, 0); //Don't turn the Servo Motor
 8001728:	2100      	movs	r1, #0
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f8f4 	bl	8001918 <angle_conversion>
 8001730:	e014      	b.n	800175c <DecodeData+0x88>
	} else {
		enableLEDs = 0;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <DecodeData+0xa4>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
		speed_conversion(speed, direction);
 8001738:	240e      	movs	r4, #14
 800173a:	193b      	adds	r3, r7, r4
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	250d      	movs	r5, #13
 8001740:	197b      	adds	r3, r7, r5
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	0011      	movs	r1, r2
 8001746:	0018      	movs	r0, r3
 8001748:	f000 f910 	bl	800196c <speed_conversion>
		angle_conversion(speed, direction);
 800174c:	193b      	adds	r3, r7, r4
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	197b      	adds	r3, r7, r5
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	0011      	movs	r1, r2
 8001756:	0018      	movs	r0, r3
 8001758:	f000 f8de 	bl	8001918 <angle_conversion>
	}

	SetCalibrationLights(direction, speed);
 800175c:	230d      	movs	r3, #13
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	230e      	movs	r3, #14
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	0011      	movs	r1, r2
 800176a:	0018      	movs	r0, r3
 800176c:	f000 f806 	bl	800177c <SetCalibrationLights>
}
 8001770:	46c0      	nop			; (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b004      	add	sp, #16
 8001776:	bdb0      	pop	{r4, r5, r7, pc}
 8001778:	2000002c 	.word	0x2000002c

0800177c <SetCalibrationLights>:
// TODO: While car is not connected, blink all car lights every second to indicate disconnection

/* void SetCalibrationLights(uint8_t direction, uint8_t pressure)
 * Depending on the mode and speed bits, change the intensity of the headlights corresponding to the
 * states in calibration state machine. */
void SetCalibrationLights(uint8_t direction, uint8_t pressure) {
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	0002      	movs	r2, r0
 8001784:	1dfb      	adds	r3, r7, #7
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	1dbb      	adds	r3, r7, #6
 800178a:	1c0a      	adds	r2, r1, #0
 800178c:	701a      	strb	r2, [r3, #0]
	if (enableLEDs && (pressure == 1 || pressure == 2)) {
 800178e:	4b5b      	ldr	r3, [pc, #364]	; (80018fc <SetCalibrationLights+0x180>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d100      	bne.n	8001798 <SetCalibrationLights+0x1c>
 8001796:	e099      	b.n	80018cc <SetCalibrationLights+0x150>
 8001798:	1dbb      	adds	r3, r7, #6
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d004      	beq.n	80017aa <SetCalibrationLights+0x2e>
 80017a0:	1dbb      	adds	r3, r7, #6
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d000      	beq.n	80017aa <SetCalibrationLights+0x2e>
 80017a8:	e090      	b.n	80018cc <SetCalibrationLights+0x150>
		//If LEDs are already running, return

		int indication = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
		//int pulseWidth = 0;

		switch (direction) {
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d00b      	beq.n	80017ce <SetCalibrationLights+0x52>
 80017b6:	dc02      	bgt.n	80017be <SetCalibrationLights+0x42>
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <SetCalibrationLights+0x4c>
 80017bc:	e010      	b.n	80017e0 <SetCalibrationLights+0x64>
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d008      	beq.n	80017d4 <SetCalibrationLights+0x58>
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d009      	beq.n	80017da <SetCalibrationLights+0x5e>
 80017c6:	e00b      	b.n	80017e0 <SetCalibrationLights+0x64>
			case 0: indication = Back; break;
 80017c8:	2302      	movs	r3, #2
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e00b      	b.n	80017e6 <SetCalibrationLights+0x6a>
			case 1: indication = Right; break;
 80017ce:	2308      	movs	r3, #8
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	e008      	b.n	80017e6 <SetCalibrationLights+0x6a>
			case 2: indication = Left; break;
 80017d4:	2304      	movs	r3, #4
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e005      	b.n	80017e6 <SetCalibrationLights+0x6a>
			case 3: indication = Front; break;
 80017da:	2301      	movs	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e002      	b.n	80017e6 <SetCalibrationLights+0x6a>
			default: indication = Off; break;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	46c0      	nop			; (mov r8, r8)

		// Get half of the ARR to set the duty cycle to 50%
		pulseWidth = ((__HAL_TIM_GET_AUTORELOAD(&htim3) + 1) / 2) - 1;
		*/

		if (pressure == 1) {
 80017e6:	1dbb      	adds	r3, r7, #6
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d11c      	bne.n	8001828 <SetCalibrationLights+0xac>
			//Rest Pressure
			ledPulseWidth = ((__HAL_TIM_GET_AUTORELOAD(&htim3) + 1) * 0.35) - 1; //35% Duty Cycle
 80017ee:	4b44      	ldr	r3, [pc, #272]	; (8001900 <SetCalibrationLights+0x184>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	3301      	adds	r3, #1
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff fbec 	bl	8000fd4 <__aeabi_ui2d>
 80017fc:	4a41      	ldr	r2, [pc, #260]	; (8001904 <SetCalibrationLights+0x188>)
 80017fe:	4b42      	ldr	r3, [pc, #264]	; (8001908 <SetCalibrationLights+0x18c>)
 8001800:	f7fe fdf8 	bl	80003f4 <__aeabi_dmul>
 8001804:	0003      	movs	r3, r0
 8001806:	000c      	movs	r4, r1
 8001808:	0018      	movs	r0, r3
 800180a:	0021      	movs	r1, r4
 800180c:	2200      	movs	r2, #0
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <SetCalibrationLights+0x190>)
 8001810:	f7ff f862 	bl	80008d8 <__aeabi_dsub>
 8001814:	0003      	movs	r3, r0
 8001816:	000c      	movs	r4, r1
 8001818:	0018      	movs	r0, r3
 800181a:	0021      	movs	r1, r4
 800181c:	f7ff fba4 	bl	8000f68 <__aeabi_d2iz>
 8001820:	0002      	movs	r2, r0
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <SetCalibrationLights+0x194>)
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e009      	b.n	800183c <SetCalibrationLights+0xc0>
		} else if (pressure == 2) {
 8001828:	1dbb      	adds	r3, r7, #6
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d105      	bne.n	800183c <SetCalibrationLights+0xc0>
			//Rest Pressure
			ledPulseWidth = __HAL_TIM_GET_AUTORELOAD(&htim3); //100% Duty Cycle
 8001830:	4b33      	ldr	r3, [pc, #204]	; (8001900 <SetCalibrationLights+0x184>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	001a      	movs	r2, r3
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <SetCalibrationLights+0x194>)
 800183a:	601a      	str	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ((indication & Front) || (indication & Left)) * ledPulseWidth);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	4013      	ands	r3, r2
 8001842:	d103      	bne.n	800184c <SetCalibrationLights+0xd0>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2204      	movs	r2, #4
 8001848:	4013      	ands	r3, r2
 800184a:	d001      	beq.n	8001850 <SetCalibrationLights+0xd4>
 800184c:	2201      	movs	r2, #1
 800184e:	e000      	b.n	8001852 <SetCalibrationLights+0xd6>
 8001850:	2200      	movs	r2, #0
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <SetCalibrationLights+0x194>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	435a      	muls	r2, r3
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <SetCalibrationLights+0x184>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ((indication & Front) || (indication & Right)) * ledPulseWidth);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2201      	movs	r2, #1
 8001862:	4013      	ands	r3, r2
 8001864:	d103      	bne.n	800186e <SetCalibrationLights+0xf2>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2208      	movs	r2, #8
 800186a:	4013      	ands	r3, r2
 800186c:	d001      	beq.n	8001872 <SetCalibrationLights+0xf6>
 800186e:	2201      	movs	r2, #1
 8001870:	e000      	b.n	8001874 <SetCalibrationLights+0xf8>
 8001872:	2200      	movs	r2, #0
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <SetCalibrationLights+0x194>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	435a      	muls	r2, r3
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <SetCalibrationLights+0x184>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ((indication & Back) || (indication & Left)) * ledPulseWidth);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d103      	bne.n	8001890 <SetCalibrationLights+0x114>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2204      	movs	r2, #4
 800188c:	4013      	ands	r3, r2
 800188e:	d001      	beq.n	8001894 <SetCalibrationLights+0x118>
 8001890:	2201      	movs	r2, #1
 8001892:	e000      	b.n	8001896 <SetCalibrationLights+0x11a>
 8001894:	2200      	movs	r2, #0
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <SetCalibrationLights+0x194>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	435a      	muls	r2, r3
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <SetCalibrationLights+0x184>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ((indication & Back) || (indication & Right)) * ledPulseWidth);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2202      	movs	r2, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	d103      	bne.n	80018b2 <SetCalibrationLights+0x136>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2208      	movs	r2, #8
 80018ae:	4013      	ands	r3, r2
 80018b0:	d001      	beq.n	80018b6 <SetCalibrationLights+0x13a>
 80018b2:	2201      	movs	r2, #1
 80018b4:	e000      	b.n	80018b8 <SetCalibrationLights+0x13c>
 80018b6:	2200      	movs	r2, #0
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <SetCalibrationLights+0x194>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	435a      	muls	r2, r3
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <SetCalibrationLights+0x184>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	641a      	str	r2, [r3, #64]	; 0x40
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
//		}

		LEDsRunning = 1;
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <SetCalibrationLights+0x198>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
	if (enableLEDs && (pressure == 1 || pressure == 2)) {
 80018ca:	e012      	b.n	80018f2 <SetCalibrationLights+0x176>
		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <SetCalibrationLights+0x184>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2200      	movs	r2, #0
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <SetCalibrationLights+0x184>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <SetCalibrationLights+0x184>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2200      	movs	r2, #0
 80018e2:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <SetCalibrationLights+0x184>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2200      	movs	r2, #0
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40

		LEDsRunning = 0;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <SetCalibrationLights+0x198>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
	}
}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b005      	add	sp, #20
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	2000002c 	.word	0x2000002c
 8001900:	20000074 	.word	0x20000074
 8001904:	66666666 	.word	0x66666666
 8001908:	3fd66666 	.word	0x3fd66666
 800190c:	3ff00000 	.word	0x3ff00000
 8001910:	2000017c 	.word	0x2000017c
 8001914:	20000028 	.word	0x20000028

08001918 <angle_conversion>:

/* void angle_conversion(uint8_t input, uint8_t right_left)
 * Function to convert the speed bits into corresponding angle
 * by taking the inverse. Hardcoded values are based on servo datasheet and
 * prior calculations. */
void angle_conversion(uint8_t input, uint8_t right_left) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	0002      	movs	r2, r0
 8001920:	1dfb      	adds	r3, r7, #7
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	1dbb      	adds	r3, r7, #6
 8001926:	1c0a      	adds	r2, r1, #0
 8001928:	701a      	strb	r2, [r3, #0]
	int pulse_width = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]

	if (right_left == 1) {
 800192e:	1dbb      	adds	r3, r7, #6
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d103      	bne.n	800193e <angle_conversion+0x26>
		//Right
		//pulse_width = (int)(400 + (250 * input / 31));
		pulse_width = 680;
 8001936:	23aa      	movs	r3, #170	; 0xaa
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e009      	b.n	8001952 <angle_conversion+0x3a>
	} else if(right_left == 2) {
 800193e:	1dbb      	adds	r3, r7, #6
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d103      	bne.n	800194e <angle_conversion+0x36>
		//Left
		//pulse_width = (int)(1100 - (250 * input / 31));
		pulse_width = 820;
 8001946:	23cd      	movs	r3, #205	; 0xcd
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e001      	b.n	8001952 <angle_conversion+0x3a>
	} else {
		//No turning
		pulse_width = 750;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <angle_conversion+0x4c>)
 8001950:	60fb      	str	r3, [r7, #12]
	}

	htim15.Instance->CCR1 = pulse_width;
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <angle_conversion+0x50>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	635a      	str	r2, [r3, #52]	; 0x34
}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	b004      	add	sp, #16
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	000002ee 	.word	0x000002ee
 8001968:	20000030 	.word	0x20000030

0800196c <speed_conversion>:
 * Function to convert the speed bits (uint8_t input) into correct PWM output for
 * DC motors. */

//TODO: Make the speed conversion ramp-up/ramp-down for changing direction
void speed_conversion(uint8_t input, uint8_t front_back)
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	0002      	movs	r2, r0
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	1dbb      	adds	r3, r7, #6
 800197a:	1c0a      	adds	r2, r1, #0
 800197c:	701a      	strb	r2, [r3, #0]
	int duty_cycle_percentage = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]

	/* The following min_percentage is based on tested values to see when the DC
	 * motors actually run and when they do not. max_percentage is based on when
	 * we thought the DC motors speed was too high, so we limited the max PWM output. */
	// was at 50 and 80
	int min_percentage = 75;
 8001982:	234b      	movs	r3, #75	; 0x4b
 8001984:	60fb      	str	r3, [r7, #12]
	int max_percentage = 85;
 8001986:	2355      	movs	r3, #85	; 0x55
 8001988:	60bb      	str	r3, [r7, #8]

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);

	// This selection construct takes care of the polarity input to the motor driver.
	if((front_back == 3 || front_back == 1 || front_back == 2)) //clockwise, forward/right/left
 800198a:	1dbb      	adds	r3, r7, #6
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d007      	beq.n	80019a2 <speed_conversion+0x36>
 8001992:	1dbb      	adds	r3, r7, #6
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d003      	beq.n	80019a2 <speed_conversion+0x36>
 800199a:	1dbb      	adds	r3, r7, #6
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d110      	bne.n	80019c4 <speed_conversion+0x58>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1); //INA
 80019a2:	2390      	movs	r3, #144	; 0x90
 80019a4:	05db      	lsls	r3, r3, #23
 80019a6:	2201      	movs	r2, #1
 80019a8:	2110      	movs	r1, #16
 80019aa:	0018      	movs	r0, r3
 80019ac:	f000 fdc6 	bl	800253c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0); //INB
 80019b0:	2390      	movs	r3, #144	; 0x90
 80019b2:	05db      	lsls	r3, r3, #23
 80019b4:	2200      	movs	r2, #0
 80019b6:	2120      	movs	r1, #32
 80019b8:	0018      	movs	r0, r3
 80019ba:	f000 fdbf 	bl	800253c <HAL_GPIO_WritePin>
		currForwardBackward = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e013      	b.n	80019ec <speed_conversion+0x80>
	}
	else if(front_back == 0)//anticlockwise, back
 80019c4:	1dbb      	adds	r3, r7, #6
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10f      	bne.n	80019ec <speed_conversion+0x80>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0); //INA
 80019cc:	2390      	movs	r3, #144	; 0x90
 80019ce:	05db      	lsls	r3, r3, #23
 80019d0:	2200      	movs	r2, #0
 80019d2:	2110      	movs	r1, #16
 80019d4:	0018      	movs	r0, r3
 80019d6:	f000 fdb1 	bl	800253c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); //INB
 80019da:	2390      	movs	r3, #144	; 0x90
 80019dc:	05db      	lsls	r3, r3, #23
 80019de:	2201      	movs	r2, #1
 80019e0:	2120      	movs	r1, #32
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 fdaa 	bl	800253c <HAL_GPIO_WritePin>
		currForwardBackward = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
	}

	// if speed is 0, then no duty cycle
	if(input == 0) {
 80019ec:	1dfb      	adds	r3, r7, #7
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d110      	bne.n	8001a16 <speed_conversion+0xaa>
		duty_cycle_percentage = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
		htim2.Instance->CCR4 = duty_cycle_percentage * (htim2.Instance->ARR+1) / 100;
 80019f8:	4b46      	ldr	r3, [pc, #280]	; (8001b14 <speed_conversion+0x1a8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	3301      	adds	r3, #1
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	435a      	muls	r2, r3
 8001a04:	4b43      	ldr	r3, [pc, #268]	; (8001b14 <speed_conversion+0x1a8>)
 8001a06:	681c      	ldr	r4, [r3, #0]
 8001a08:	2164      	movs	r1, #100	; 0x64
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	f7fe fb7c 	bl	8000108 <__udivsi3>
 8001a10:	0003      	movs	r3, r0
 8001a12:	6423      	str	r3, [r4, #64]	; 0x40
 8001a14:	e073      	b.n	8001afe <speed_conversion+0x192>
	}
	// if speed is 1, then min duty cycle
	else if (input == 1) {
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d110      	bne.n	8001a40 <speed_conversion+0xd4>
		duty_cycle_percentage = min_percentage;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	613b      	str	r3, [r7, #16]
		htim2.Instance->CCR4 = duty_cycle_percentage * (htim2.Instance->ARR+1) / 100;
 8001a22:	4b3c      	ldr	r3, [pc, #240]	; (8001b14 <speed_conversion+0x1a8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	3301      	adds	r3, #1
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	435a      	muls	r2, r3
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <speed_conversion+0x1a8>)
 8001a30:	681c      	ldr	r4, [r3, #0]
 8001a32:	2164      	movs	r1, #100	; 0x64
 8001a34:	0010      	movs	r0, r2
 8001a36:	f7fe fb67 	bl	8000108 <__udivsi3>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	6423      	str	r3, [r4, #64]	; 0x40
 8001a3e:	e05e      	b.n	8001afe <speed_conversion+0x192>
	}
	// if speed is in acceleration range, then compute correct duty cycle percentage
	else {
		if (prevSpeed <= input) { //Acceleration
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <speed_conversion+0x1ac>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	db2c      	blt.n	8001aa6 <speed_conversion+0x13a>
			for (int i = prevSpeed; i <= input; i++) {
 8001a4c:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <speed_conversion+0x1ac>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	e022      	b.n	8001a9a <speed_conversion+0x12e>
				duty_cycle_percentage = ((max_percentage - min_percentage)*(i - 1)/30) + min_percentage;
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	3a01      	subs	r2, #1
 8001a5e:	4353      	muls	r3, r2
 8001a60:	211e      	movs	r1, #30
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7fe fbda 	bl	800021c <__divsi3>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	189b      	adds	r3, r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
				htim2.Instance->CCR4 = duty_cycle_percentage * (htim2.Instance->ARR+1) / 100;
 8001a72:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <speed_conversion+0x1a8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	3301      	adds	r3, #1
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	435a      	muls	r2, r3
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <speed_conversion+0x1a8>)
 8001a80:	681c      	ldr	r4, [r3, #0]
 8001a82:	2164      	movs	r1, #100	; 0x64
 8001a84:	0010      	movs	r0, r2
 8001a86:	f7fe fb3f 	bl	8000108 <__udivsi3>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	6423      	str	r3, [r4, #64]	; 0x40
				HAL_Delay(25);
 8001a8e:	2019      	movs	r0, #25
 8001a90:	f000 fa9e 	bl	8001fd0 <HAL_Delay>
			for (int i = prevSpeed; i <= input; i++) {
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	ddd7      	ble.n	8001a54 <speed_conversion+0xe8>
 8001aa4:	e02b      	b.n	8001afe <speed_conversion+0x192>
			}
		}
		else { //Deceleration
			for (int i = prevSpeed; i >= input; i--) {
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <speed_conversion+0x1ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e022      	b.n	8001af4 <speed_conversion+0x188>
				duty_cycle_percentage = ((max_percentage - min_percentage)*(i - 1)/30) + min_percentage;
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	3a01      	subs	r2, #1
 8001ab8:	4353      	muls	r3, r2
 8001aba:	211e      	movs	r1, #30
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7fe fbad 	bl	800021c <__divsi3>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	189b      	adds	r3, r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
				htim2.Instance->CCR4 = duty_cycle_percentage * (htim2.Instance->ARR+1) / 100;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <speed_conversion+0x1a8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	435a      	muls	r2, r3
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <speed_conversion+0x1a8>)
 8001ada:	681c      	ldr	r4, [r3, #0]
 8001adc:	2164      	movs	r1, #100	; 0x64
 8001ade:	0010      	movs	r0, r2
 8001ae0:	f7fe fb12 	bl	8000108 <__udivsi3>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	6423      	str	r3, [r4, #64]	; 0x40
				HAL_Delay(25);
 8001ae8:	2019      	movs	r0, #25
 8001aea:	f000 fa71 	bl	8001fd0 <HAL_Delay>
			for (int i = prevSpeed; i >= input; i--) {
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	1dfb      	adds	r3, r7, #7
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	dad7      	bge.n	8001aae <speed_conversion+0x142>
		}
	}

	//htim2.Instance->CCR4 = duty_cycle_percentage * (htim2.Instance->ARR+1) / 100;

	prevSpeed = input;
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <speed_conversion+0x1ac>)
 8001b04:	601a      	str	r2, [r3, #0]
	prevForwardBackward = currForwardBackward;
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <speed_conversion+0x1b0>)
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	601a      	str	r2, [r3, #0]
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b009      	add	sp, #36	; 0x24
 8001b12:	bd90      	pop	{r4, r7, pc}
 8001b14:	2000013c 	.word	0x2000013c
 8001b18:	20000070 	.word	0x20000070
 8001b1c:	20000138 	.word	0x20000138

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_MspInit+0x44>)
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_MspInit+0x44>)
 8001b38:	2101      	movs	r1, #1
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	619a      	str	r2, [r3, #24]
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_MspInit+0x44>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2201      	movs	r2, #1
 8001b44:	4013      	ands	r3, r2
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_MspInit+0x44>)
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_MspInit+0x44>)
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	0549      	lsls	r1, r1, #21
 8001b54:	430a      	orrs	r2, r1
 8001b56:	61da      	str	r2, [r3, #28]
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_MspInit+0x44>)
 8001b5a:	69da      	ldr	r2, [r3, #28]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	055b      	lsls	r3, r3, #21
 8001b60:	4013      	ands	r3, r2
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b002      	add	sp, #8
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	05db      	lsls	r3, r3, #23
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d10c      	bne.n	8001ba2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_TIM_Base_MspInit+0x58>)
 8001b8a:	69da      	ldr	r2, [r3, #28]
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_TIM_Base_MspInit+0x58>)
 8001b8e:	2101      	movs	r1, #1
 8001b90:	430a      	orrs	r2, r1
 8001b92:	61da      	str	r2, [r3, #28]
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_TIM_Base_MspInit+0x58>)
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ba0:	e010      	b.n	8001bc4 <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM3)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_TIM_Base_MspInit+0x5c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d10b      	bne.n	8001bc4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <HAL_TIM_Base_MspInit+0x58>)
 8001bae:	69da      	ldr	r2, [r3, #28]
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_TIM_Base_MspInit+0x58>)
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	61da      	str	r2, [r3, #28]
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <HAL_TIM_Base_MspInit+0x58>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
}
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b004      	add	sp, #16
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40000400 	.word	0x40000400

08001bd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_TIM_PWM_MspInit+0x38>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10d      	bne.n	8001c02 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	0249      	lsls	r1, r1, #9
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	619a      	str	r2, [r3, #24]
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bf6:	699a      	ldr	r2, [r3, #24]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	025b      	lsls	r3, r3, #9
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b004      	add	sp, #16
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	40014000 	.word	0x40014000
 8001c10:	40021000 	.word	0x40021000

08001c14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b08d      	sub	sp, #52	; 0x34
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	231c      	movs	r3, #28
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	0018      	movs	r0, r3
 8001c22:	2314      	movs	r3, #20
 8001c24:	001a      	movs	r2, r3
 8001c26:	2100      	movs	r1, #0
 8001c28:	f002 fdf6 	bl	8004818 <memset>
  if(htim->Instance==TIM2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	05db      	lsls	r3, r3, #23
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d125      	bne.n	8001c84 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001c3e:	2180      	movs	r1, #128	; 0x80
 8001c40:	0289      	lsls	r1, r1, #10
 8001c42:	430a      	orrs	r2, r1
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	029b      	lsls	r3, r3, #10
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = DC_PWM_Pin;
 8001c54:	211c      	movs	r1, #28
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	2208      	movs	r2, #8
 8001c5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	2202      	movs	r2, #2
 8001c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2202      	movs	r2, #2
 8001c72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DC_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c74:	187a      	adds	r2, r7, r1
 8001c76:	2390      	movs	r3, #144	; 0x90
 8001c78:	05db      	lsls	r3, r3, #23
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 faed 	bl	800225c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001c82:	e078      	b.n	8001d76 <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM3)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a3e      	ldr	r2, [pc, #248]	; (8001d84 <HAL_TIM_MspPostInit+0x170>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d149      	bne.n	8001d22 <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0289      	lsls	r1, r1, #10
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	029b      	lsls	r3, r3, #10
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	02c9      	lsls	r1, r1, #11
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	615a      	str	r2, [r3, #20]
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	02db      	lsls	r3, r3, #11
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FL_Pin|FR_Pin;
 8001cc6:	241c      	movs	r4, #28
 8001cc8:	193b      	adds	r3, r7, r4
 8001cca:	22c0      	movs	r2, #192	; 0xc0
 8001ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	193b      	adds	r3, r7, r4
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	193b      	adds	r3, r7, r4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001ce0:	193b      	adds	r3, r7, r4
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	193a      	adds	r2, r7, r4
 8001ce8:	2390      	movs	r3, #144	; 0x90
 8001cea:	05db      	lsls	r3, r3, #23
 8001cec:	0011      	movs	r1, r2
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 fab4 	bl	800225c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BL_Pin|BR_Pin;
 8001cf4:	0021      	movs	r1, r4
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	2202      	movs	r2, #2
 8001d00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	187b      	adds	r3, r7, r1
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	2201      	movs	r2, #1
 8001d12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_TIM_MspPostInit+0x174>)
 8001d18:	0019      	movs	r1, r3
 8001d1a:	0010      	movs	r0, r2
 8001d1c:	f000 fa9e 	bl	800225c <HAL_GPIO_Init>
}
 8001d20:	e029      	b.n	8001d76 <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM15)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <HAL_TIM_MspPostInit+0x178>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d124      	bne.n	8001d76 <HAL_TIM_MspPostInit+0x162>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	0289      	lsls	r1, r1, #10
 8001d36:	430a      	orrs	r2, r1
 8001d38:	615a      	str	r2, [r3, #20]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_TIM_MspPostInit+0x16c>)
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	029b      	lsls	r3, r3, #10
 8001d42:	4013      	ands	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8001d48:	211c      	movs	r1, #28
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2202      	movs	r2, #2
 8001d54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8001d68:	187a      	adds	r2, r7, r1
 8001d6a:	2390      	movs	r3, #144	; 0x90
 8001d6c:	05db      	lsls	r3, r3, #23
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 fa73 	bl	800225c <HAL_GPIO_Init>
}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b00d      	add	sp, #52	; 0x34
 8001d7c:	bd90      	pop	{r4, r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40000400 	.word	0x40000400
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	40014000 	.word	0x40014000

08001d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	2314      	movs	r3, #20
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	2314      	movs	r3, #20
 8001da0:	001a      	movs	r2, r3
 8001da2:	2100      	movs	r1, #0
 8001da4:	f002 fd38 	bl	8004818 <memset>
  if(huart->Instance==USART1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_UART_MspInit+0xa4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d13b      	bne.n	8001e2a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <HAL_UART_MspInit+0xa8>)
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_UART_MspInit+0xa8>)
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	01c9      	lsls	r1, r1, #7
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	619a      	str	r2, [r3, #24]
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_UART_MspInit+0xa8>)
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	01db      	lsls	r3, r3, #7
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_UART_MspInit+0xa8>)
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_UART_MspInit+0xa8>)
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0289      	lsls	r1, r1, #10
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	615a      	str	r2, [r3, #20]
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_UART_MspInit+0xa8>)
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	029b      	lsls	r3, r3, #10
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dea:	2114      	movs	r1, #20
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	22c0      	movs	r2, #192	; 0xc0
 8001df0:	00d2      	lsls	r2, r2, #3
 8001df2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	2202      	movs	r2, #2
 8001df8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	2203      	movs	r2, #3
 8001e04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	2201      	movs	r2, #1
 8001e0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	187a      	adds	r2, r7, r1
 8001e0e:	2390      	movs	r3, #144	; 0x90
 8001e10:	05db      	lsls	r3, r3, #23
 8001e12:	0011      	movs	r1, r2
 8001e14:	0018      	movs	r0, r3
 8001e16:	f000 fa21 	bl	800225c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	201b      	movs	r0, #27
 8001e20:	f000 f9a4 	bl	800216c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e24:	201b      	movs	r0, #27
 8001e26:	f000 f9b6 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b00a      	add	sp, #40	; 0x28
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40021000 	.word	0x40021000

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler+0x4>

08001e4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e64:	f000 f898 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  HAL_UART_Receive(&huart1, (uint8_t *)&rxbuffer, 1, 100);
 8001e74:	490a      	ldr	r1, [pc, #40]	; (8001ea0 <USART1_IRQHandler+0x30>)
 8001e76:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <USART1_IRQHandler+0x34>)
 8001e78:	2364      	movs	r3, #100	; 0x64
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f001 ff2c 	bl	8003cd8 <HAL_UART_Receive>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <USART1_IRQHandler+0x34>)
 8001e82:	0018      	movs	r0, r3
 8001e84:	f002 f800 	bl	8003e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <USART1_IRQHandler+0x34>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <USART1_IRQHandler+0x34>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2120      	movs	r1, #32
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	20000180 	.word	0x20000180
 8001ea4:	200000b4 	.word	0x200000b4

08001ea8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb8:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eba:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ebc:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <LoopForever+0xe>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed0:	4c0b      	ldr	r4, [pc, #44]	; (8001f00 <LoopForever+0x16>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ede:	f7ff ffe3 	bl	8001ea8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001ee2:	f002 fc75 	bl	80047d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ee6:	f7ff f8c5 	bl	8001074 <main>

08001eea <LoopForever>:

LoopForever:
    b LoopForever
 8001eea:	e7fe      	b.n	8001eea <LoopForever>
  ldr   r0, =_estack
 8001eec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ef8:	080048c0 	.word	0x080048c0
  ldr r2, =_sbss
 8001efc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f00:	20000188 	.word	0x20000188

08001f04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC1_COMP_IRQHandler>
	...

08001f08 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_Init+0x24>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_Init+0x24>)
 8001f12:	2110      	movs	r1, #16
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f000 f809 	bl	8001f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1e:	f7ff fe05 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	40022000 	.word	0x40022000

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_InitTick+0x5c>)
 8001f3a:	681c      	ldr	r4, [r3, #0]
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_InitTick+0x60>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	0019      	movs	r1, r3
 8001f42:	23fa      	movs	r3, #250	; 0xfa
 8001f44:	0098      	lsls	r0, r3, #2
 8001f46:	f7fe f8df 	bl	8000108 <__udivsi3>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	0020      	movs	r0, r4
 8001f50:	f7fe f8da 	bl	8000108 <__udivsi3>
 8001f54:	0003      	movs	r3, r0
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 f92d 	bl	80021b6 <HAL_SYSTICK_Config>
 8001f5c:	1e03      	subs	r3, r0, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e00f      	b.n	8001f84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d80b      	bhi.n	8001f82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	425b      	negs	r3, r3
 8001f70:	2200      	movs	r2, #0
 8001f72:	0018      	movs	r0, r3
 8001f74:	f000 f8fa 	bl	800216c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_InitTick+0x64>)
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b003      	add	sp, #12
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000008 	.word	0x20000008
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_IncTick+0x1c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	001a      	movs	r2, r3
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_IncTick+0x20>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	18d2      	adds	r2, r2, r3
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <HAL_IncTick+0x20>)
 8001faa:	601a      	str	r2, [r3, #0]
}
 8001fac:	46c0      	nop			; (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000184 	.word	0x20000184

08001fbc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc0:	4b02      	ldr	r3, [pc, #8]	; (8001fcc <HAL_GetTick+0x10>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	20000184 	.word	0x20000184

08001fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff fff0 	bl	8001fbc <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	d005      	beq.n	8001ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_Delay+0x40>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	001a      	movs	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	189b      	adds	r3, r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	f7ff ffe0 	bl	8001fbc <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d8f7      	bhi.n	8001ff8 <HAL_Delay+0x28>
  {
  }
}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000008 	.word	0x20000008

08002014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	0002      	movs	r2, r0
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002020:	1dfb      	adds	r3, r7, #7
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b7f      	cmp	r3, #127	; 0x7f
 8002026:	d809      	bhi.n	800203c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002028:	1dfb      	adds	r3, r7, #7
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	001a      	movs	r2, r3
 800202e:	231f      	movs	r3, #31
 8002030:	401a      	ands	r2, r3
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_EnableIRQ+0x30>)
 8002034:	2101      	movs	r1, #1
 8002036:	4091      	lsls	r1, r2
 8002038:	000a      	movs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
  }
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	0002      	movs	r2, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002056:	1dfb      	adds	r3, r7, #7
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b7f      	cmp	r3, #127	; 0x7f
 800205c:	d828      	bhi.n	80020b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800205e:	4a2f      	ldr	r2, [pc, #188]	; (800211c <__NVIC_SetPriority+0xd4>)
 8002060:	1dfb      	adds	r3, r7, #7
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b25b      	sxtb	r3, r3
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	33c0      	adds	r3, #192	; 0xc0
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	589b      	ldr	r3, [r3, r2]
 800206e:	1dfa      	adds	r2, r7, #7
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	0011      	movs	r1, r2
 8002074:	2203      	movs	r2, #3
 8002076:	400a      	ands	r2, r1
 8002078:	00d2      	lsls	r2, r2, #3
 800207a:	21ff      	movs	r1, #255	; 0xff
 800207c:	4091      	lsls	r1, r2
 800207e:	000a      	movs	r2, r1
 8002080:	43d2      	mvns	r2, r2
 8002082:	401a      	ands	r2, r3
 8002084:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	22ff      	movs	r2, #255	; 0xff
 800208c:	401a      	ands	r2, r3
 800208e:	1dfb      	adds	r3, r7, #7
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	0018      	movs	r0, r3
 8002094:	2303      	movs	r3, #3
 8002096:	4003      	ands	r3, r0
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800209c:	481f      	ldr	r0, [pc, #124]	; (800211c <__NVIC_SetPriority+0xd4>)
 800209e:	1dfb      	adds	r3, r7, #7
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	430a      	orrs	r2, r1
 80020a8:	33c0      	adds	r3, #192	; 0xc0
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020ae:	e031      	b.n	8002114 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020b0:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <__NVIC_SetPriority+0xd8>)
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	0019      	movs	r1, r3
 80020b8:	230f      	movs	r3, #15
 80020ba:	400b      	ands	r3, r1
 80020bc:	3b08      	subs	r3, #8
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3306      	adds	r3, #6
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	18d3      	adds	r3, r2, r3
 80020c6:	3304      	adds	r3, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	1dfa      	adds	r2, r7, #7
 80020cc:	7812      	ldrb	r2, [r2, #0]
 80020ce:	0011      	movs	r1, r2
 80020d0:	2203      	movs	r2, #3
 80020d2:	400a      	ands	r2, r1
 80020d4:	00d2      	lsls	r2, r2, #3
 80020d6:	21ff      	movs	r1, #255	; 0xff
 80020d8:	4091      	lsls	r1, r2
 80020da:	000a      	movs	r2, r1
 80020dc:	43d2      	mvns	r2, r2
 80020de:	401a      	ands	r2, r3
 80020e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	22ff      	movs	r2, #255	; 0xff
 80020e8:	401a      	ands	r2, r3
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	0018      	movs	r0, r3
 80020f0:	2303      	movs	r3, #3
 80020f2:	4003      	ands	r3, r0
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <__NVIC_SetPriority+0xd8>)
 80020fa:	1dfb      	adds	r3, r7, #7
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	001c      	movs	r4, r3
 8002100:	230f      	movs	r3, #15
 8002102:	4023      	ands	r3, r4
 8002104:	3b08      	subs	r3, #8
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	430a      	orrs	r2, r1
 800210a:	3306      	adds	r3, #6
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	18c3      	adds	r3, r0, r3
 8002110:	3304      	adds	r3, #4
 8002112:	601a      	str	r2, [r3, #0]
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b003      	add	sp, #12
 800211a:	bd90      	pop	{r4, r7, pc}
 800211c:	e000e100 	.word	0xe000e100
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <SysTick_Config+0x40>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2301      	movs	r3, #1
 8002138:	e010      	b.n	800215c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <SysTick_Config+0x44>)
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	3a01      	subs	r2, #1
 8002140:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002142:	2301      	movs	r3, #1
 8002144:	425b      	negs	r3, r3
 8002146:	2103      	movs	r1, #3
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff ff7d 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <SysTick_Config+0x44>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SysTick_Config+0x44>)
 8002156:	2207      	movs	r2, #7
 8002158:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215a:	2300      	movs	r3, #0
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bd80      	pop	{r7, pc}
 8002164:	00ffffff 	.word	0x00ffffff
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	210f      	movs	r1, #15
 8002178:	187b      	adds	r3, r7, r1
 800217a:	1c02      	adds	r2, r0, #0
 800217c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	187b      	adds	r3, r7, r1
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b25b      	sxtb	r3, r3
 8002186:	0011      	movs	r1, r2
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff ff5d 	bl	8002048 <__NVIC_SetPriority>
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b004      	add	sp, #16
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	0002      	movs	r2, r0
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a2:	1dfb      	adds	r3, r7, #7
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff ff33 	bl	8002014 <__NVIC_EnableIRQ>
}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7ff ffaf 	bl	8002124 <SysTick_Config>
 80021c6:	0003      	movs	r3, r0
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b002      	add	sp, #8
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	230f      	movs	r3, #15
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2221      	movs	r2, #33	; 0x21
 80021e4:	5c9b      	ldrb	r3, [r3, r2]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d007      	beq.n	80021fc <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2204      	movs	r2, #4
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021f2:	230f      	movs	r3, #15
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	e028      	b.n	800224e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	210e      	movs	r1, #14
 8002208:	438a      	bics	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2101      	movs	r1, #1
 8002218:	438a      	bics	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	2101      	movs	r1, #1
 8002226:	4091      	lsls	r1, r2
 8002228:	000a      	movs	r2, r1
 800222a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2221      	movs	r2, #33	; 0x21
 8002230:	2101      	movs	r1, #1
 8002232:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	2100      	movs	r1, #0
 800223a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002240:	2b00      	cmp	r3, #0
 8002242:	d004      	beq.n	800224e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	0010      	movs	r0, r2
 800224c:	4798      	blx	r3
    } 
  }
  return status;
 800224e:	230f      	movs	r3, #15
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	781b      	ldrb	r3, [r3, #0]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226a:	e14f      	b.n	800250c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4091      	lsls	r1, r2
 8002276:	000a      	movs	r2, r1
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d100      	bne.n	8002284 <HAL_GPIO_Init+0x28>
 8002282:	e140      	b.n	8002506 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d00b      	beq.n	80022a4 <HAL_GPIO_Init+0x48>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d007      	beq.n	80022a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002298:	2b11      	cmp	r3, #17
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b12      	cmp	r3, #18
 80022a2:	d130      	bne.n	8002306 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	409a      	lsls	r2, r3
 80022b2:	0013      	movs	r3, r2
 80022b4:	43da      	mvns	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	409a      	lsls	r2, r3
 80022c6:	0013      	movs	r3, r2
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022da:	2201      	movs	r2, #1
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	43da      	mvns	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	2201      	movs	r2, #1
 80022f2:	401a      	ands	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	409a      	lsls	r2, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	409a      	lsls	r2, r3
 8002314:	0013      	movs	r3, r2
 8002316:	43da      	mvns	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	409a      	lsls	r2, r3
 8002328:	0013      	movs	r3, r2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0xea>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b12      	cmp	r3, #18
 8002344:	d123      	bne.n	800238e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	08da      	lsrs	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3208      	adds	r2, #8
 800234e:	0092      	lsls	r2, r2, #2
 8002350:	58d3      	ldr	r3, [r2, r3]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2207      	movs	r2, #7
 8002358:	4013      	ands	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	220f      	movs	r2, #15
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2107      	movs	r1, #7
 8002372:	400b      	ands	r3, r1
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	409a      	lsls	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3208      	adds	r2, #8
 8002388:	0092      	lsls	r2, r2, #2
 800238a:	6939      	ldr	r1, [r7, #16]
 800238c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	409a      	lsls	r2, r3
 800239c:	0013      	movs	r3, r2
 800239e:	43da      	mvns	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2203      	movs	r2, #3
 80023ac:	401a      	ands	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	0013      	movs	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	055b      	lsls	r3, r3, #21
 80023ca:	4013      	ands	r3, r2
 80023cc:	d100      	bne.n	80023d0 <HAL_GPIO_Init+0x174>
 80023ce:	e09a      	b.n	8002506 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d0:	4b54      	ldr	r3, [pc, #336]	; (8002524 <HAL_GPIO_Init+0x2c8>)
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	4b53      	ldr	r3, [pc, #332]	; (8002524 <HAL_GPIO_Init+0x2c8>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	430a      	orrs	r2, r1
 80023da:	619a      	str	r2, [r3, #24]
 80023dc:	4b51      	ldr	r3, [pc, #324]	; (8002524 <HAL_GPIO_Init+0x2c8>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023e8:	4a4f      	ldr	r2, [pc, #316]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	589b      	ldr	r3, [r3, r2]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2203      	movs	r2, #3
 80023fa:	4013      	ands	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	220f      	movs	r2, #15
 8002400:	409a      	lsls	r2, r3
 8002402:	0013      	movs	r3, r2
 8002404:	43da      	mvns	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	2390      	movs	r3, #144	; 0x90
 8002410:	05db      	lsls	r3, r3, #23
 8002412:	429a      	cmp	r2, r3
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0x1e2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a44      	ldr	r2, [pc, #272]	; (800252c <HAL_GPIO_Init+0x2d0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00d      	beq.n	800243a <HAL_GPIO_Init+0x1de>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a43      	ldr	r2, [pc, #268]	; (8002530 <HAL_GPIO_Init+0x2d4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <HAL_GPIO_Init+0x1da>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a42      	ldr	r2, [pc, #264]	; (8002534 <HAL_GPIO_Init+0x2d8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_GPIO_Init+0x1d6>
 800242e:	2303      	movs	r3, #3
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x1e4>
 8002432:	2305      	movs	r3, #5
 8002434:	e004      	b.n	8002440 <HAL_GPIO_Init+0x1e4>
 8002436:	2302      	movs	r3, #2
 8002438:	e002      	b.n	8002440 <HAL_GPIO_Init+0x1e4>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x1e4>
 800243e:	2300      	movs	r3, #0
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	2103      	movs	r1, #3
 8002444:	400a      	ands	r2, r1
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	4093      	lsls	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002450:	4935      	ldr	r1, [pc, #212]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800245e:	4b36      	ldr	r3, [pc, #216]	; (8002538 <HAL_GPIO_Init+0x2dc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43da      	mvns	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	025b      	lsls	r3, r3, #9
 8002476:	4013      	ands	r3, r2
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_GPIO_Init+0x2dc>)
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002488:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <HAL_GPIO_Init+0x2dc>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43da      	mvns	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	4013      	ands	r3, r2
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024ac:	4b22      	ldr	r3, [pc, #136]	; (8002538 <HAL_GPIO_Init+0x2dc>)
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b2:	4b21      	ldr	r3, [pc, #132]	; (8002538 <HAL_GPIO_Init+0x2dc>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	43da      	mvns	r2, r3
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	035b      	lsls	r3, r3, #13
 80024ca:	4013      	ands	r3, r2
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <HAL_GPIO_Init+0x2dc>)
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <HAL_GPIO_Init+0x2dc>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	43da      	mvns	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	039b      	lsls	r3, r3, #14
 80024f4:	4013      	ands	r3, r2
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_GPIO_Init+0x2dc>)
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3301      	adds	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	40da      	lsrs	r2, r3
 8002514:	1e13      	subs	r3, r2, #0
 8002516:	d000      	beq.n	800251a <HAL_GPIO_Init+0x2be>
 8002518:	e6a8      	b.n	800226c <HAL_GPIO_Init+0x10>
  } 
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b006      	add	sp, #24
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	40021000 	.word	0x40021000
 8002528:	40010000 	.word	0x40010000
 800252c:	48000400 	.word	0x48000400
 8002530:	48000800 	.word	0x48000800
 8002534:	48000c00 	.word	0x48000c00
 8002538:	40010400 	.word	0x40010400

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	0008      	movs	r0, r1
 8002546:	0011      	movs	r1, r2
 8002548:	1cbb      	adds	r3, r7, #2
 800254a:	1c02      	adds	r2, r0, #0
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	1c7b      	adds	r3, r7, #1
 8002550:	1c0a      	adds	r2, r1, #0
 8002552:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002554:	1c7b      	adds	r3, r7, #1
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d004      	beq.n	8002566 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800255c:	1cbb      	adds	r3, r7, #2
 800255e:	881a      	ldrh	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002564:	e003      	b.n	800256e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002566:	1cbb      	adds	r3, r7, #2
 8002568:	881a      	ldrh	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b002      	add	sp, #8
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e303      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2201      	movs	r2, #1
 8002590:	4013      	ands	r3, r2
 8002592:	d100      	bne.n	8002596 <HAL_RCC_OscConfig+0x1e>
 8002594:	e08d      	b.n	80026b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002596:	4bc4      	ldr	r3, [pc, #784]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	220c      	movs	r2, #12
 800259c:	4013      	ands	r3, r2
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d00e      	beq.n	80025c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025a2:	4bc1      	ldr	r3, [pc, #772]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	220c      	movs	r2, #12
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d116      	bne.n	80025dc <HAL_RCC_OscConfig+0x64>
 80025ae:	4bbe      	ldr	r3, [pc, #760]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	025b      	lsls	r3, r3, #9
 80025b6:	401a      	ands	r2, r3
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	025b      	lsls	r3, r3, #9
 80025bc:	429a      	cmp	r2, r3
 80025be:	d10d      	bne.n	80025dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	4bb9      	ldr	r3, [pc, #740]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	4013      	ands	r3, r2
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_OscConfig+0x56>
 80025cc:	e070      	b.n	80026b0 <HAL_RCC_OscConfig+0x138>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d000      	beq.n	80025d8 <HAL_RCC_OscConfig+0x60>
 80025d6:	e06b      	b.n	80026b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e2da      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_OscConfig+0x7c>
 80025e4:	4bb0      	ldr	r3, [pc, #704]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4baf      	ldr	r3, [pc, #700]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	0249      	lsls	r1, r1, #9
 80025ee:	430a      	orrs	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e02f      	b.n	8002654 <HAL_RCC_OscConfig+0xdc>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10c      	bne.n	8002616 <HAL_RCC_OscConfig+0x9e>
 80025fc:	4baa      	ldr	r3, [pc, #680]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4ba9      	ldr	r3, [pc, #676]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002602:	49aa      	ldr	r1, [pc, #680]	; (80028ac <HAL_RCC_OscConfig+0x334>)
 8002604:	400a      	ands	r2, r1
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	4ba7      	ldr	r3, [pc, #668]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4ba6      	ldr	r3, [pc, #664]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800260e:	49a8      	ldr	r1, [pc, #672]	; (80028b0 <HAL_RCC_OscConfig+0x338>)
 8002610:	400a      	ands	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e01e      	b.n	8002654 <HAL_RCC_OscConfig+0xdc>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b05      	cmp	r3, #5
 800261c:	d10e      	bne.n	800263c <HAL_RCC_OscConfig+0xc4>
 800261e:	4ba2      	ldr	r3, [pc, #648]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4ba1      	ldr	r3, [pc, #644]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002624:	2180      	movs	r1, #128	; 0x80
 8002626:	02c9      	lsls	r1, r1, #11
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	4b9e      	ldr	r3, [pc, #632]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b9d      	ldr	r3, [pc, #628]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	0249      	lsls	r1, r1, #9
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xdc>
 800263c:	4b9a      	ldr	r3, [pc, #616]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b99      	ldr	r3, [pc, #612]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002642:	499a      	ldr	r1, [pc, #616]	; (80028ac <HAL_RCC_OscConfig+0x334>)
 8002644:	400a      	ands	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	4b97      	ldr	r3, [pc, #604]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b96      	ldr	r3, [pc, #600]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800264e:	4998      	ldr	r1, [pc, #608]	; (80028b0 <HAL_RCC_OscConfig+0x338>)
 8002650:	400a      	ands	r2, r1
 8002652:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d014      	beq.n	8002686 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff fcae 	bl	8001fbc <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002666:	f7ff fca9 	bl	8001fbc <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b64      	cmp	r3, #100	; 0x64
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e28c      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002678:	4b8b      	ldr	r3, [pc, #556]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	029b      	lsls	r3, r3, #10
 8002680:	4013      	ands	r3, r2
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0xee>
 8002684:	e015      	b.n	80026b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7ff fc99 	bl	8001fbc <HAL_GetTick>
 800268a:	0003      	movs	r3, r0
 800268c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002690:	f7ff fc94 	bl	8001fbc <HAL_GetTick>
 8002694:	0002      	movs	r2, r0
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e277      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a2:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	029b      	lsls	r3, r3, #10
 80026aa:	4013      	ands	r3, r2
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x118>
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2202      	movs	r2, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	d100      	bne.n	80026be <HAL_RCC_OscConfig+0x146>
 80026bc:	e069      	b.n	8002792 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026be:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	220c      	movs	r2, #12
 80026c4:	4013      	ands	r3, r2
 80026c6:	d00b      	beq.n	80026e0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026c8:	4b77      	ldr	r3, [pc, #476]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	220c      	movs	r2, #12
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d11c      	bne.n	800270e <HAL_RCC_OscConfig+0x196>
 80026d4:	4b74      	ldr	r3, [pc, #464]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	025b      	lsls	r3, r3, #9
 80026dc:	4013      	ands	r3, r2
 80026de:	d116      	bne.n	800270e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e0:	4b71      	ldr	r3, [pc, #452]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2202      	movs	r2, #2
 80026e6:	4013      	ands	r3, r2
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x17e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e24d      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b6c      	ldr	r3, [pc, #432]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	22f8      	movs	r2, #248	; 0xf8
 80026fc:	4393      	bics	r3, r2
 80026fe:	0019      	movs	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	00da      	lsls	r2, r3, #3
 8002706:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270c:	e041      	b.n	8002792 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d024      	beq.n	8002760 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002716:	4b64      	ldr	r3, [pc, #400]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800271c:	2101      	movs	r1, #1
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7ff fc4b 	bl	8001fbc <HAL_GetTick>
 8002726:	0003      	movs	r3, r0
 8002728:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272c:	f7ff fc46 	bl	8001fbc <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e229      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	4b5a      	ldr	r3, [pc, #360]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2202      	movs	r2, #2
 8002744:	4013      	ands	r3, r2
 8002746:	d0f1      	beq.n	800272c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4b57      	ldr	r3, [pc, #348]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	22f8      	movs	r2, #248	; 0xf8
 800274e:	4393      	bics	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00da      	lsls	r2, r3, #3
 8002758:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e018      	b.n	8002792 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002760:	4b51      	ldr	r3, [pc, #324]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b50      	ldr	r3, [pc, #320]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002766:	2101      	movs	r1, #1
 8002768:	438a      	bics	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff fc26 	bl	8001fbc <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7ff fc21 	bl	8001fbc <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e204      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002788:	4b47      	ldr	r3, [pc, #284]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2202      	movs	r2, #2
 800278e:	4013      	ands	r3, r2
 8002790:	d1f1      	bne.n	8002776 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2208      	movs	r2, #8
 8002798:	4013      	ands	r3, r2
 800279a:	d036      	beq.n	800280a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d019      	beq.n	80027d8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a4:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80027a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a8:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	430a      	orrs	r2, r1
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7ff fc04 	bl	8001fbc <HAL_GetTick>
 80027b4:	0003      	movs	r3, r0
 80027b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ba:	f7ff fbff 	bl	8001fbc <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e1e2      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	2202      	movs	r2, #2
 80027d2:	4013      	ands	r3, r2
 80027d4:	d0f1      	beq.n	80027ba <HAL_RCC_OscConfig+0x242>
 80027d6:	e018      	b.n	800280a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d8:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80027da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027dc:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 80027de:	2101      	movs	r1, #1
 80027e0:	438a      	bics	r2, r1
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e4:	f7ff fbea 	bl	8001fbc <HAL_GetTick>
 80027e8:	0003      	movs	r3, r0
 80027ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ee:	f7ff fbe5 	bl	8001fbc <HAL_GetTick>
 80027f2:	0002      	movs	r2, r0
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1c8      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002800:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	2202      	movs	r2, #2
 8002806:	4013      	ands	r3, r2
 8002808:	d1f1      	bne.n	80027ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2204      	movs	r2, #4
 8002810:	4013      	ands	r3, r2
 8002812:	d100      	bne.n	8002816 <HAL_RCC_OscConfig+0x29e>
 8002814:	e0b6      	b.n	8002984 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	231f      	movs	r3, #31
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	055b      	lsls	r3, r3, #21
 8002826:	4013      	ands	r3, r2
 8002828:	d111      	bne.n	800284e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	0549      	lsls	r1, r1, #21
 8002834:	430a      	orrs	r2, r1
 8002836:	61da      	str	r2, [r3, #28]
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	055b      	lsls	r3, r3, #21
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002846:	231f      	movs	r3, #31
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_RCC_OscConfig+0x33c>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4013      	ands	r3, r2
 8002858:	d11a      	bne.n	8002890 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_RCC_OscConfig+0x33c>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_RCC_OscConfig+0x33c>)
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	0049      	lsls	r1, r1, #1
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002868:	f7ff fba8 	bl	8001fbc <HAL_GetTick>
 800286c:	0003      	movs	r3, r0
 800286e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002872:	f7ff fba3 	bl	8001fbc <HAL_GetTick>
 8002876:	0002      	movs	r2, r0
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b64      	cmp	r3, #100	; 0x64
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e186      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_OscConfig+0x33c>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4013      	ands	r3, r2
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d10f      	bne.n	80028b8 <HAL_RCC_OscConfig+0x340>
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <HAL_RCC_OscConfig+0x330>)
 800289e:	2101      	movs	r1, #1
 80028a0:	430a      	orrs	r2, r1
 80028a2:	621a      	str	r2, [r3, #32]
 80028a4:	e036      	b.n	8002914 <HAL_RCC_OscConfig+0x39c>
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40021000 	.word	0x40021000
 80028ac:	fffeffff 	.word	0xfffeffff
 80028b0:	fffbffff 	.word	0xfffbffff
 80028b4:	40007000 	.word	0x40007000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x362>
 80028c0:	4bb6      	ldr	r3, [pc, #728]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80028c2:	6a1a      	ldr	r2, [r3, #32]
 80028c4:	4bb5      	ldr	r3, [pc, #724]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80028c6:	2101      	movs	r1, #1
 80028c8:	438a      	bics	r2, r1
 80028ca:	621a      	str	r2, [r3, #32]
 80028cc:	4bb3      	ldr	r3, [pc, #716]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	4bb2      	ldr	r3, [pc, #712]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80028d2:	2104      	movs	r1, #4
 80028d4:	438a      	bics	r2, r1
 80028d6:	621a      	str	r2, [r3, #32]
 80028d8:	e01c      	b.n	8002914 <HAL_RCC_OscConfig+0x39c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x384>
 80028e2:	4bae      	ldr	r3, [pc, #696]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80028e4:	6a1a      	ldr	r2, [r3, #32]
 80028e6:	4bad      	ldr	r3, [pc, #692]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80028e8:	2104      	movs	r1, #4
 80028ea:	430a      	orrs	r2, r1
 80028ec:	621a      	str	r2, [r3, #32]
 80028ee:	4bab      	ldr	r3, [pc, #684]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80028f0:	6a1a      	ldr	r2, [r3, #32]
 80028f2:	4baa      	ldr	r3, [pc, #680]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80028f4:	2101      	movs	r1, #1
 80028f6:	430a      	orrs	r2, r1
 80028f8:	621a      	str	r2, [r3, #32]
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x39c>
 80028fc:	4ba7      	ldr	r3, [pc, #668]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	4ba6      	ldr	r3, [pc, #664]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002902:	2101      	movs	r1, #1
 8002904:	438a      	bics	r2, r1
 8002906:	621a      	str	r2, [r3, #32]
 8002908:	4ba4      	ldr	r3, [pc, #656]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 800290a:	6a1a      	ldr	r2, [r3, #32]
 800290c:	4ba3      	ldr	r3, [pc, #652]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 800290e:	2104      	movs	r1, #4
 8002910:	438a      	bics	r2, r1
 8002912:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d014      	beq.n	8002946 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291c:	f7ff fb4e 	bl	8001fbc <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e009      	b.n	800293a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7ff fb49 	bl	8001fbc <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	4a9b      	ldr	r2, [pc, #620]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e12b      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	4b98      	ldr	r3, [pc, #608]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x3ae>
 8002944:	e013      	b.n	800296e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7ff fb39 	bl	8001fbc <HAL_GetTick>
 800294a:	0003      	movs	r3, r0
 800294c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294e:	e009      	b.n	8002964 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7ff fb34 	bl	8001fbc <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	4a91      	ldr	r2, [pc, #580]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e116      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002964:	4b8d      	ldr	r3, [pc, #564]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	2202      	movs	r2, #2
 800296a:	4013      	ands	r3, r2
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800296e:	231f      	movs	r3, #31
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002978:	4b88      	ldr	r3, [pc, #544]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	4b87      	ldr	r3, [pc, #540]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 800297e:	4989      	ldr	r1, [pc, #548]	; (8002ba4 <HAL_RCC_OscConfig+0x62c>)
 8002980:	400a      	ands	r2, r1
 8002982:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2210      	movs	r2, #16
 800298a:	4013      	ands	r3, r2
 800298c:	d063      	beq.n	8002a56 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d12a      	bne.n	80029ec <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002996:	4b81      	ldr	r3, [pc, #516]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299a:	4b80      	ldr	r3, [pc, #512]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 800299c:	2104      	movs	r1, #4
 800299e:	430a      	orrs	r2, r1
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80029a2:	4b7e      	ldr	r3, [pc, #504]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80029a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a6:	4b7d      	ldr	r3, [pc, #500]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80029a8:	2101      	movs	r1, #1
 80029aa:	430a      	orrs	r2, r1
 80029ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7ff fb05 	bl	8001fbc <HAL_GetTick>
 80029b2:	0003      	movs	r3, r0
 80029b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029b8:	f7ff fb00 	bl	8001fbc <HAL_GetTick>
 80029bc:	0002      	movs	r2, r0
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0e3      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029ca:	4b74      	ldr	r3, [pc, #464]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80029cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ce:	2202      	movs	r2, #2
 80029d0:	4013      	ands	r3, r2
 80029d2:	d0f1      	beq.n	80029b8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029d4:	4b71      	ldr	r3, [pc, #452]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80029d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d8:	22f8      	movs	r2, #248	; 0xf8
 80029da:	4393      	bics	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	00da      	lsls	r2, r3, #3
 80029e4:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80029e6:	430a      	orrs	r2, r1
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ea:	e034      	b.n	8002a56 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	3305      	adds	r3, #5
 80029f2:	d111      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80029f4:	4b69      	ldr	r3, [pc, #420]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80029f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 80029fa:	2104      	movs	r1, #4
 80029fc:	438a      	bics	r2, r1
 80029fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a00:	4b66      	ldr	r3, [pc, #408]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	22f8      	movs	r2, #248	; 0xf8
 8002a06:	4393      	bics	r3, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	00da      	lsls	r2, r3, #3
 8002a10:	4b62      	ldr	r3, [pc, #392]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002a12:	430a      	orrs	r2, r1
 8002a14:	635a      	str	r2, [r3, #52]	; 0x34
 8002a16:	e01e      	b.n	8002a56 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a18:	4b60      	ldr	r3, [pc, #384]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1c:	4b5f      	ldr	r3, [pc, #380]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002a1e:	2104      	movs	r1, #4
 8002a20:	430a      	orrs	r2, r1
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a24:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a28:	4b5c      	ldr	r3, [pc, #368]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	438a      	bics	r2, r1
 8002a2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a30:	f7ff fac4 	bl	8001fbc <HAL_GetTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a3a:	f7ff fabf 	bl	8001fbc <HAL_GetTick>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0a2      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a50:	2202      	movs	r2, #2
 8002a52:	4013      	ands	r3, r2
 8002a54:	d1f1      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d100      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4e8>
 8002a5e:	e097      	b.n	8002b90 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a60:	4b4e      	ldr	r3, [pc, #312]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	220c      	movs	r2, #12
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d100      	bne.n	8002a6e <HAL_RCC_OscConfig+0x4f6>
 8002a6c:	e06b      	b.n	8002b46 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d14c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b48      	ldr	r3, [pc, #288]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002a7c:	494a      	ldr	r1, [pc, #296]	; (8002ba8 <HAL_RCC_OscConfig+0x630>)
 8002a7e:	400a      	ands	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7ff fa9b 	bl	8001fbc <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7ff fa96 	bl	8001fbc <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e079      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	049b      	lsls	r3, r3, #18
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aaa:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	220f      	movs	r2, #15
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002aba:	430a      	orrs	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002abe:	4b37      	ldr	r3, [pc, #220]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4a3a      	ldr	r2, [pc, #232]	; (8002bac <HAL_RCC_OscConfig+0x634>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	0449      	lsls	r1, r1, #17
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7ff fa69 	bl	8001fbc <HAL_GetTick>
 8002aea:	0003      	movs	r3, r0
 8002aec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af0:	f7ff fa64 	bl	8001fbc <HAL_GetTick>
 8002af4:	0002      	movs	r2, r0
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e047      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	049b      	lsls	r3, r3, #18
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x578>
 8002b0e:	e03f      	b.n	8002b90 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002b16:	4924      	ldr	r1, [pc, #144]	; (8002ba8 <HAL_RCC_OscConfig+0x630>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7ff fa4e 	bl	8001fbc <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b26:	f7ff fa49 	bl	8001fbc <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e02c      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	049b      	lsls	r3, r3, #18
 8002b40:	4013      	ands	r3, r2
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x5ae>
 8002b44:	e024      	b.n	8002b90 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e01f      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_RCC_OscConfig+0x624>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	025b      	lsls	r3, r3, #9
 8002b64:	401a      	ands	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d10e      	bne.n	8002b8c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	220f      	movs	r2, #15
 8002b72:	401a      	ands	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d107      	bne.n	8002b8c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	23f0      	movs	r3, #240	; 0xf0
 8002b80:	039b      	lsls	r3, r3, #14
 8002b82:	401a      	ands	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b008      	add	sp, #32
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	00001388 	.word	0x00001388
 8002ba4:	efffffff 	.word	0xefffffff
 8002ba8:	feffffff 	.word	0xfeffffff
 8002bac:	ffc2ffff 	.word	0xffc2ffff

08002bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0b3      	b.n	8002d2c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b5b      	ldr	r3, [pc, #364]	; (8002d34 <HAL_RCC_ClockConfig+0x184>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d911      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b58      	ldr	r3, [pc, #352]	; (8002d34 <HAL_RCC_ClockConfig+0x184>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4393      	bics	r3, r2
 8002bda:	0019      	movs	r1, r3
 8002bdc:	4b55      	ldr	r3, [pc, #340]	; (8002d34 <HAL_RCC_ClockConfig+0x184>)
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be4:	4b53      	ldr	r3, [pc, #332]	; (8002d34 <HAL_RCC_ClockConfig+0x184>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e09a      	b.n	8002d2c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d015      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2204      	movs	r2, #4
 8002c06:	4013      	ands	r3, r2
 8002c08:	d006      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c0a:	4b4b      	ldr	r3, [pc, #300]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002c10:	21e0      	movs	r1, #224	; 0xe0
 8002c12:	00c9      	lsls	r1, r1, #3
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c18:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	22f0      	movs	r2, #240	; 0xf0
 8002c1e:	4393      	bics	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	4b44      	ldr	r3, [pc, #272]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2201      	movs	r2, #1
 8002c32:	4013      	ands	r3, r2
 8002c34:	d040      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	029b      	lsls	r3, r3, #10
 8002c46:	4013      	ands	r3, r2
 8002c48:	d114      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06e      	b.n	8002d2c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	049b      	lsls	r3, r3, #18
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d108      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e062      	b.n	8002d2c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c66:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e05b      	b.n	8002d2c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c74:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	4393      	bics	r3, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002c84:	430a      	orrs	r2, r1
 8002c86:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c88:	f7ff f998 	bl	8001fbc <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c90:	e009      	b.n	8002ca6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c92:	f7ff f993 	bl	8001fbc <HAL_GetTick>
 8002c96:	0002      	movs	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <HAL_RCC_ClockConfig+0x18c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e042      	b.n	8002d2c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	220c      	movs	r2, #12
 8002cac:	401a      	ands	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1ec      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <HAL_RCC_ClockConfig+0x184>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d211      	bcs.n	8002cea <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_RCC_ClockConfig+0x184>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4393      	bics	r3, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <HAL_RCC_ClockConfig+0x184>)
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_RCC_ClockConfig+0x184>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e020      	b.n	8002d2c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a11      	ldr	r2, [pc, #68]	; (8002d40 <HAL_RCC_ClockConfig+0x190>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d08:	f000 f820 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8002d0c:	0001      	movs	r1, r0
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_RCC_ClockConfig+0x188>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	220f      	movs	r2, #15
 8002d16:	4013      	ands	r3, r2
 8002d18:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <HAL_RCC_ClockConfig+0x194>)
 8002d1a:	5cd3      	ldrb	r3, [r2, r3]
 8002d1c:	000a      	movs	r2, r1
 8002d1e:	40da      	lsrs	r2, r3
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_RCC_ClockConfig+0x198>)
 8002d22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7ff f903 	bl	8001f30 <HAL_InitTick>
  
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b004      	add	sp, #16
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40022000 	.word	0x40022000
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	00001388 	.word	0x00001388
 8002d40:	fffff8ff 	.word	0xfffff8ff
 8002d44:	080048a0 	.word	0x080048a0
 8002d48:	20000000 	.word	0x20000000

08002d4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b08f      	sub	sp, #60	; 0x3c
 8002d50:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d52:	2314      	movs	r3, #20
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	4a2b      	ldr	r2, [pc, #172]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d5a:	c313      	stmia	r3!, {r0, r1, r4}
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d66:	c313      	stmia	r3!, {r0, r1, r4}
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d70:	2300      	movs	r3, #0
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d74:	2300      	movs	r3, #0
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002d80:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d88:	220c      	movs	r2, #12
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d002      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x4a>
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d003      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x50>
 8002d94:	e02d      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d9a:	e02d      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9e:	0c9b      	lsrs	r3, r3, #18
 8002da0:	220f      	movs	r2, #15
 8002da2:	4013      	ands	r3, r2
 8002da4:	2214      	movs	r2, #20
 8002da6:	18ba      	adds	r2, r7, r2
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002dac:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	220f      	movs	r2, #15
 8002db2:	4013      	ands	r3, r2
 8002db4:	1d3a      	adds	r2, r7, #4
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	025b      	lsls	r3, r3, #9
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc6:	4812      	ldr	r0, [pc, #72]	; (8002e10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dc8:	f7fd f99e 	bl	8000108 <__udivsi3>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	001a      	movs	r2, r3
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	4353      	muls	r3, r2
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd6:	e009      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dda:	000a      	movs	r2, r1
 8002ddc:	0152      	lsls	r2, r2, #5
 8002dde:	1a52      	subs	r2, r2, r1
 8002de0:	0193      	lsls	r3, r2, #6
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	185b      	adds	r3, r3, r1
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002df0:	e002      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002df2:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002df6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b00f      	add	sp, #60	; 0x3c
 8002e00:	bd90      	pop	{r4, r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	08004840 	.word	0x08004840
 8002e08:	08004850 	.word	0x08004850
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	007a1200 	.word	0x007a1200

08002e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e18:	4b02      	ldr	r3, [pc, #8]	; (8002e24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	20000000 	.word	0x20000000

08002e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002e2c:	f7ff fff2 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002e30:	0001      	movs	r1, r0
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	2207      	movs	r2, #7
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	40d9      	lsrs	r1, r3
 8002e42:	000b      	movs	r3, r1
}    
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	080048b0 	.word	0x080048b0

08002e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	025b      	lsls	r3, r3, #9
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d100      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e70:	e08f      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002e72:	2317      	movs	r3, #23
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7a:	4b5f      	ldr	r3, [pc, #380]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	055b      	lsls	r3, r3, #21
 8002e82:	4013      	ands	r3, r2
 8002e84:	d111      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	4b5c      	ldr	r3, [pc, #368]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	0549      	lsls	r1, r1, #21
 8002e90:	430a      	orrs	r2, r1
 8002e92:	61da      	str	r2, [r3, #28]
 8002e94:	4b58      	ldr	r3, [pc, #352]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	055b      	lsls	r3, r3, #21
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea2:	2317      	movs	r3, #23
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b54      	ldr	r3, [pc, #336]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d11a      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb6:	4b51      	ldr	r3, [pc, #324]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b50      	ldr	r3, [pc, #320]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	0049      	lsls	r1, r1, #1
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec4:	f7ff f87a 	bl	8001fbc <HAL_GetTick>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ece:	f7ff f875 	bl	8001fbc <HAL_GetTick>
 8002ed2:	0002      	movs	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b64      	cmp	r3, #100	; 0x64
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e087      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	4b46      	ldr	r3, [pc, #280]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eec:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	23c0      	movs	r3, #192	; 0xc0
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d034      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	23c0      	movs	r3, #192	; 0xc0
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4013      	ands	r3, r2
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d02c      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f0e:	4b3a      	ldr	r3, [pc, #232]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a3b      	ldr	r2, [pc, #236]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f18:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f1a:	6a1a      	ldr	r2, [r3, #32]
 8002f1c:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	0249      	lsls	r1, r1, #9
 8002f22:	430a      	orrs	r2, r1
 8002f24:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f26:	4b34      	ldr	r3, [pc, #208]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	4b33      	ldr	r3, [pc, #204]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f2c:	4935      	ldr	r1, [pc, #212]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f2e:	400a      	ands	r2, r1
 8002f30:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f32:	4b31      	ldr	r3, [pc, #196]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7ff f83c 	bl	8001fbc <HAL_GetTick>
 8002f44:	0003      	movs	r3, r0
 8002f46:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f48:	e009      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7ff f837 	bl	8001fbc <HAL_GetTick>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	4a2c      	ldr	r2, [pc, #176]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e048      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	2202      	movs	r2, #2
 8002f64:	4013      	ands	r3, r2
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f68:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a24      	ldr	r2, [pc, #144]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	0019      	movs	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f7c:	2317      	movs	r3, #23
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f86:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f8c:	491f      	ldr	r1, [pc, #124]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f8e:	400a      	ands	r2, r1
 8002f90:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2201      	movs	r2, #1
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f9c:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	4393      	bics	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fac:	430a      	orrs	r2, r1
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fba:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	2240      	movs	r2, #64	; 0x40
 8002fe0:	4393      	bics	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fea:	430a      	orrs	r2, r1
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b006      	add	sp, #24
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40007000 	.word	0x40007000
 8003000:	fffffcff 	.word	0xfffffcff
 8003004:	fffeffff 	.word	0xfffeffff
 8003008:	00001388 	.word	0x00001388
 800300c:	efffffff 	.word	0xefffffff

08003010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e01e      	b.n	8003060 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	223d      	movs	r2, #61	; 0x3d
 8003026:	5c9b      	ldrb	r3, [r3, r2]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	223c      	movs	r2, #60	; 0x3c
 8003032:	2100      	movs	r1, #0
 8003034:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f7fe fd9b 	bl	8001b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	223d      	movs	r2, #61	; 0x3d
 8003042:	2102      	movs	r1, #2
 8003044:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	0019      	movs	r1, r3
 8003050:	0010      	movs	r0, r2
 8003052:	f000 f9f7 	bl	8003444 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	223d      	movs	r2, #61	; 0x3d
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e01e      	b.n	80030b8 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	223d      	movs	r2, #61	; 0x3d
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d107      	bne.n	8003096 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	223c      	movs	r2, #60	; 0x3c
 800308a:	2100      	movs	r1, #0
 800308c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f7fe fd9f 	bl	8001bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	223d      	movs	r2, #61	; 0x3d
 800309a:	2102      	movs	r1, #2
 800309c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	0019      	movs	r1, r3
 80030a8:	0010      	movs	r0, r2
 80030aa:	f000 f9cb 	bl	8003444 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	223d      	movs	r2, #61	; 0x3d
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6839      	ldr	r1, [r7, #0]
 80030d0:	2201      	movs	r2, #1
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 fccc 	bl	8003a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1a      	ldr	r2, [pc, #104]	; (8003148 <HAL_TIM_PWM_Start+0x88>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00e      	beq.n	8003100 <HAL_TIM_PWM_Start+0x40>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_TIM_PWM_Start+0x8c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_TIM_PWM_Start+0x40>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a17      	ldr	r2, [pc, #92]	; (8003150 <HAL_TIM_PWM_Start+0x90>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <HAL_TIM_PWM_Start+0x40>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a16      	ldr	r2, [pc, #88]	; (8003154 <HAL_TIM_PWM_Start+0x94>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d101      	bne.n	8003104 <HAL_TIM_PWM_Start+0x44>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_TIM_PWM_Start+0x46>
 8003104:	2300      	movs	r3, #0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	0209      	lsls	r1, r1, #8
 8003118:	430a      	orrs	r2, r1
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2207      	movs	r2, #7
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b06      	cmp	r3, #6
 800312c:	d007      	beq.n	800313e <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b004      	add	sp, #16
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40014000 	.word	0x40014000
 8003150:	40014400 	.word	0x40014400
 8003154:	40014800 	.word	0x40014800

08003158 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	223c      	movs	r2, #60	; 0x3c
 8003168:	5c9b      	ldrb	r3, [r3, r2]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800316e:	2302      	movs	r3, #2
 8003170:	e0a4      	b.n	80032bc <HAL_TIM_PWM_ConfigChannel+0x164>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	223c      	movs	r2, #60	; 0x3c
 8003176:	2101      	movs	r1, #1
 8003178:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	223d      	movs	r2, #61	; 0x3d
 800317e:	2102      	movs	r1, #2
 8003180:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d029      	beq.n	80031dc <HAL_TIM_PWM_ConfigChannel+0x84>
 8003188:	d802      	bhi.n	8003190 <HAL_TIM_PWM_ConfigChannel+0x38>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800318e:	e08c      	b.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8003190:	2b08      	cmp	r3, #8
 8003192:	d046      	beq.n	8003222 <HAL_TIM_PWM_ConfigChannel+0xca>
 8003194:	2b0c      	cmp	r3, #12
 8003196:	d065      	beq.n	8003264 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8003198:	e087      	b.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	0011      	movs	r1, r2
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 f9ce 	bl	8003544 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2108      	movs	r1, #8
 80031b4:	430a      	orrs	r2, r1
 80031b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2104      	movs	r1, #4
 80031c4:	438a      	bics	r2, r1
 80031c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6999      	ldr	r1, [r3, #24]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	619a      	str	r2, [r3, #24]
      break;
 80031da:	e066      	b.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	0011      	movs	r1, r2
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 fa35 	bl	8003654 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2180      	movs	r1, #128	; 0x80
 80031f6:	0109      	lsls	r1, r1, #4
 80031f8:	430a      	orrs	r2, r1
 80031fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	492f      	ldr	r1, [pc, #188]	; (80032c4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003208:	400a      	ands	r2, r1
 800320a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6999      	ldr	r1, [r3, #24]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	021a      	lsls	r2, r3, #8
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	619a      	str	r2, [r3, #24]
      break;
 8003220:	e043      	b.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	0011      	movs	r1, r2
 800322a:	0018      	movs	r0, r3
 800322c:	f000 fa96 	bl	800375c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2108      	movs	r1, #8
 800323c:	430a      	orrs	r2, r1
 800323e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2104      	movs	r1, #4
 800324c:	438a      	bics	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69d9      	ldr	r1, [r3, #28]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	61da      	str	r2, [r3, #28]
      break;
 8003262:	e022      	b.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	0011      	movs	r1, r2
 800326c:	0018      	movs	r0, r3
 800326e:	f000 fafb 	bl	8003868 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	0109      	lsls	r1, r1, #4
 8003280:	430a      	orrs	r2, r1
 8003282:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	490d      	ldr	r1, [pc, #52]	; (80032c4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003290:	400a      	ands	r2, r1
 8003292:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69d9      	ldr	r1, [r3, #28]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	021a      	lsls	r2, r3, #8
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	61da      	str	r2, [r3, #28]
      break;
 80032a8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	223d      	movs	r2, #61	; 0x3d
 80032ae:	2101      	movs	r1, #1
 80032b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	223c      	movs	r2, #60	; 0x3c
 80032b6:	2100      	movs	r1, #0
 80032b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b004      	add	sp, #16
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	fffffbff 	.word	0xfffffbff

080032c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	223c      	movs	r2, #60	; 0x3c
 80032d6:	5c9b      	ldrb	r3, [r3, r2]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_TIM_ConfigClockSource+0x18>
 80032dc:	2302      	movs	r3, #2
 80032de:	e0ab      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x170>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	223c      	movs	r2, #60	; 0x3c
 80032e4:	2101      	movs	r1, #1
 80032e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	223d      	movs	r2, #61	; 0x3d
 80032ec:	2102      	movs	r1, #2
 80032ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2277      	movs	r2, #119	; 0x77
 80032fc:	4393      	bics	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a4f      	ldr	r2, [pc, #316]	; (8003440 <HAL_TIM_ConfigClockSource+0x178>)
 8003304:	4013      	ands	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d100      	bne.n	800331a <HAL_TIM_ConfigClockSource+0x52>
 8003318:	e06b      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x12a>
 800331a:	d80e      	bhi.n	800333a <HAL_TIM_ConfigClockSource+0x72>
 800331c:	2b10      	cmp	r3, #16
 800331e:	d100      	bne.n	8003322 <HAL_TIM_ConfigClockSource+0x5a>
 8003320:	e077      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x14a>
 8003322:	d803      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x64>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d100      	bne.n	800332a <HAL_TIM_ConfigClockSource+0x62>
 8003328:	e073      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800332a:	e07c      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800332c:	2b20      	cmp	r3, #32
 800332e:	d100      	bne.n	8003332 <HAL_TIM_ConfigClockSource+0x6a>
 8003330:	e06f      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x14a>
 8003332:	2b30      	cmp	r3, #48	; 0x30
 8003334:	d100      	bne.n	8003338 <HAL_TIM_ConfigClockSource+0x70>
 8003336:	e06c      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003338:	e075      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800333a:	2b70      	cmp	r3, #112	; 0x70
 800333c:	d00e      	beq.n	800335c <HAL_TIM_ConfigClockSource+0x94>
 800333e:	d804      	bhi.n	800334a <HAL_TIM_ConfigClockSource+0x82>
 8003340:	2b50      	cmp	r3, #80	; 0x50
 8003342:	d036      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0xea>
 8003344:	2b60      	cmp	r3, #96	; 0x60
 8003346:	d044      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003348:	e06d      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	0152      	lsls	r2, r2, #5
 800334e:	4293      	cmp	r3, r2
 8003350:	d068      	beq.n	8003424 <HAL_TIM_ConfigClockSource+0x15c>
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	0192      	lsls	r2, r2, #6
 8003356:	4293      	cmp	r3, r2
 8003358:	d017      	beq.n	800338a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800335a:	e064      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6899      	ldr	r1, [r3, #8]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f000 fb60 	bl	8003a30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2277      	movs	r2, #119	; 0x77
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	609a      	str	r2, [r3, #8]
      break;
 8003388:	e04d      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6899      	ldr	r1, [r3, #8]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f000 fb49 	bl	8003a30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	01c9      	lsls	r1, r1, #7
 80033ac:	430a      	orrs	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]
      break;
 80033b0:	e039      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	001a      	movs	r2, r3
 80033c0:	f000 fabc 	bl	800393c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2150      	movs	r1, #80	; 0x50
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 fb16 	bl	80039fc <TIM_ITRx_SetConfig>
      break;
 80033d0:	e029      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	001a      	movs	r2, r3
 80033e0:	f000 fada 	bl	8003998 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2160      	movs	r1, #96	; 0x60
 80033ea:	0018      	movs	r0, r3
 80033ec:	f000 fb06 	bl	80039fc <TIM_ITRx_SetConfig>
      break;
 80033f0:	e019      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	001a      	movs	r2, r3
 8003400:	f000 fa9c 	bl	800393c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2140      	movs	r1, #64	; 0x40
 800340a:	0018      	movs	r0, r3
 800340c:	f000 faf6 	bl	80039fc <TIM_ITRx_SetConfig>
      break;
 8003410:	e009      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	0019      	movs	r1, r3
 800341c:	0010      	movs	r0, r2
 800341e:	f000 faed 	bl	80039fc <TIM_ITRx_SetConfig>
      break;
 8003422:	e000      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003424:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	223d      	movs	r2, #61	; 0x3d
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	223c      	movs	r2, #60	; 0x3c
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b004      	add	sp, #16
 800343e:	bd80      	pop	{r7, pc}
 8003440:	ffff00ff 	.word	0xffff00ff

08003444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a34      	ldr	r2, [pc, #208]	; (8003528 <TIM_Base_SetConfig+0xe4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d008      	beq.n	800346e <TIM_Base_SetConfig+0x2a>
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	05db      	lsls	r3, r3, #23
 8003462:	429a      	cmp	r2, r3
 8003464:	d003      	beq.n	800346e <TIM_Base_SetConfig+0x2a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a30      	ldr	r2, [pc, #192]	; (800352c <TIM_Base_SetConfig+0xe8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d108      	bne.n	8003480 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2270      	movs	r2, #112	; 0x70
 8003472:	4393      	bics	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a29      	ldr	r2, [pc, #164]	; (8003528 <TIM_Base_SetConfig+0xe4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d018      	beq.n	80034ba <TIM_Base_SetConfig+0x76>
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	05db      	lsls	r3, r3, #23
 800348e:	429a      	cmp	r2, r3
 8003490:	d013      	beq.n	80034ba <TIM_Base_SetConfig+0x76>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a25      	ldr	r2, [pc, #148]	; (800352c <TIM_Base_SetConfig+0xe8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00f      	beq.n	80034ba <TIM_Base_SetConfig+0x76>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a24      	ldr	r2, [pc, #144]	; (8003530 <TIM_Base_SetConfig+0xec>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00b      	beq.n	80034ba <TIM_Base_SetConfig+0x76>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a23      	ldr	r2, [pc, #140]	; (8003534 <TIM_Base_SetConfig+0xf0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d007      	beq.n	80034ba <TIM_Base_SetConfig+0x76>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a22      	ldr	r2, [pc, #136]	; (8003538 <TIM_Base_SetConfig+0xf4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_Base_SetConfig+0x76>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a21      	ldr	r2, [pc, #132]	; (800353c <TIM_Base_SetConfig+0xf8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d108      	bne.n	80034cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a20      	ldr	r2, [pc, #128]	; (8003540 <TIM_Base_SetConfig+0xfc>)
 80034be:	4013      	ands	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	4393      	bics	r3, r2
 80034d2:	001a      	movs	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <TIM_Base_SetConfig+0xe4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00b      	beq.n	8003512 <TIM_Base_SetConfig+0xce>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <TIM_Base_SetConfig+0xf0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <TIM_Base_SetConfig+0xce>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a0c      	ldr	r2, [pc, #48]	; (8003538 <TIM_Base_SetConfig+0xf4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d003      	beq.n	8003512 <TIM_Base_SetConfig+0xce>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a0b      	ldr	r2, [pc, #44]	; (800353c <TIM_Base_SetConfig+0xf8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d103      	bne.n	800351a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	615a      	str	r2, [r3, #20]
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b004      	add	sp, #16
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40000400 	.word	0x40000400
 8003530:	40002000 	.word	0x40002000
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400
 800353c:	40014800 	.word	0x40014800
 8003540:	fffffcff 	.word	0xfffffcff

08003544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	2201      	movs	r2, #1
 8003554:	4393      	bics	r3, r2
 8003556:	001a      	movs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2270      	movs	r2, #112	; 0x70
 8003572:	4393      	bics	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2203      	movs	r2, #3
 800357a:	4393      	bics	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2202      	movs	r2, #2
 800358c:	4393      	bics	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a27      	ldr	r2, [pc, #156]	; (800363c <TIM_OC1_SetConfig+0xf8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00b      	beq.n	80035ba <TIM_OC1_SetConfig+0x76>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a26      	ldr	r2, [pc, #152]	; (8003640 <TIM_OC1_SetConfig+0xfc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <TIM_OC1_SetConfig+0x76>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a25      	ldr	r2, [pc, #148]	; (8003644 <TIM_OC1_SetConfig+0x100>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d003      	beq.n	80035ba <TIM_OC1_SetConfig+0x76>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a24      	ldr	r2, [pc, #144]	; (8003648 <TIM_OC1_SetConfig+0x104>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10c      	bne.n	80035d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2208      	movs	r2, #8
 80035be:	4393      	bics	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2204      	movs	r2, #4
 80035d0:	4393      	bics	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a19      	ldr	r2, [pc, #100]	; (800363c <TIM_OC1_SetConfig+0xf8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00b      	beq.n	80035f4 <TIM_OC1_SetConfig+0xb0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a18      	ldr	r2, [pc, #96]	; (8003640 <TIM_OC1_SetConfig+0xfc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d007      	beq.n	80035f4 <TIM_OC1_SetConfig+0xb0>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a17      	ldr	r2, [pc, #92]	; (8003644 <TIM_OC1_SetConfig+0x100>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_OC1_SetConfig+0xb0>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a16      	ldr	r2, [pc, #88]	; (8003648 <TIM_OC1_SetConfig+0x104>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d111      	bne.n	8003618 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4a15      	ldr	r2, [pc, #84]	; (800364c <TIM_OC1_SetConfig+0x108>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4a14      	ldr	r2, [pc, #80]	; (8003650 <TIM_OC1_SetConfig+0x10c>)
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	46bd      	mov	sp, r7
 8003636:	b006      	add	sp, #24
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40014000 	.word	0x40014000
 8003644:	40014400 	.word	0x40014400
 8003648:	40014800 	.word	0x40014800
 800364c:	fffffeff 	.word	0xfffffeff
 8003650:	fffffdff 	.word	0xfffffdff

08003654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	2210      	movs	r2, #16
 8003664:	4393      	bics	r3, r2
 8003666:	001a      	movs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a2e      	ldr	r2, [pc, #184]	; (800373c <TIM_OC2_SetConfig+0xe8>)
 8003682:	4013      	ands	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4a2d      	ldr	r2, [pc, #180]	; (8003740 <TIM_OC2_SetConfig+0xec>)
 800368a:	4013      	ands	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2220      	movs	r2, #32
 800369e:	4393      	bics	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a24      	ldr	r2, [pc, #144]	; (8003744 <TIM_OC2_SetConfig+0xf0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10d      	bne.n	80036d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	4393      	bics	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2240      	movs	r2, #64	; 0x40
 80036ce:	4393      	bics	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <TIM_OC2_SetConfig+0xf0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00b      	beq.n	80036f2 <TIM_OC2_SetConfig+0x9e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1a      	ldr	r2, [pc, #104]	; (8003748 <TIM_OC2_SetConfig+0xf4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d007      	beq.n	80036f2 <TIM_OC2_SetConfig+0x9e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a19      	ldr	r2, [pc, #100]	; (800374c <TIM_OC2_SetConfig+0xf8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d003      	beq.n	80036f2 <TIM_OC2_SetConfig+0x9e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a18      	ldr	r2, [pc, #96]	; (8003750 <TIM_OC2_SetConfig+0xfc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d113      	bne.n	800371a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <TIM_OC2_SetConfig+0x100>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4a16      	ldr	r2, [pc, #88]	; (8003758 <TIM_OC2_SetConfig+0x104>)
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	621a      	str	r2, [r3, #32]
}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b006      	add	sp, #24
 800373a:	bd80      	pop	{r7, pc}
 800373c:	ffff8fff 	.word	0xffff8fff
 8003740:	fffffcff 	.word	0xfffffcff
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400
 8003750:	40014800 	.word	0x40014800
 8003754:	fffffbff 	.word	0xfffffbff
 8003758:	fffff7ff 	.word	0xfffff7ff

0800375c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	4a35      	ldr	r2, [pc, #212]	; (8003840 <TIM_OC3_SetConfig+0xe4>)
 800376c:	401a      	ands	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2270      	movs	r2, #112	; 0x70
 8003788:	4393      	bics	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2203      	movs	r2, #3
 8003790:	4393      	bics	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	4a28      	ldr	r2, [pc, #160]	; (8003844 <TIM_OC3_SetConfig+0xe8>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a24      	ldr	r2, [pc, #144]	; (8003848 <TIM_OC3_SetConfig+0xec>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10d      	bne.n	80037d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	4a23      	ldr	r2, [pc, #140]	; (800384c <TIM_OC3_SetConfig+0xf0>)
 80037be:	4013      	ands	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	4a1f      	ldr	r2, [pc, #124]	; (8003850 <TIM_OC3_SetConfig+0xf4>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <TIM_OC3_SetConfig+0xec>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00b      	beq.n	80037f6 <TIM_OC3_SetConfig+0x9a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a1c      	ldr	r2, [pc, #112]	; (8003854 <TIM_OC3_SetConfig+0xf8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <TIM_OC3_SetConfig+0x9a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a1b      	ldr	r2, [pc, #108]	; (8003858 <TIM_OC3_SetConfig+0xfc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <TIM_OC3_SetConfig+0x9a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1a      	ldr	r2, [pc, #104]	; (800385c <TIM_OC3_SetConfig+0x100>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d113      	bne.n	800381e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <TIM_OC3_SetConfig+0x104>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <TIM_OC3_SetConfig+0x108>)
 8003802:	4013      	ands	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	621a      	str	r2, [r3, #32]
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b006      	add	sp, #24
 800383e:	bd80      	pop	{r7, pc}
 8003840:	fffffeff 	.word	0xfffffeff
 8003844:	fffffdff 	.word	0xfffffdff
 8003848:	40012c00 	.word	0x40012c00
 800384c:	fffff7ff 	.word	0xfffff7ff
 8003850:	fffffbff 	.word	0xfffffbff
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800
 8003860:	ffffefff 	.word	0xffffefff
 8003864:	ffffdfff 	.word	0xffffdfff

08003868 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4a28      	ldr	r2, [pc, #160]	; (8003918 <TIM_OC4_SetConfig+0xb0>)
 8003878:	401a      	ands	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4a22      	ldr	r2, [pc, #136]	; (800391c <TIM_OC4_SetConfig+0xb4>)
 8003894:	4013      	ands	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a21      	ldr	r2, [pc, #132]	; (8003920 <TIM_OC4_SetConfig+0xb8>)
 800389c:	4013      	ands	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <TIM_OC4_SetConfig+0xbc>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	031b      	lsls	r3, r3, #12
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a19      	ldr	r2, [pc, #100]	; (8003928 <TIM_OC4_SetConfig+0xc0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00b      	beq.n	80038e0 <TIM_OC4_SetConfig+0x78>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a18      	ldr	r2, [pc, #96]	; (800392c <TIM_OC4_SetConfig+0xc4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <TIM_OC4_SetConfig+0x78>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a17      	ldr	r2, [pc, #92]	; (8003930 <TIM_OC4_SetConfig+0xc8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_OC4_SetConfig+0x78>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a16      	ldr	r2, [pc, #88]	; (8003934 <TIM_OC4_SetConfig+0xcc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d109      	bne.n	80038f4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	4a15      	ldr	r2, [pc, #84]	; (8003938 <TIM_OC4_SetConfig+0xd0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b006      	add	sp, #24
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	ffffefff 	.word	0xffffefff
 800391c:	ffff8fff 	.word	0xffff8fff
 8003920:	fffffcff 	.word	0xfffffcff
 8003924:	ffffdfff 	.word	0xffffdfff
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40014000 	.word	0x40014000
 8003930:	40014400 	.word	0x40014400
 8003934:	40014800 	.word	0x40014800
 8003938:	ffffbfff 	.word	0xffffbfff

0800393c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	2201      	movs	r2, #1
 8003954:	4393      	bics	r3, r2
 8003956:	001a      	movs	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	22f0      	movs	r2, #240	; 0xf0
 8003966:	4393      	bics	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	220a      	movs	r2, #10
 8003978:	4393      	bics	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	621a      	str	r2, [r3, #32]
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b006      	add	sp, #24
 8003996:	bd80      	pop	{r7, pc}

08003998 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	2210      	movs	r2, #16
 80039aa:	4393      	bics	r3, r2
 80039ac:	001a      	movs	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	4a0d      	ldr	r2, [pc, #52]	; (80039f8 <TIM_TI2_ConfigInputStage+0x60>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	031b      	lsls	r3, r3, #12
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	22a0      	movs	r2, #160	; 0xa0
 80039d4:	4393      	bics	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b006      	add	sp, #24
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	ffff0fff 	.word	0xffff0fff

080039fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2270      	movs	r2, #112	; 0x70
 8003a10:	4393      	bics	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	2207      	movs	r2, #7
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	609a      	str	r2, [r3, #8]
}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b004      	add	sp, #16
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <TIM_ETR_SetConfig+0x3c>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	021a      	lsls	r2, r3, #8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	609a      	str	r2, [r3, #8]
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b006      	add	sp, #24
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	ffff00ff 	.word	0xffff00ff

08003a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	221f      	movs	r2, #31
 8003a80:	4013      	ands	r3, r2
 8003a82:	2201      	movs	r2, #1
 8003a84:	409a      	lsls	r2, r3
 8003a86:	0013      	movs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	43d2      	mvns	r2, r2
 8003a92:	401a      	ands	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	211f      	movs	r1, #31
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4099      	lsls	r1, r3
 8003aa6:	000b      	movs	r3, r1
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b006      	add	sp, #24
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	223c      	movs	r2, #60	; 0x3c
 8003ac6:	5c9b      	ldrb	r3, [r3, r2]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e047      	b.n	8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	223c      	movs	r2, #60	; 0x3c
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	223d      	movs	r2, #61	; 0x3d
 8003adc:	2102      	movs	r1, #2
 8003ade:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2270      	movs	r2, #112	; 0x70
 8003af4:	4393      	bics	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00f      	beq.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	05db      	lsls	r3, r3, #23
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d009      	beq.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a11      	ldr	r2, [pc, #68]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d10c      	bne.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2280      	movs	r2, #128	; 0x80
 8003b38:	4393      	bics	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	223d      	movs	r2, #61	; 0x3d
 8003b52:	2101      	movs	r1, #1
 8003b54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	223c      	movs	r2, #60	; 0x3c
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b004      	add	sp, #16
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40014000 	.word	0x40014000

08003b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	223c      	movs	r2, #60	; 0x3c
 8003b86:	5c9b      	ldrb	r3, [r3, r2]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e03e      	b.n	8003c0e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	223c      	movs	r2, #60	; 0x3c
 8003b94:	2101      	movs	r1, #1
 8003b96:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	22ff      	movs	r2, #255	; 0xff
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003bac:	401a      	ands	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003bba:	401a      	ands	r2, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003bc8:	401a      	ands	r2, r3
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003be4:	401a      	ands	r2, r3
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a0e      	ldr	r2, [pc, #56]	; (8003c2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	223c      	movs	r2, #60	; 0x3c
 8003c08:	2100      	movs	r1, #0
 8003c0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b004      	add	sp, #16
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	fffffcff 	.word	0xfffffcff
 8003c1c:	fffffbff 	.word	0xfffffbff
 8003c20:	fffff7ff 	.word	0xfffff7ff
 8003c24:	ffffefff 	.word	0xffffefff
 8003c28:	ffffdfff 	.word	0xffffdfff
 8003c2c:	ffffbfff 	.word	0xffffbfff

08003c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e044      	b.n	8003ccc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d107      	bne.n	8003c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2270      	movs	r2, #112	; 0x70
 8003c4e:	2100      	movs	r1, #0
 8003c50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f7fe f89b 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2224      	movs	r2, #36	; 0x24
 8003c5e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	438a      	bics	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f000 fa54 	bl	8004120 <UART_SetConfig>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e024      	b.n	8003ccc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f000 fbcd 	bl	800442c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	490d      	ldr	r1, [pc, #52]	; (8003cd4 <HAL_UART_Init+0xa4>)
 8003c9e:	400a      	ands	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	212a      	movs	r1, #42	; 0x2a
 8003cae:	438a      	bics	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 fc65 	bl	8004594 <UART_CheckIdleState>
 8003cca:	0003      	movs	r3, r0
}
 8003ccc:	0018      	movs	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	ffffb7ff 	.word	0xffffb7ff

08003cd8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	1dbb      	adds	r3, r7, #6
 8003ce6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d000      	beq.n	8003cf2 <HAL_UART_Receive+0x1a>
 8003cf0:	e0c2      	b.n	8003e78 <HAL_UART_Receive+0x1a0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_UART_Receive+0x28>
 8003cf8:	1dbb      	adds	r3, r7, #6
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0ba      	b.n	8003e7a <HAL_UART_Receive+0x1a2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	015b      	lsls	r3, r3, #5
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d109      	bne.n	8003d24 <HAL_UART_Receive+0x4c>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d105      	bne.n	8003d24 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d001      	beq.n	8003d24 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0aa      	b.n	8003e7a <HAL_UART_Receive+0x1a2>
      }
    }

    __HAL_LOCK(huart);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2270      	movs	r2, #112	; 0x70
 8003d28:	5c9b      	ldrb	r3, [r3, r2]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Receive+0x5a>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0a3      	b.n	8003e7a <HAL_UART_Receive+0x1a2>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2270      	movs	r2, #112	; 0x70
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2222      	movs	r2, #34	; 0x22
 8003d44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d46:	f7fe f939 	bl	8001fbc <HAL_GetTick>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1dba      	adds	r2, r7, #6
 8003d52:	2158      	movs	r1, #88	; 0x58
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1dba      	adds	r2, r7, #6
 8003d5c:	215a      	movs	r1, #90	; 0x5a
 8003d5e:	8812      	ldrh	r2, [r2, #0]
 8003d60:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	015b      	lsls	r3, r3, #5
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d10d      	bne.n	8003d8a <HAL_UART_Receive+0xb2>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d104      	bne.n	8003d80 <HAL_UART_Receive+0xa8>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	225c      	movs	r2, #92	; 0x5c
 8003d7a:	4942      	ldr	r1, [pc, #264]	; (8003e84 <HAL_UART_Receive+0x1ac>)
 8003d7c:	5299      	strh	r1, [r3, r2]
 8003d7e:	e01a      	b.n	8003db6 <HAL_UART_Receive+0xde>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	225c      	movs	r2, #92	; 0x5c
 8003d84:	21ff      	movs	r1, #255	; 0xff
 8003d86:	5299      	strh	r1, [r3, r2]
 8003d88:	e015      	b.n	8003db6 <HAL_UART_Receive+0xde>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10d      	bne.n	8003dae <HAL_UART_Receive+0xd6>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d104      	bne.n	8003da4 <HAL_UART_Receive+0xcc>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	225c      	movs	r2, #92	; 0x5c
 8003d9e:	21ff      	movs	r1, #255	; 0xff
 8003da0:	5299      	strh	r1, [r3, r2]
 8003da2:	e008      	b.n	8003db6 <HAL_UART_Receive+0xde>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	225c      	movs	r2, #92	; 0x5c
 8003da8:	217f      	movs	r1, #127	; 0x7f
 8003daa:	5299      	strh	r1, [r3, r2]
 8003dac:	e003      	b.n	8003db6 <HAL_UART_Receive+0xde>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	225c      	movs	r2, #92	; 0x5c
 8003db2:	2100      	movs	r1, #0
 8003db4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003db6:	2312      	movs	r3, #18
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	215c      	movs	r1, #92	; 0x5c
 8003dbe:	5a52      	ldrh	r2, [r2, r1]
 8003dc0:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	015b      	lsls	r3, r3, #5
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d108      	bne.n	8003de0 <HAL_UART_Receive+0x108>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	e003      	b.n	8003de8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003de8:	e037      	b.n	8003e5a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	0013      	movs	r3, r2
 8003df4:	2200      	movs	r2, #0
 8003df6:	2120      	movs	r1, #32
 8003df8:	f000 fc12 	bl	8004620 <UART_WaitOnFlagUntilTimeout>
 8003dfc:	1e03      	subs	r3, r0, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e03a      	b.n	8003e7a <HAL_UART_Receive+0x1a2>
      }
      if (pdata8bits == NULL)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10e      	bne.n	8003e28 <HAL_UART_Receive+0x150>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2212      	movs	r2, #18
 8003e14:	18ba      	adds	r2, r7, r2
 8003e16:	8812      	ldrh	r2, [r2, #0]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	3302      	adds	r3, #2
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e00f      	b.n	8003e48 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2212      	movs	r2, #18
 8003e34:	18ba      	adds	r2, r7, r2
 8003e36:	8812      	ldrh	r2, [r2, #0]
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3301      	adds	r3, #1
 8003e46:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	225a      	movs	r2, #90	; 0x5a
 8003e4c:	5a9b      	ldrh	r3, [r3, r2]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b299      	uxth	r1, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	225a      	movs	r2, #90	; 0x5a
 8003e58:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	225a      	movs	r2, #90	; 0x5a
 8003e5e:	5a9b      	ldrh	r3, [r3, r2]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1c1      	bne.n	8003dea <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2270      	movs	r2, #112	; 0x70
 8003e70:	2100      	movs	r1, #0
 8003e72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_UART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b008      	add	sp, #32
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	000001ff 	.word	0x000001ff

08003e88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4a93      	ldr	r2, [pc, #588]	; (80040f8 <HAL_UART_IRQHandler+0x270>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d112      	bne.n	8003edc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d00a      	beq.n	8003edc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d100      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x48>
 8003ece:	e10b      	b.n	80040e8 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	0010      	movs	r0, r2
 8003ed8:	4798      	blx	r3
      }
      return;
 8003eda:	e105      	b.n	80040e8 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d100      	bne.n	8003ee4 <HAL_UART_IRQHandler+0x5c>
 8003ee2:	e0cd      	b.n	8004080 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d105      	bne.n	8003ef8 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	2390      	movs	r3, #144	; 0x90
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d100      	bne.n	8003ef8 <HAL_UART_IRQHandler+0x70>
 8003ef6:	e0c3      	b.n	8004080 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2201      	movs	r2, #1
 8003efc:	4013      	ands	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_UART_IRQHandler+0x96>
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4013      	ands	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f16:	2201      	movs	r2, #1
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2202      	movs	r2, #2
 8003f22:	4013      	ands	r3, r2
 8003f24:	d00d      	beq.n	8003f42 <HAL_UART_IRQHandler+0xba>
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2202      	movs	r2, #2
 8003f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	2204      	movs	r2, #4
 8003f46:	4013      	ands	r3, r2
 8003f48:	d00d      	beq.n	8003f66 <HAL_UART_IRQHandler+0xde>
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d009      	beq.n	8003f66 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2204      	movs	r2, #4
 8003f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5e:	2202      	movs	r2, #2
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	2208      	movs	r2, #8
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d011      	beq.n	8003f92 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2220      	movs	r2, #32
 8003f72:	4013      	ands	r3, r2
 8003f74:	d103      	bne.n	8003f7e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f7c:	d009      	beq.n	8003f92 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2208      	movs	r2, #8
 8003f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d00f      	beq.n	8003fbc <HAL_UART_IRQHandler+0x134>
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	04db      	lsls	r3, r3, #19
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d00a      	beq.n	8003fbc <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2280      	movs	r2, #128	; 0x80
 8003fac:	0112      	lsls	r2, r2, #4
 8003fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d100      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x13e>
 8003fc4:	e092      	b.n	80040ec <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d008      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	0010      	movs	r0, r2
 8003fe6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2240      	movs	r2, #64	; 0x40
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d003      	beq.n	8004004 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2228      	movs	r2, #40	; 0x28
 8004000:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004002:	d033      	beq.n	800406c <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	0018      	movs	r0, r3
 8004008:	f000 fb88 	bl	800471c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2240      	movs	r2, #64	; 0x40
 8004014:	4013      	ands	r3, r2
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	d123      	bne.n	8004062 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2140      	movs	r1, #64	; 0x40
 8004026:	438a      	bics	r2, r1
 8004028:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d012      	beq.n	8004058 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004036:	4a31      	ldr	r2, [pc, #196]	; (80040fc <HAL_UART_IRQHandler+0x274>)
 8004038:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	0018      	movs	r0, r3
 8004040:	f7fe f8c6 	bl	80021d0 <HAL_DMA_Abort_IT>
 8004044:	1e03      	subs	r3, r0, #0
 8004046:	d019      	beq.n	800407c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800404c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004052:	0018      	movs	r0, r3
 8004054:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004056:	e011      	b.n	800407c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	0018      	movs	r0, r3
 800405c:	f000 f858 	bl	8004110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e00c      	b.n	800407c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0018      	movs	r0, r3
 8004066:	f000 f853 	bl	8004110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406a:	e007      	b.n	800407c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	0018      	movs	r0, r3
 8004070:	f000 f84e 	bl	8004110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800407a:	e037      	b.n	80040ec <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407c:	46c0      	nop			; (mov r8, r8)
    return;
 800407e:	e035      	b.n	80040ec <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	035b      	lsls	r3, r3, #13
 8004086:	4013      	ands	r3, r2
 8004088:	d00e      	beq.n	80040a8 <HAL_UART_IRQHandler+0x220>
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	03db      	lsls	r3, r3, #15
 8004090:	4013      	ands	r3, r2
 8004092:	d009      	beq.n	80040a8 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	0352      	lsls	r2, r2, #13
 800409c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	0018      	movs	r0, r3
 80040a2:	f000 fb8c 	bl	80047be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040a6:	e024      	b.n	80040f2 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	2280      	movs	r2, #128	; 0x80
 80040ac:	4013      	ands	r3, r2
 80040ae:	d00d      	beq.n	80040cc <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	4013      	ands	r3, r2
 80040b6:	d009      	beq.n	80040cc <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d017      	beq.n	80040f0 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	0010      	movs	r0, r2
 80040c8:	4798      	blx	r3
    }
    return;
 80040ca:	e011      	b.n	80040f0 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2240      	movs	r2, #64	; 0x40
 80040d0:	4013      	ands	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_UART_IRQHandler+0x26a>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2240      	movs	r2, #64	; 0x40
 80040d8:	4013      	ands	r3, r2
 80040da:	d00a      	beq.n	80040f2 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 fb53 	bl	800478a <UART_EndTransmit_IT>
    return;
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	e004      	b.n	80040f2 <HAL_UART_IRQHandler+0x26a>
      return;
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	e002      	b.n	80040f2 <HAL_UART_IRQHandler+0x26a>
    return;
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	e000      	b.n	80040f2 <HAL_UART_IRQHandler+0x26a>
    return;
 80040f0:	46c0      	nop			; (mov r8, r8)
  }

}
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b008      	add	sp, #32
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	0000080f 	.word	0x0000080f
 80040fc:	0800475d 	.word	0x0800475d

08004100 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b002      	add	sp, #8
 800411e:	bd80      	pop	{r7, pc}

08004120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004128:	2300      	movs	r3, #0
 800412a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800412c:	2317      	movs	r3, #23
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	2200      	movs	r2, #0
 8004132:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4aad      	ldr	r2, [pc, #692]	; (8004408 <UART_SetConfig+0x2e8>)
 8004154:	4013      	ands	r3, r2
 8004156:	0019      	movs	r1, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4aa8      	ldr	r2, [pc, #672]	; (800440c <UART_SetConfig+0x2ec>)
 800416a:	4013      	ands	r3, r2
 800416c:	0019      	movs	r1, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a9f      	ldr	r2, [pc, #636]	; (8004410 <UART_SetConfig+0x2f0>)
 8004192:	4013      	ands	r3, r2
 8004194:	0019      	movs	r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	430a      	orrs	r2, r1
 800419e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a9b      	ldr	r2, [pc, #620]	; (8004414 <UART_SetConfig+0x2f4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d125      	bne.n	80041f6 <UART_SetConfig+0xd6>
 80041aa:	4b9b      	ldr	r3, [pc, #620]	; (8004418 <UART_SetConfig+0x2f8>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	2203      	movs	r2, #3
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d00f      	beq.n	80041d6 <UART_SetConfig+0xb6>
 80041b6:	d304      	bcc.n	80041c2 <UART_SetConfig+0xa2>
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d011      	beq.n	80041e0 <UART_SetConfig+0xc0>
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d005      	beq.n	80041cc <UART_SetConfig+0xac>
 80041c0:	e013      	b.n	80041ea <UART_SetConfig+0xca>
 80041c2:	231f      	movs	r3, #31
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	e022      	b.n	8004212 <UART_SetConfig+0xf2>
 80041cc:	231f      	movs	r3, #31
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	2202      	movs	r2, #2
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e01d      	b.n	8004212 <UART_SetConfig+0xf2>
 80041d6:	231f      	movs	r3, #31
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	2204      	movs	r2, #4
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	e018      	b.n	8004212 <UART_SetConfig+0xf2>
 80041e0:	231f      	movs	r3, #31
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	2208      	movs	r2, #8
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	e013      	b.n	8004212 <UART_SetConfig+0xf2>
 80041ea:	231f      	movs	r3, #31
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	2210      	movs	r2, #16
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	e00d      	b.n	8004212 <UART_SetConfig+0xf2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a88      	ldr	r2, [pc, #544]	; (800441c <UART_SetConfig+0x2fc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d104      	bne.n	800420a <UART_SetConfig+0xea>
 8004200:	231f      	movs	r3, #31
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
 8004208:	e003      	b.n	8004212 <UART_SetConfig+0xf2>
 800420a:	231f      	movs	r3, #31
 800420c:	18fb      	adds	r3, r7, r3
 800420e:	2210      	movs	r2, #16
 8004210:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	429a      	cmp	r2, r3
 800421c:	d000      	beq.n	8004220 <UART_SetConfig+0x100>
 800421e:	e07d      	b.n	800431c <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8004220:	231f      	movs	r3, #31
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d01c      	beq.n	8004264 <UART_SetConfig+0x144>
 800422a:	dc02      	bgt.n	8004232 <UART_SetConfig+0x112>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <UART_SetConfig+0x11c>
 8004230:	e04b      	b.n	80042ca <UART_SetConfig+0x1aa>
 8004232:	2b04      	cmp	r3, #4
 8004234:	d025      	beq.n	8004282 <UART_SetConfig+0x162>
 8004236:	2b08      	cmp	r3, #8
 8004238:	d037      	beq.n	80042aa <UART_SetConfig+0x18a>
 800423a:	e046      	b.n	80042ca <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800423c:	f7fe fdf4 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 8004240:	0003      	movs	r3, r0
 8004242:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	005a      	lsls	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	18d2      	adds	r2, r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	0019      	movs	r1, r3
 8004256:	0010      	movs	r0, r2
 8004258:	f7fb ff56 	bl	8000108 <__udivsi3>
 800425c:	0003      	movs	r3, r0
 800425e:	b29b      	uxth	r3, r3
 8004260:	61bb      	str	r3, [r7, #24]
        break;
 8004262:	e037      	b.n	80042d4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	4a6d      	ldr	r2, [pc, #436]	; (8004420 <UART_SetConfig+0x300>)
 800426c:	189a      	adds	r2, r3, r2
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	0019      	movs	r1, r3
 8004274:	0010      	movs	r0, r2
 8004276:	f7fb ff47 	bl	8000108 <__udivsi3>
 800427a:	0003      	movs	r3, r0
 800427c:	b29b      	uxth	r3, r3
 800427e:	61bb      	str	r3, [r7, #24]
        break;
 8004280:	e028      	b.n	80042d4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004282:	f7fe fd63 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8004286:	0003      	movs	r3, r0
 8004288:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	005a      	lsls	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	18d2      	adds	r2, r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	0019      	movs	r1, r3
 800429c:	0010      	movs	r0, r2
 800429e:	f7fb ff33 	bl	8000108 <__udivsi3>
 80042a2:	0003      	movs	r3, r0
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	61bb      	str	r3, [r7, #24]
        break;
 80042a8:	e014      	b.n	80042d4 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	0252      	lsls	r2, r2, #9
 80042b4:	189a      	adds	r2, r3, r2
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	0019      	movs	r1, r3
 80042bc:	0010      	movs	r0, r2
 80042be:	f7fb ff23 	bl	8000108 <__udivsi3>
 80042c2:	0003      	movs	r3, r0
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	61bb      	str	r3, [r7, #24]
        break;
 80042c8:	e004      	b.n	80042d4 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80042ca:	2317      	movs	r3, #23
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	2201      	movs	r2, #1
 80042d0:	701a      	strb	r2, [r3, #0]
        break;
 80042d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b0f      	cmp	r3, #15
 80042d8:	d91b      	bls.n	8004312 <UART_SetConfig+0x1f2>
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	4a51      	ldr	r2, [pc, #324]	; (8004424 <UART_SetConfig+0x304>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d817      	bhi.n	8004312 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	200a      	movs	r0, #10
 80042e8:	183b      	adds	r3, r7, r0
 80042ea:	210f      	movs	r1, #15
 80042ec:	438a      	bics	r2, r1
 80042ee:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2207      	movs	r2, #7
 80042f8:	4013      	ands	r3, r2
 80042fa:	b299      	uxth	r1, r3
 80042fc:	183b      	adds	r3, r7, r0
 80042fe:	183a      	adds	r2, r7, r0
 8004300:	8812      	ldrh	r2, [r2, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	183a      	adds	r2, r7, r0
 800430c:	8812      	ldrh	r2, [r2, #0]
 800430e:	60da      	str	r2, [r3, #12]
 8004310:	e06c      	b.n	80043ec <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004312:	2317      	movs	r3, #23
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e067      	b.n	80043ec <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 800431c:	231f      	movs	r3, #31
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d01b      	beq.n	800435e <UART_SetConfig+0x23e>
 8004326:	dc02      	bgt.n	800432e <UART_SetConfig+0x20e>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <UART_SetConfig+0x218>
 800432c:	e049      	b.n	80043c2 <UART_SetConfig+0x2a2>
 800432e:	2b04      	cmp	r3, #4
 8004330:	d024      	beq.n	800437c <UART_SetConfig+0x25c>
 8004332:	2b08      	cmp	r3, #8
 8004334:	d035      	beq.n	80043a2 <UART_SetConfig+0x282>
 8004336:	e044      	b.n	80043c2 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004338:	f7fe fd76 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 800433c:	0003      	movs	r3, r0
 800433e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	085a      	lsrs	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	18d2      	adds	r2, r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	0019      	movs	r1, r3
 8004350:	0010      	movs	r0, r2
 8004352:	f7fb fed9 	bl	8000108 <__udivsi3>
 8004356:	0003      	movs	r3, r0
 8004358:	b29b      	uxth	r3, r3
 800435a:	61bb      	str	r3, [r7, #24]
        break;
 800435c:	e036      	b.n	80043cc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	4a30      	ldr	r2, [pc, #192]	; (8004428 <UART_SetConfig+0x308>)
 8004366:	189a      	adds	r2, r3, r2
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	0019      	movs	r1, r3
 800436e:	0010      	movs	r0, r2
 8004370:	f7fb feca 	bl	8000108 <__udivsi3>
 8004374:	0003      	movs	r3, r0
 8004376:	b29b      	uxth	r3, r3
 8004378:	61bb      	str	r3, [r7, #24]
        break;
 800437a:	e027      	b.n	80043cc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437c:	f7fe fce6 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8004380:	0003      	movs	r3, r0
 8004382:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	085a      	lsrs	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	18d2      	adds	r2, r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	0019      	movs	r1, r3
 8004394:	0010      	movs	r0, r2
 8004396:	f7fb feb7 	bl	8000108 <__udivsi3>
 800439a:	0003      	movs	r3, r0
 800439c:	b29b      	uxth	r3, r3
 800439e:	61bb      	str	r3, [r7, #24]
        break;
 80043a0:	e014      	b.n	80043cc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	0212      	lsls	r2, r2, #8
 80043ac:	189a      	adds	r2, r3, r2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	0019      	movs	r1, r3
 80043b4:	0010      	movs	r0, r2
 80043b6:	f7fb fea7 	bl	8000108 <__udivsi3>
 80043ba:	0003      	movs	r3, r0
 80043bc:	b29b      	uxth	r3, r3
 80043be:	61bb      	str	r3, [r7, #24]
        break;
 80043c0:	e004      	b.n	80043cc <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80043c2:	2317      	movs	r3, #23
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
        break;
 80043ca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b0f      	cmp	r3, #15
 80043d0:	d908      	bls.n	80043e4 <UART_SetConfig+0x2c4>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	4a13      	ldr	r2, [pc, #76]	; (8004424 <UART_SetConfig+0x304>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d804      	bhi.n	80043e4 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	e003      	b.n	80043ec <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80043e4:	2317      	movs	r3, #23
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80043f8:	2317      	movs	r3, #23
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	781b      	ldrb	r3, [r3, #0]
}
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	b008      	add	sp, #32
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	ffff69f3 	.word	0xffff69f3
 800440c:	ffffcfff 	.word	0xffffcfff
 8004410:	fffff4ff 	.word	0xfffff4ff
 8004414:	40013800 	.word	0x40013800
 8004418:	40021000 	.word	0x40021000
 800441c:	40004400 	.word	0x40004400
 8004420:	00f42400 	.word	0x00f42400
 8004424:	0000ffff 	.word	0x0000ffff
 8004428:	007a1200 	.word	0x007a1200

0800442c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	2201      	movs	r2, #1
 800443a:	4013      	ands	r3, r2
 800443c:	d00b      	beq.n	8004456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4a4a      	ldr	r2, [pc, #296]	; (8004570 <UART_AdvFeatureConfig+0x144>)
 8004446:	4013      	ands	r3, r2
 8004448:	0019      	movs	r1, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	2202      	movs	r2, #2
 800445c:	4013      	ands	r3, r2
 800445e:	d00b      	beq.n	8004478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4a43      	ldr	r2, [pc, #268]	; (8004574 <UART_AdvFeatureConfig+0x148>)
 8004468:	4013      	ands	r3, r2
 800446a:	0019      	movs	r1, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	2204      	movs	r2, #4
 800447e:	4013      	ands	r3, r2
 8004480:	d00b      	beq.n	800449a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4a3b      	ldr	r2, [pc, #236]	; (8004578 <UART_AdvFeatureConfig+0x14c>)
 800448a:	4013      	ands	r3, r2
 800448c:	0019      	movs	r1, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	2208      	movs	r2, #8
 80044a0:	4013      	ands	r3, r2
 80044a2:	d00b      	beq.n	80044bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4a34      	ldr	r2, [pc, #208]	; (800457c <UART_AdvFeatureConfig+0x150>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	0019      	movs	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	2210      	movs	r2, #16
 80044c2:	4013      	ands	r3, r2
 80044c4:	d00b      	beq.n	80044de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <UART_AdvFeatureConfig+0x154>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	0019      	movs	r1, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	2220      	movs	r2, #32
 80044e4:	4013      	ands	r3, r2
 80044e6:	d00b      	beq.n	8004500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	4a25      	ldr	r2, [pc, #148]	; (8004584 <UART_AdvFeatureConfig+0x158>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	4013      	ands	r3, r2
 8004508:	d01d      	beq.n	8004546 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <UART_AdvFeatureConfig+0x15c>)
 8004512:	4013      	ands	r3, r2
 8004514:	0019      	movs	r1, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	035b      	lsls	r3, r3, #13
 800452a:	429a      	cmp	r2, r3
 800452c:	d10b      	bne.n	8004546 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4a15      	ldr	r2, [pc, #84]	; (800458c <UART_AdvFeatureConfig+0x160>)
 8004536:	4013      	ands	r3, r2
 8004538:	0019      	movs	r1, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2280      	movs	r2, #128	; 0x80
 800454c:	4013      	ands	r3, r2
 800454e:	d00b      	beq.n	8004568 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4a0e      	ldr	r2, [pc, #56]	; (8004590 <UART_AdvFeatureConfig+0x164>)
 8004558:	4013      	ands	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b002      	add	sp, #8
 800456e:	bd80      	pop	{r7, pc}
 8004570:	fffdffff 	.word	0xfffdffff
 8004574:	fffeffff 	.word	0xfffeffff
 8004578:	fffbffff 	.word	0xfffbffff
 800457c:	ffff7fff 	.word	0xffff7fff
 8004580:	ffffefff 	.word	0xffffefff
 8004584:	ffffdfff 	.word	0xffffdfff
 8004588:	ffefffff 	.word	0xffefffff
 800458c:	ff9fffff 	.word	0xff9fffff
 8004590:	fff7ffff 	.word	0xfff7ffff

08004594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af02      	add	r7, sp, #8
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80045a2:	f7fd fd0b 	bl	8001fbc <HAL_GetTick>
 80045a6:	0003      	movs	r3, r0
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2208      	movs	r2, #8
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d10d      	bne.n	80045d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	0399      	lsls	r1, r3, #14
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4b16      	ldr	r3, [pc, #88]	; (800461c <UART_CheckIdleState+0x88>)
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	0013      	movs	r3, r2
 80045c6:	2200      	movs	r2, #0
 80045c8:	f000 f82a 	bl	8004620 <UART_WaitOnFlagUntilTimeout>
 80045cc:	1e03      	subs	r3, r0, #0
 80045ce:	d001      	beq.n	80045d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e01f      	b.n	8004614 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2204      	movs	r2, #4
 80045dc:	4013      	ands	r3, r2
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d10d      	bne.n	80045fe <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	03d9      	lsls	r1, r3, #15
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <UART_CheckIdleState+0x88>)
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	0013      	movs	r3, r2
 80045f0:	2200      	movs	r2, #0
 80045f2:	f000 f815 	bl	8004620 <UART_WaitOnFlagUntilTimeout>
 80045f6:	1e03      	subs	r3, r0, #0
 80045f8:	d001      	beq.n	80045fe <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e00a      	b.n	8004614 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2270      	movs	r2, #112	; 0x70
 800460e:	2100      	movs	r1, #0
 8004610:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b004      	add	sp, #16
 800461a:	bd80      	pop	{r7, pc}
 800461c:	01ffffff 	.word	0x01ffffff

08004620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	1dfb      	adds	r3, r7, #7
 800462e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004630:	e05d      	b.n	80046ee <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	3301      	adds	r3, #1
 8004636:	d05a      	beq.n	80046ee <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004638:	f7fd fcc0 	bl	8001fbc <HAL_GetTick>
 800463c:	0002      	movs	r2, r0
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11b      	bne.n	8004686 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	492f      	ldr	r1, [pc, #188]	; (8004718 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800465a:	400a      	ands	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2101      	movs	r1, #1
 800466a:	438a      	bics	r2, r1
 800466c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2270      	movs	r2, #112	; 0x70
 800467e:	2100      	movs	r1, #0
 8004680:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e043      	b.n	800470e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2204      	movs	r2, #4
 800468e:	4013      	ands	r3, r2
 8004690:	d02d      	beq.n	80046ee <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	401a      	ands	r2, r3
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d123      	bne.n	80046ee <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2280      	movs	r2, #128	; 0x80
 80046ac:	0112      	lsls	r2, r2, #4
 80046ae:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4917      	ldr	r1, [pc, #92]	; (8004718 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80046bc:	400a      	ands	r2, r1
 80046be:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2101      	movs	r1, #1
 80046cc:	438a      	bics	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2270      	movs	r2, #112	; 0x70
 80046e6:	2100      	movs	r1, #0
 80046e8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e00f      	b.n	800470e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	4013      	ands	r3, r2
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	425a      	negs	r2, r3
 80046fe:	4153      	adcs	r3, r2
 8004700:	b2db      	uxtb	r3, r3
 8004702:	001a      	movs	r2, r3
 8004704:	1dfb      	adds	r3, r7, #7
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d092      	beq.n	8004632 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b004      	add	sp, #16
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	fffffe5f 	.word	0xfffffe5f

0800471c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	490a      	ldr	r1, [pc, #40]	; (8004758 <UART_EndRxTransfer+0x3c>)
 8004730:	400a      	ands	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2101      	movs	r1, #1
 8004740:	438a      	bics	r2, r1
 8004742:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004750:	46c0      	nop			; (mov r8, r8)
 8004752:	46bd      	mov	sp, r7
 8004754:	b002      	add	sp, #8
 8004756:	bd80      	pop	{r7, pc}
 8004758:	fffffedf 	.word	0xfffffedf

0800475c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	225a      	movs	r2, #90	; 0x5a
 800476e:	2100      	movs	r1, #0
 8004770:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2252      	movs	r2, #82	; 0x52
 8004776:	2100      	movs	r1, #0
 8004778:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	0018      	movs	r0, r3
 800477e:	f7ff fcc7 	bl	8004110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	46bd      	mov	sp, r7
 8004786:	b004      	add	sp, #16
 8004788:	bd80      	pop	{r7, pc}

0800478a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2140      	movs	r1, #64	; 0x40
 800479e:	438a      	bics	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7ff fca5 	bl	8004100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b002      	add	sp, #8
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b002      	add	sp, #8
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <__libc_init_array>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	2600      	movs	r6, #0
 80047d4:	4d0c      	ldr	r5, [pc, #48]	; (8004808 <__libc_init_array+0x38>)
 80047d6:	4c0d      	ldr	r4, [pc, #52]	; (800480c <__libc_init_array+0x3c>)
 80047d8:	1b64      	subs	r4, r4, r5
 80047da:	10a4      	asrs	r4, r4, #2
 80047dc:	42a6      	cmp	r6, r4
 80047de:	d109      	bne.n	80047f4 <__libc_init_array+0x24>
 80047e0:	2600      	movs	r6, #0
 80047e2:	f000 f821 	bl	8004828 <_init>
 80047e6:	4d0a      	ldr	r5, [pc, #40]	; (8004810 <__libc_init_array+0x40>)
 80047e8:	4c0a      	ldr	r4, [pc, #40]	; (8004814 <__libc_init_array+0x44>)
 80047ea:	1b64      	subs	r4, r4, r5
 80047ec:	10a4      	asrs	r4, r4, #2
 80047ee:	42a6      	cmp	r6, r4
 80047f0:	d105      	bne.n	80047fe <__libc_init_array+0x2e>
 80047f2:	bd70      	pop	{r4, r5, r6, pc}
 80047f4:	00b3      	lsls	r3, r6, #2
 80047f6:	58eb      	ldr	r3, [r5, r3]
 80047f8:	4798      	blx	r3
 80047fa:	3601      	adds	r6, #1
 80047fc:	e7ee      	b.n	80047dc <__libc_init_array+0xc>
 80047fe:	00b3      	lsls	r3, r6, #2
 8004800:	58eb      	ldr	r3, [r5, r3]
 8004802:	4798      	blx	r3
 8004804:	3601      	adds	r6, #1
 8004806:	e7f2      	b.n	80047ee <__libc_init_array+0x1e>
 8004808:	080048b8 	.word	0x080048b8
 800480c:	080048b8 	.word	0x080048b8
 8004810:	080048b8 	.word	0x080048b8
 8004814:	080048bc 	.word	0x080048bc

08004818 <memset>:
 8004818:	0003      	movs	r3, r0
 800481a:	1812      	adds	r2, r2, r0
 800481c:	4293      	cmp	r3, r2
 800481e:	d100      	bne.n	8004822 <memset+0xa>
 8004820:	4770      	bx	lr
 8004822:	7019      	strb	r1, [r3, #0]
 8004824:	3301      	adds	r3, #1
 8004826:	e7f9      	b.n	800481c <memset+0x4>

08004828 <_init>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr

08004834 <_fini>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr
