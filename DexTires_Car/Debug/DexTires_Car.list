
DexTires_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002c5c  08002c5c  00012c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c8c  08002c8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c8c  08002c8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c8c  08002c8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c8c  08002c8c  00012c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002ca0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002ca0  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e7e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001297  00000000  00000000  00026eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b8  00000000  00000000  00028150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000810  00000000  00000000  00028a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001118  00000000  00000000  00029218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006572  00000000  00000000  0002a330  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004fb6d  00000000  00000000  000308a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008040f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f20  00000000  00000000  0008048c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c44 	.word	0x08002c44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002c44 	.word	0x08002c44

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fe6d 	bl	80010d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  ADC_val = 0;
 80003fe:	4b47      	ldr	r3, [pc, #284]	; (800051c <main+0x128>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
  LEDsRunning = 0;
 8000404:	4b46      	ldr	r3, [pc, #280]	; (8000520 <main+0x12c>)
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
  enableLEDs = 0;
 800040a:	4b46      	ldr	r3, [pc, #280]	; (8000524 <main+0x130>)
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000410:	f000 f88e 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000414:	f000 fa8e 	bl	8000934 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000418:	f000 f954 	bl	80006c4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800041c:	f000 f8d2 	bl	80005c4 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000420:	f000 f9f2 	bl	8000808 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  //START TIMERS
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000424:	4b40      	ldr	r3, [pc, #256]	; (8000528 <main+0x134>)
 8000426:	210c      	movs	r1, #12
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fdc3 	bl	8001fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800042e:	4b3f      	ldr	r3, [pc, #252]	; (800052c <main+0x138>)
 8000430:	2100      	movs	r1, #0
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fdbe 	bl	8001fb4 <HAL_TIM_PWM_Start>
			  HAL_Delay(3000);
		  }
	  }*/

	  //Test Motors
	  uint8_t message = 0;
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
	  //uint8_t temp = 0;

	  message = 0;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
	  message = 0 << 5;
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
	  message |= 31;
 800044a:	1dfb      	adds	r3, r7, #7
 800044c:	1dfa      	adds	r2, r7, #7
 800044e:	7812      	ldrb	r2, [r2, #0]
 8000450:	211f      	movs	r1, #31
 8000452:	430a      	orrs	r2, r1
 8000454:	701a      	strb	r2, [r3, #0]
	  DecodeData(message);
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	0018      	movs	r0, r3
 800045c:	f000 faf0 	bl	8000a40 <DecodeData>
	  HAL_Delay(4000);
 8000460:	23fa      	movs	r3, #250	; 0xfa
 8000462:	011b      	lsls	r3, r3, #4
 8000464:	0018      	movs	r0, r3
 8000466:	f000 fe9b 	bl	80011a0 <HAL_Delay>

	  message = 0;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	2200      	movs	r2, #0
 800046e:	701a      	strb	r2, [r3, #0]
	  message = 1 << 5;
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	2220      	movs	r2, #32
 8000474:	701a      	strb	r2, [r3, #0]
	  message |= 1;
 8000476:	1dfb      	adds	r3, r7, #7
 8000478:	1dfa      	adds	r2, r7, #7
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	701a      	strb	r2, [r3, #0]
	  DecodeData(message);
 8000482:	1dfb      	adds	r3, r7, #7
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	0018      	movs	r0, r3
 8000488:	f000 fada 	bl	8000a40 <DecodeData>
	  HAL_Delay(4000);
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	011b      	lsls	r3, r3, #4
 8000490:	0018      	movs	r0, r3
 8000492:	f000 fe85 	bl	80011a0 <HAL_Delay>

	  message = 0;
 8000496:	1dfb      	adds	r3, r7, #7
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
	  message = 2 << 5;
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	2240      	movs	r2, #64	; 0x40
 80004a0:	701a      	strb	r2, [r3, #0]
	  message |= 1;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	1dfa      	adds	r2, r7, #7
 80004a6:	7812      	ldrb	r2, [r2, #0]
 80004a8:	2101      	movs	r1, #1
 80004aa:	430a      	orrs	r2, r1
 80004ac:	701a      	strb	r2, [r3, #0]
	  DecodeData(message);
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fac4 	bl	8000a40 <DecodeData>
	  HAL_Delay(4000);
 80004b8:	23fa      	movs	r3, #250	; 0xfa
 80004ba:	011b      	lsls	r3, r3, #4
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fe6f 	bl	80011a0 <HAL_Delay>

	  message = 0;
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
	  message = 3 << 5;
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	2260      	movs	r2, #96	; 0x60
 80004cc:	701a      	strb	r2, [r3, #0]
	  message |= 31;
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	1dfa      	adds	r2, r7, #7
 80004d2:	7812      	ldrb	r2, [r2, #0]
 80004d4:	211f      	movs	r1, #31
 80004d6:	430a      	orrs	r2, r1
 80004d8:	701a      	strb	r2, [r3, #0]
	  DecodeData(message);
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 faae 	bl	8000a40 <DecodeData>
	  HAL_Delay(4000);
 80004e4:	23fa      	movs	r3, #250	; 0xfa
 80004e6:	011b      	lsls	r3, r3, #4
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fe59 	bl	80011a0 <HAL_Delay>

	  message = 0;
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
	  message = 1 << 5;
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	2220      	movs	r2, #32
 80004f8:	701a      	strb	r2, [r3, #0]
	  message |= 1;
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	1dfa      	adds	r2, r7, #7
 80004fe:	7812      	ldrb	r2, [r2, #0]
 8000500:	2101      	movs	r1, #1
 8000502:	430a      	orrs	r2, r1
 8000504:	701a      	strb	r2, [r3, #0]
	  DecodeData(message);
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fa98 	bl	8000a40 <DecodeData>
	  HAL_Delay(4000);
 8000510:	23fa      	movs	r3, #250	; 0xfa
 8000512:	011b      	lsls	r3, r3, #4
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fe43 	bl	80011a0 <HAL_Delay>
  {
 800051a:	e78d      	b.n	8000438 <main+0x44>
 800051c:	200000b0 	.word	0x200000b0
 8000520:	20000028 	.word	0x20000028
 8000524:	2000002c 	.word	0x2000002c
 8000528:	200000b4 	.word	0x200000b4
 800052c:	20000030 	.word	0x20000030

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b091      	sub	sp, #68	; 0x44
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	2410      	movs	r4, #16
 8000538:	193b      	adds	r3, r7, r4
 800053a:	0018      	movs	r0, r3
 800053c:	2330      	movs	r3, #48	; 0x30
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f002 fb77 	bl	8002c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000546:	003b      	movs	r3, r7
 8000548:	0018      	movs	r0, r3
 800054a:	2310      	movs	r3, #16
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f002 fb70 	bl	8002c34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	0021      	movs	r1, r4
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2202      	movs	r2, #2
 800055a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2201      	movs	r2, #1
 8000560:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2210      	movs	r2, #16
 8000566:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2202      	movs	r2, #2
 800056c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	22a0      	movs	r2, #160	; 0xa0
 8000578:	0392      	lsls	r2, r2, #14
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	187b      	adds	r3, r7, r1
 8000584:	0018      	movs	r0, r3
 8000586:	f001 f86f 	bl	8001668 <HAL_RCC_OscConfig>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800058e:	f000 fc23 	bl	8000dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	003b      	movs	r3, r7
 8000594:	2207      	movs	r2, #7
 8000596:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	003b      	movs	r3, r7
 800059a:	2202      	movs	r2, #2
 800059c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	003b      	movs	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	003b      	movs	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005aa:	003b      	movs	r3, r7
 80005ac:	2101      	movs	r1, #1
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fb76 	bl	8001ca0 <HAL_RCC_ClockConfig>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b8:	f000 fc0e 	bl	8000dd8 <Error_Handler>
  }
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b011      	add	sp, #68	; 0x44
 80005c2:	bd90      	pop	{r4, r7, pc}

080005c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08e      	sub	sp, #56	; 0x38
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ca:	2328      	movs	r3, #40	; 0x28
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	2310      	movs	r3, #16
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f002 fb2d 	bl	8002c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	2320      	movs	r3, #32
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	0018      	movs	r0, r3
 80005e0:	2308      	movs	r3, #8
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f002 fb25 	bl	8002c34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	0018      	movs	r0, r3
 80005ee:	231c      	movs	r3, #28
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f002 fb1e 	bl	8002c34 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <MX_TIM2_Init+0xf8>)
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	05d2      	lsls	r2, r2, #23
 80005fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000600:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <MX_TIM2_Init+0xf8>)
 8000602:	225f      	movs	r2, #95	; 0x5f
 8000604:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000606:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <MX_TIM2_Init+0xf8>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800060c:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <MX_TIM2_Init+0xf8>)
 800060e:	4a2c      	ldr	r2, [pc, #176]	; (80006c0 <MX_TIM2_Init+0xfc>)
 8000610:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <MX_TIM2_Init+0xf8>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_TIM2_Init+0xf8>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <MX_TIM2_Init+0xf8>)
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fc6f 	bl	8001f04 <HAL_TIM_Base_Init>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800062a:	f000 fbd5 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800062e:	2128      	movs	r1, #40	; 0x28
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	0152      	lsls	r2, r2, #5
 8000636:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000638:	187a      	adds	r2, r7, r1
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_TIM2_Init+0xf8>)
 800063c:	0011      	movs	r1, r2
 800063e:	0018      	movs	r0, r3
 8000640:	f001 fe20 	bl	8002284 <HAL_TIM_ConfigClockSource>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000648:	f000 fbc6 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_TIM2_Init+0xf8>)
 800064e:	0018      	movs	r0, r3
 8000650:	f001 fc84 	bl	8001f5c <HAL_TIM_PWM_Init>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000658:	f000 fbbe 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065c:	2120      	movs	r1, #32
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800066a:	187a      	adds	r2, r7, r1
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_TIM2_Init+0xf8>)
 800066e:	0011      	movs	r1, r2
 8000670:	0018      	movs	r0, r3
 8000672:	f002 f9ff 	bl	8002a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800067a:	f000 fbad 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2260      	movs	r2, #96	; 0x60
 8000682:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000696:	1d39      	adds	r1, r7, #4
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_TIM2_Init+0xf8>)
 800069a:	220c      	movs	r2, #12
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fd39 	bl	8002114 <HAL_TIM_PWM_ConfigChannel>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80006a6:	f000 fb97 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <MX_TIM2_Init+0xf8>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 fc0d 	bl	8000ecc <HAL_TIM_MspPostInit>

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b00e      	add	sp, #56	; 0x38
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	200000b4 	.word	0x200000b4
 80006c0:	0000270f 	.word	0x0000270f

080006c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08e      	sub	sp, #56	; 0x38
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	2328      	movs	r3, #40	; 0x28
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	0018      	movs	r0, r3
 80006d0:	2310      	movs	r3, #16
 80006d2:	001a      	movs	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f002 faad 	bl	8002c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006da:	2320      	movs	r3, #32
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	0018      	movs	r0, r3
 80006e0:	2308      	movs	r3, #8
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f002 faa5 	bl	8002c34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	0018      	movs	r0, r3
 80006ee:	231c      	movs	r3, #28
 80006f0:	001a      	movs	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	f002 fa9e 	bl	8002c34 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f8:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <MX_TIM3_Init+0x130>)
 80006fa:	4a3f      	ldr	r2, [pc, #252]	; (80007f8 <MX_TIM3_Init+0x134>)
 80006fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80006fe:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <MX_TIM3_Init+0x130>)
 8000700:	4a3e      	ldr	r2, [pc, #248]	; (80007fc <MX_TIM3_Init+0x138>)
 8000702:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000704:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <MX_TIM3_Init+0x130>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1199;
 800070a:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <MX_TIM3_Init+0x130>)
 800070c:	4a3c      	ldr	r2, [pc, #240]	; (8000800 <MX_TIM3_Init+0x13c>)
 800070e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000710:	4b38      	ldr	r3, [pc, #224]	; (80007f4 <MX_TIM3_Init+0x130>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000716:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <MX_TIM3_Init+0x130>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800071c:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <MX_TIM3_Init+0x130>)
 800071e:	0018      	movs	r0, r3
 8000720:	f001 fbf0 	bl	8001f04 <HAL_TIM_Base_Init>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000728:	f000 fb56 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072c:	2128      	movs	r1, #40	; 0x28
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	0152      	lsls	r2, r2, #5
 8000734:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000736:	187a      	adds	r2, r7, r1
 8000738:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <MX_TIM3_Init+0x130>)
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f001 fda1 	bl	8002284 <HAL_TIM_ConfigClockSource>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000746:	f000 fb47 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <MX_TIM3_Init+0x130>)
 800074c:	0018      	movs	r0, r3
 800074e:	f001 fc05 	bl	8001f5c <HAL_TIM_PWM_Init>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000756:	f000 fb3f 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075a:	2120      	movs	r1, #32
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000768:	187a      	adds	r2, r7, r1
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_TIM3_Init+0x130>)
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f002 f980 	bl	8002a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000778:	f000 fb2e 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2260      	movs	r2, #96	; 0x60
 8000780:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 599;
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <MX_TIM3_Init+0x140>)
 8000786:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000794:	1d39      	adds	r1, r7, #4
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_TIM3_Init+0x130>)
 8000798:	2200      	movs	r2, #0
 800079a:	0018      	movs	r0, r3
 800079c:	f001 fcba 	bl	8002114 <HAL_TIM_PWM_ConfigChannel>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80007a4:	f000 fb18 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a8:	1d39      	adds	r1, r7, #4
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_TIM3_Init+0x130>)
 80007ac:	2204      	movs	r2, #4
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fcb0 	bl	8002114 <HAL_TIM_PWM_ConfigChannel>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80007b8:	f000 fb0e 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007bc:	1d39      	adds	r1, r7, #4
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_TIM3_Init+0x130>)
 80007c0:	2208      	movs	r2, #8
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 fca6 	bl	8002114 <HAL_TIM_PWM_ConfigChannel>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 80007cc:	f000 fb04 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007d0:	1d39      	adds	r1, r7, #4
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_TIM3_Init+0x130>)
 80007d4:	220c      	movs	r2, #12
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 fc9c 	bl	8002114 <HAL_TIM_PWM_ConfigChannel>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 80007e0:	f000 fafa 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <MX_TIM3_Init+0x130>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fb70 	bl	8000ecc <HAL_TIM_MspPostInit>

}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b00e      	add	sp, #56	; 0x38
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000070 	.word	0x20000070
 80007f8:	40000400 	.word	0x40000400
 80007fc:	0000270f 	.word	0x0000270f
 8000800:	000004af 	.word	0x000004af
 8000804:	00000257 	.word	0x00000257

08000808 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b092      	sub	sp, #72	; 0x48
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	0018      	movs	r0, r3
 8000814:	2308      	movs	r3, #8
 8000816:	001a      	movs	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	f002 fa0b 	bl	8002c34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081e:	2324      	movs	r3, #36	; 0x24
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	0018      	movs	r0, r3
 8000824:	231c      	movs	r3, #28
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f002 fa03 	bl	8002c34 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	0018      	movs	r0, r3
 8000832:	2320      	movs	r3, #32
 8000834:	001a      	movs	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	f002 f9fc 	bl	8002c34 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800083c:	4b3a      	ldr	r3, [pc, #232]	; (8000928 <MX_TIM15_Init+0x120>)
 800083e:	4a3b      	ldr	r2, [pc, #236]	; (800092c <MX_TIM15_Init+0x124>)
 8000840:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 95;
 8000842:	4b39      	ldr	r3, [pc, #228]	; (8000928 <MX_TIM15_Init+0x120>)
 8000844:	225f      	movs	r2, #95	; 0x5f
 8000846:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b37      	ldr	r3, [pc, #220]	; (8000928 <MX_TIM15_Init+0x120>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 800084e:	4b36      	ldr	r3, [pc, #216]	; (8000928 <MX_TIM15_Init+0x120>)
 8000850:	4a37      	ldr	r2, [pc, #220]	; (8000930 <MX_TIM15_Init+0x128>)
 8000852:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b34      	ldr	r3, [pc, #208]	; (8000928 <MX_TIM15_Init+0x120>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800085a:	4b33      	ldr	r3, [pc, #204]	; (8000928 <MX_TIM15_Init+0x120>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000860:	4b31      	ldr	r3, [pc, #196]	; (8000928 <MX_TIM15_Init+0x120>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000866:	4b30      	ldr	r3, [pc, #192]	; (8000928 <MX_TIM15_Init+0x120>)
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fb77 	bl	8001f5c <HAL_TIM_PWM_Init>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000872:	f000 fab1 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000884:	187a      	adds	r2, r7, r1
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_TIM15_Init+0x120>)
 8000888:	0011      	movs	r1, r2
 800088a:	0018      	movs	r0, r3
 800088c:	f002 f8f2 	bl	8002a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000894:	f000 faa0 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000898:	2124      	movs	r1, #36	; 0x24
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2260      	movs	r2, #96	; 0x60
 800089e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c4:	1879      	adds	r1, r7, r1
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_TIM15_Init+0x120>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 fc22 	bl	8002114 <HAL_TIM_PWM_ConfigChannel>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 80008d4:	f000 fa80 	bl	8000dd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	0192      	lsls	r2, r2, #6
 80008fc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000904:	1d3a      	adds	r2, r7, #4
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_TIM15_Init+0x120>)
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f002 f910 	bl	8002b30 <HAL_TIMEx_ConfigBreakDeadTime>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 8000914:	f000 fa60 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <MX_TIM15_Init+0x120>)
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fad6 	bl	8000ecc <HAL_TIM_MspPostInit>

}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b012      	add	sp, #72	; 0x48
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000030 	.word	0x20000030
 800092c:	40014000 	.word	0x40014000
 8000930:	0000270f 	.word	0x0000270f

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	240c      	movs	r4, #12
 800093c:	193b      	adds	r3, r7, r4
 800093e:	0018      	movs	r0, r3
 8000940:	2314      	movs	r3, #20
 8000942:	001a      	movs	r2, r3
 8000944:	2100      	movs	r1, #0
 8000946:	f002 f975 	bl	8002c34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <MX_GPIO_Init+0x100>)
 800094c:	695a      	ldr	r2, [r3, #20]
 800094e:	4b39      	ldr	r3, [pc, #228]	; (8000a34 <MX_GPIO_Init+0x100>)
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	0289      	lsls	r1, r1, #10
 8000954:	430a      	orrs	r2, r1
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <MX_GPIO_Init+0x100>)
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	029b      	lsls	r3, r3, #10
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <MX_GPIO_Init+0x100>)
 8000968:	695a      	ldr	r2, [r3, #20]
 800096a:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <MX_GPIO_Init+0x100>)
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	02c9      	lsls	r1, r1, #11
 8000970:	430a      	orrs	r2, r1
 8000972:	615a      	str	r2, [r3, #20]
 8000974:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <MX_GPIO_Init+0x100>)
 8000976:	695a      	ldr	r2, [r3, #20]
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	02db      	lsls	r3, r3, #11
 800097c:	4013      	ands	r3, r2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <MX_GPIO_Init+0x100>)
 8000984:	695a      	ldr	r2, [r3, #20]
 8000986:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <MX_GPIO_Init+0x100>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0309      	lsls	r1, r1, #12
 800098c:	430a      	orrs	r2, r1
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_GPIO_Init+0x100>)
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	031b      	lsls	r3, r3, #12
 8000998:	4013      	ands	r3, r2
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA_Pin|INB_Pin, GPIO_PIN_RESET);
 800099e:	2390      	movs	r3, #144	; 0x90
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	2200      	movs	r2, #0
 80009a4:	2130      	movs	r1, #48	; 0x30
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fe40 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009ac:	23c0      	movs	r3, #192	; 0xc0
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4821      	ldr	r0, [pc, #132]	; (8000a38 <MX_GPIO_Init+0x104>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	0019      	movs	r1, r3
 80009b6:	f000 fe39 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2201      	movs	r2, #1
 80009be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <MX_GPIO_Init+0x108>)
 80009c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009cc:	193a      	adds	r2, r7, r4
 80009ce:	2390      	movs	r3, #144	; 0x90
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	0011      	movs	r1, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fcb9 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pins : INA_Pin INB_Pin */
  GPIO_InitStruct.Pin = INA_Pin|INB_Pin;
 80009da:	0021      	movs	r1, r4
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2230      	movs	r2, #48	; 0x30
 80009e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2201      	movs	r2, #1
 80009e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	000c      	movs	r4, r1
 80009f6:	187a      	adds	r2, r7, r1
 80009f8:	2390      	movs	r3, #144	; 0x90
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fca4 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000a04:	0021      	movs	r1, r4
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	22c0      	movs	r2, #192	; 0xc0
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2201      	movs	r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <MX_GPIO_Init+0x104>)
 8000a24:	0019      	movs	r1, r3
 8000a26:	0010      	movs	r0, r2
 8000a28:	f000 fc90 	bl	800134c <HAL_GPIO_Init>

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b009      	add	sp, #36	; 0x24
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	48000800 	.word	0x48000800
 8000a3c:	10110000 	.word	0x10110000

08000a40 <DecodeData>:

/* USER CODE BEGIN 4 */

void DecodeData(uint8_t message) {
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	0002      	movs	r2, r0
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	701a      	strb	r2, [r3, #0]
	uint8_t mode = message >> 7; //Get bit-7
 8000a4c:	200f      	movs	r0, #15
 8000a4e:	183b      	adds	r3, r7, r0
 8000a50:	1dfa      	adds	r2, r7, #7
 8000a52:	7812      	ldrb	r2, [r2, #0]
 8000a54:	09d2      	lsrs	r2, r2, #7
 8000a56:	701a      	strb	r2, [r3, #0]
	uint8_t direction = (message >> 5) & 0x3; // Get bit-6 and bit-5
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	095b      	lsrs	r3, r3, #5
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	230e      	movs	r3, #14
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2103      	movs	r1, #3
 8000a66:	400a      	ands	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
	uint8_t speed = message & 0x1F; //Get the bottom 5 bits (0 to 4)
 8000a6a:	230d      	movs	r3, #13
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	1dfa      	adds	r2, r7, #7
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	211f      	movs	r1, #31
 8000a74:	400a      	ands	r2, r1
 8000a76:	701a      	strb	r2, [r3, #0]

	//Check for Calibration Mode
	if (mode == 1) {
 8000a78:	183b      	adds	r3, r7, r0
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d10e      	bne.n	8000a9e <DecodeData+0x5e>
		enableLEDs = 1;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <DecodeData+0xa4>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
		speed_conversion(0, direction); //Don't run the DC Motors
 8000a86:	230e      	movs	r3, #14
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f934 	bl	8000cfc <speed_conversion>
		angle_conversion(0, 0); //Don't turn the Servo Motor
 8000a94:	2100      	movs	r1, #0
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f8f0 	bl	8000c7c <angle_conversion>
 8000a9c:	e014      	b.n	8000ac8 <DecodeData+0x88>
	} else {
		enableLEDs = 0;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <DecodeData+0xa4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
		speed_conversion(speed, direction);
 8000aa4:	240e      	movs	r4, #14
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	250d      	movs	r5, #13
 8000aac:	197b      	adds	r3, r7, r5
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 f922 	bl	8000cfc <speed_conversion>
		angle_conversion(speed, direction);
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	197b      	adds	r3, r7, r5
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 f8da 	bl	8000c7c <angle_conversion>
	}

	SetCalibrationLights(direction, speed);
 8000ac8:	230d      	movs	r3, #13
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	230e      	movs	r3, #14
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 f806 	bl	8000ae8 <SetCalibrationLights>
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b004      	add	sp, #16
 8000ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae4:	2000002c 	.word	0x2000002c

08000ae8 <SetCalibrationLights>:
				I.e. If not connected, set everything to zero, blink LEDs, return from Decode function
*/

// TODO: While car is not connected, blink all car lights every second to indicate disconnection

void SetCalibrationLights(uint8_t direction, uint8_t pressure) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	0002      	movs	r2, r0
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	1dbb      	adds	r3, r7, #6
 8000af6:	1c0a      	adds	r2, r1, #0
 8000af8:	701a      	strb	r2, [r3, #0]
	// TODO: Have the LED lights blink rather than just be solid colors?
	//			- Enable a timer while toggles the LEDs ever half a second
	//			- Disable the timer when 'enabledLEDs' is off

	if (enableLEDs) {
 8000afa:	4b5b      	ldr	r3, [pc, #364]	; (8000c68 <SetCalibrationLights+0x180>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d100      	bne.n	8000b04 <SetCalibrationLights+0x1c>
 8000b02:	e095      	b.n	8000c30 <SetCalibrationLights+0x148>
		//If LEDs are already running, return

		int indication = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
		int pulseWidth = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]

		//Enable Timer Channels
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b0c:	4b57      	ldr	r3, [pc, #348]	; (8000c6c <SetCalibrationLights+0x184>)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 fa4f 	bl	8001fb4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b16:	4b55      	ldr	r3, [pc, #340]	; (8000c6c <SetCalibrationLights+0x184>)
 8000b18:	2104      	movs	r1, #4
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 fa4a 	bl	8001fb4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000b20:	4b52      	ldr	r3, [pc, #328]	; (8000c6c <SetCalibrationLights+0x184>)
 8000b22:	2108      	movs	r1, #8
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 fa45 	bl	8001fb4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000b2a:	4b50      	ldr	r3, [pc, #320]	; (8000c6c <SetCalibrationLights+0x184>)
 8000b2c:	210c      	movs	r1, #12
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 fa40 	bl	8001fb4 <HAL_TIM_PWM_Start>

		switch (direction) {
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d00b      	beq.n	8000b54 <SetCalibrationLights+0x6c>
 8000b3c:	dc02      	bgt.n	8000b44 <SetCalibrationLights+0x5c>
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d005      	beq.n	8000b4e <SetCalibrationLights+0x66>
 8000b42:	e010      	b.n	8000b66 <SetCalibrationLights+0x7e>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d008      	beq.n	8000b5a <SetCalibrationLights+0x72>
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d009      	beq.n	8000b60 <SetCalibrationLights+0x78>
 8000b4c:	e00b      	b.n	8000b66 <SetCalibrationLights+0x7e>
			case 0: indication = Back; break;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	e00b      	b.n	8000b6c <SetCalibrationLights+0x84>
			case 1: indication = Right; break;
 8000b54:	2308      	movs	r3, #8
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	e008      	b.n	8000b6c <SetCalibrationLights+0x84>
			case 2: indication = Left; break;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	e005      	b.n	8000b6c <SetCalibrationLights+0x84>
			case 3: indication = Front; break;
 8000b60:	2301      	movs	r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e002      	b.n	8000b6c <SetCalibrationLights+0x84>
			default: indication = Off; break;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	46c0      	nop			; (mov r8, r8)
		}

		//Note: Prescaler value = 9999
		if (pressure == 1) {
 8000b6c:	1dbb      	adds	r3, r7, #6
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d107      	bne.n	8000b84 <SetCalibrationLights+0x9c>
			//Rest Pressure
			__HAL_TIM_SET_AUTORELOAD(&htim3, 2399); //2Hz
 8000b74:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <SetCalibrationLights+0x184>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a3d      	ldr	r2, [pc, #244]	; (8000c70 <SetCalibrationLights+0x188>)
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b7c:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <SetCalibrationLights+0x184>)
 8000b7e:	4a3c      	ldr	r2, [pc, #240]	; (8000c70 <SetCalibrationLights+0x188>)
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	e00a      	b.n	8000b9a <SetCalibrationLights+0xb2>
		} else if (pressure == 2) {
 8000b84:	1dbb      	adds	r3, r7, #6
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d106      	bne.n	8000b9a <SetCalibrationLights+0xb2>
			//Full Pressure
			__HAL_TIM_SET_AUTORELOAD(&htim3, 1199); //4Hz
 8000b8c:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <SetCalibrationLights+0x184>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a38      	ldr	r2, [pc, #224]	; (8000c74 <SetCalibrationLights+0x18c>)
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b94:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <SetCalibrationLights+0x184>)
 8000b96:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <SetCalibrationLights+0x18c>)
 8000b98:	60da      	str	r2, [r3, #12]
		}

		//Get half of the ARR to set the duty cycle to 50%
		pulseWidth = ((__HAL_TIM_GET_AUTORELOAD(&htim3) + 1) / 2) - 1;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <SetCalibrationLights+0x184>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	085b      	lsrs	r3, r3, #1
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ((indication & Front) || (indication & Left)) * pulseWidth);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2201      	movs	r2, #1
 8000bac:	4013      	ands	r3, r2
 8000bae:	d103      	bne.n	8000bb8 <SetCalibrationLights+0xd0>
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d001      	beq.n	8000bbc <SetCalibrationLights+0xd4>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <SetCalibrationLights+0xd6>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	435a      	muls	r2, r3
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <SetCalibrationLights+0x184>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ((indication & Front) || (indication & Right)) * pulseWidth);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	d103      	bne.n	8000bd8 <SetCalibrationLights+0xf0>
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	d001      	beq.n	8000bdc <SetCalibrationLights+0xf4>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <SetCalibrationLights+0xf6>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	435a      	muls	r2, r3
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <SetCalibrationLights+0x184>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ((indication & Back) || (indication & Left)) * pulseWidth);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2202      	movs	r2, #2
 8000bec:	4013      	ands	r3, r2
 8000bee:	d103      	bne.n	8000bf8 <SetCalibrationLights+0x110>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	d001      	beq.n	8000bfc <SetCalibrationLights+0x114>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <SetCalibrationLights+0x116>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	435a      	muls	r2, r3
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <SetCalibrationLights+0x184>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ((indication & Back) || (indication & Right)) * pulseWidth);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d103      	bne.n	8000c18 <SetCalibrationLights+0x130>
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2208      	movs	r2, #8
 8000c14:	4013      	ands	r3, r2
 8000c16:	d001      	beq.n	8000c1c <SetCalibrationLights+0x134>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <SetCalibrationLights+0x136>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	435a      	muls	r2, r3
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <SetCalibrationLights+0x184>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	641a      	str	r2, [r3, #64]	; 0x40

		LEDsRunning = 1;
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <SetCalibrationLights+0x190>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);

		LEDsRunning = 0;
	}
}
 8000c2e:	e016      	b.n	8000c5e <SetCalibrationLights+0x176>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <SetCalibrationLights+0x184>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	0018      	movs	r0, r3
 8000c36:	f001 fa09 	bl	800204c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <SetCalibrationLights+0x184>)
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 fa04 	bl	800204c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <SetCalibrationLights+0x184>)
 8000c46:	2108      	movs	r1, #8
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f001 f9ff 	bl	800204c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <SetCalibrationLights+0x184>)
 8000c50:	210c      	movs	r1, #12
 8000c52:	0018      	movs	r0, r3
 8000c54:	f001 f9fa 	bl	800204c <HAL_TIM_PWM_Stop>
		LEDsRunning = 0;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <SetCalibrationLights+0x190>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	2000002c 	.word	0x2000002c
 8000c6c:	20000070 	.word	0x20000070
 8000c70:	0000095f 	.word	0x0000095f
 8000c74:	000004af 	.word	0x000004af
 8000c78:	20000028 	.word	0x20000028

08000c7c <angle_conversion>:

// Function to convert the 32 bit value into corresponding angle
void angle_conversion(uint8_t input, uint8_t right_left) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	0002      	movs	r2, r0
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	1dbb      	adds	r3, r7, #6
 8000c8a:	1c0a      	adds	r2, r1, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
	int pulse_width = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]

	if (right_left == 1) {
 8000c92:	1dbb      	adds	r3, r7, #6
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d10c      	bne.n	8000cb4 <angle_conversion+0x38>
		//Right
		pulse_width = (int)(400 + (250 * input / 31));
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	22fa      	movs	r2, #250	; 0xfa
 8000ca0:	4353      	muls	r3, r2
 8000ca2:	211f      	movs	r1, #31
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff fab9 	bl	800021c <__divsi3>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3391      	adds	r3, #145	; 0x91
 8000cae:	33ff      	adds	r3, #255	; 0xff
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	e014      	b.n	8000cde <angle_conversion+0x62>
	} else if(right_left == 2) {
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d10e      	bne.n	8000cda <angle_conversion+0x5e>
		//Left
		pulse_width = (int)(1100 - (250 * input / 31));
 8000cbc:	1dfb      	adds	r3, r7, #7
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	22fa      	movs	r2, #250	; 0xfa
 8000cc2:	435a      	muls	r2, r3
 8000cc4:	231f      	movs	r3, #31
 8000cc6:	4259      	negs	r1, r3
 8000cc8:	0010      	movs	r0, r2
 8000cca:	f7ff faa7 	bl	800021c <__divsi3>
 8000cce:	0003      	movs	r3, r0
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <angle_conversion+0x74>)
 8000cd2:	4694      	mov	ip, r2
 8000cd4:	4463      	add	r3, ip
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	e001      	b.n	8000cde <angle_conversion+0x62>
	} else {
		//No turning
		pulse_width = 750;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <angle_conversion+0x78>)
 8000cdc:	60fb      	str	r3, [r7, #12]
	}

	htim15.Instance->CCR1 = pulse_width;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <angle_conversion+0x7c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b004      	add	sp, #16
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	0000044c 	.word	0x0000044c
 8000cf4:	000002ee 	.word	0x000002ee
 8000cf8:	20000030 	.word	0x20000030

08000cfc <speed_conversion>:

void speed_conversion(uint8_t input, uint8_t front_back)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	0002      	movs	r2, r0
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	1dbb      	adds	r3, r7, #6
 8000d0a:	1c0a      	adds	r2, r1, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
	int duty_cycle_percentage = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
	int min_percentage = 50;
 8000d12:	2332      	movs	r3, #50	; 0x32
 8000d14:	613b      	str	r3, [r7, #16]
	int max_percentage = 80;
 8000d16:	2350      	movs	r3, #80	; 0x50
 8000d18:	60fb      	str	r3, [r7, #12]

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);

	if(front_back == 3 || front_back == 1 || front_back == 2)//clockwise, forward/right/left
 8000d1a:	1dbb      	adds	r3, r7, #6
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d007      	beq.n	8000d32 <speed_conversion+0x36>
 8000d22:	1dbb      	adds	r3, r7, #6
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d003      	beq.n	8000d32 <speed_conversion+0x36>
 8000d2a:	1dbb      	adds	r3, r7, #6
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d10e      	bne.n	8000d50 <speed_conversion+0x54>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1); //INA
 8000d32:	2390      	movs	r3, #144	; 0x90
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	2201      	movs	r2, #1
 8000d38:	2110      	movs	r1, #16
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 fc76 	bl	800162c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0); //INB
 8000d40:	2390      	movs	r3, #144	; 0x90
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	2200      	movs	r2, #0
 8000d46:	2120      	movs	r1, #32
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f000 fc6f 	bl	800162c <HAL_GPIO_WritePin>
 8000d4e:	e011      	b.n	8000d74 <speed_conversion+0x78>
	}
	else if(front_back == 0)//anticlockwise, back
 8000d50:	1dbb      	adds	r3, r7, #6
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10d      	bne.n	8000d74 <speed_conversion+0x78>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0); //INA
 8000d58:	2390      	movs	r3, #144	; 0x90
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2110      	movs	r1, #16
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fc63 	bl	800162c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); //INB
 8000d66:	2390      	movs	r3, #144	; 0x90
 8000d68:	05db      	lsls	r3, r3, #23
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 fc5c 	bl	800162c <HAL_GPIO_WritePin>
	}

	if(input == 0) {
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <speed_conversion+0x86>
		duty_cycle_percentage = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e016      	b.n	8000db0 <speed_conversion+0xb4>
	} else if (input == 1) {
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d102      	bne.n	8000d90 <speed_conversion+0x94>
		duty_cycle_percentage = min_percentage;
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e00f      	b.n	8000db0 <speed_conversion+0xb4>
	} else {
		duty_cycle_percentage = ((max_percentage - min_percentage)*(input - 1)/30) + min_percentage;
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	1dfa      	adds	r2, r7, #7
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	3a01      	subs	r2, #1
 8000d9c:	4353      	muls	r3, r2
 8000d9e:	211e      	movs	r1, #30
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff fa3b 	bl	800021c <__divsi3>
 8000da6:	0003      	movs	r3, r0
 8000da8:	001a      	movs	r2, r3
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	189b      	adds	r3, r3, r2
 8000dae:	617b      	str	r3, [r7, #20]
	}

	htim2.Instance->CCR4 = duty_cycle_percentage * (htim2.Instance->ARR+1) / 100;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <speed_conversion+0xd8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	3301      	adds	r3, #1
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	435a      	muls	r2, r3
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <speed_conversion+0xd8>)
 8000dbe:	681c      	ldr	r4, [r3, #0]
 8000dc0:	2164      	movs	r1, #100	; 0x64
 8000dc2:	0010      	movs	r0, r2
 8000dc4:	f7ff f9a0 	bl	8000108 <__udivsi3>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	6423      	str	r3, [r4, #64]	; 0x40
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b007      	add	sp, #28
 8000dd2:	bd90      	pop	{r4, r7, pc}
 8000dd4:	200000b4 	.word	0x200000b4

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x44>)
 8000dec:	699a      	ldr	r2, [r3, #24]
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_MspInit+0x44>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	430a      	orrs	r2, r1
 8000df4:	619a      	str	r2, [r3, #24]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_MspInit+0x44>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_MspInit+0x44>)
 8000e04:	69da      	ldr	r2, [r3, #28]
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_MspInit+0x44>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	0549      	lsls	r1, r1, #21
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	61da      	str	r2, [r3, #28]
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_MspInit+0x44>)
 8000e12:	69da      	ldr	r2, [r3, #28]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	055b      	lsls	r3, r3, #21
 8000e18:	4013      	ands	r3, r2
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	40021000 	.word	0x40021000

08000e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d10c      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <HAL_TIM_Base_MspInit+0x58>)
 8000e42:	69da      	ldr	r2, [r3, #28]
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_TIM_Base_MspInit+0x58>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	61da      	str	r2, [r3, #28]
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_TIM_Base_MspInit+0x58>)
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4013      	ands	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e58:	e010      	b.n	8000e7c <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM3)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_TIM_Base_MspInit+0x5c>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d10b      	bne.n	8000e7c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_TIM_Base_MspInit+0x58>)
 8000e66:	69da      	ldr	r2, [r3, #28]
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_TIM_Base_MspInit+0x58>)
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	61da      	str	r2, [r3, #28]
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_TIM_Base_MspInit+0x58>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	2202      	movs	r2, #2
 8000e76:	4013      	ands	r3, r2
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b004      	add	sp, #16
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40000400 	.word	0x40000400

08000e8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x38>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d10d      	bne.n	8000eba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea0:	699a      	ldr	r2, [r3, #24]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	0249      	lsls	r1, r1, #9
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	619a      	str	r2, [r3, #24]
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000eae:	699a      	ldr	r2, [r3, #24]
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	025b      	lsls	r3, r3, #9
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	40014000 	.word	0x40014000
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b08d      	sub	sp, #52	; 0x34
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	231c      	movs	r3, #28
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	0018      	movs	r0, r3
 8000eda:	2314      	movs	r3, #20
 8000edc:	001a      	movs	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f001 fea8 	bl	8002c34 <memset>
  if(htim->Instance==TIM2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d125      	bne.n	8000f3c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b51      	ldr	r3, [pc, #324]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000ef2:	695a      	ldr	r2, [r3, #20]
 8000ef4:	4b50      	ldr	r3, [pc, #320]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0289      	lsls	r1, r1, #10
 8000efa:	430a      	orrs	r2, r1
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	4b4e      	ldr	r3, [pc, #312]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000f00:	695a      	ldr	r2, [r3, #20]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	029b      	lsls	r3, r3, #10
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = DC_PWM_Pin;
 8000f0c:	211c      	movs	r1, #28
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2208      	movs	r2, #8
 8000f12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2202      	movs	r2, #2
 8000f18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2202      	movs	r2, #2
 8000f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DC_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	187a      	adds	r2, r7, r1
 8000f2e:	2390      	movs	r3, #144	; 0x90
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fa09 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000f3a:	e078      	b.n	800102e <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM3)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a3e      	ldr	r2, [pc, #248]	; (800103c <HAL_TIM_MspPostInit+0x170>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d149      	bne.n	8000fda <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000f48:	695a      	ldr	r2, [r3, #20]
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	0289      	lsls	r1, r1, #10
 8000f50:	430a      	orrs	r2, r1
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000f56:	695a      	ldr	r2, [r3, #20]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	029b      	lsls	r3, r3, #10
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4b35      	ldr	r3, [pc, #212]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000f64:	695a      	ldr	r2, [r3, #20]
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	02c9      	lsls	r1, r1, #11
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000f72:	695a      	ldr	r2, [r3, #20]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	02db      	lsls	r3, r3, #11
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FL_Pin|FR_Pin;
 8000f7e:	241c      	movs	r4, #28
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	22c0      	movs	r2, #192	; 0xc0
 8000f84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2202      	movs	r2, #2
 8000f8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	193a      	adds	r2, r7, r4
 8000fa0:	2390      	movs	r3, #144	; 0x90
 8000fa2:	05db      	lsls	r3, r3, #23
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 f9d0 	bl	800134c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BL_Pin|BR_Pin;
 8000fac:	0021      	movs	r1, r4
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2201      	movs	r2, #1
 8000fca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	0010      	movs	r0, r2
 8000fd4:	f000 f9ba 	bl	800134c <HAL_GPIO_Init>
}
 8000fd8:	e029      	b.n	800102e <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM15)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a19      	ldr	r2, [pc, #100]	; (8001044 <HAL_TIM_MspPostInit+0x178>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d124      	bne.n	800102e <HAL_TIM_MspPostInit+0x162>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000fe6:	695a      	ldr	r2, [r3, #20]
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	0289      	lsls	r1, r1, #10
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_TIM_MspPostInit+0x16c>)
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	029b      	lsls	r3, r3, #10
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8001000:	211c      	movs	r1, #28
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2204      	movs	r2, #4
 8001006:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2202      	movs	r2, #2
 800100c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8001020:	187a      	adds	r2, r7, r1
 8001022:	2390      	movs	r3, #144	; 0x90
 8001024:	05db      	lsls	r3, r3, #23
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f000 f98f 	bl	800134c <HAL_GPIO_Init>
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b00d      	add	sp, #52	; 0x34
 8001034:	bd90      	pop	{r4, r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	40021000 	.word	0x40021000
 800103c:	40000400 	.word	0x40000400
 8001040:	48000400 	.word	0x48000400
 8001044:	40014000 	.word	0x40014000

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001070:	f000 f87a 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001086:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <LoopForever+0xe>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a0:	4c0b      	ldr	r4, [pc, #44]	; (80010d0 <LoopForever+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010ae:	f7ff ffe4 	bl	800107a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010b2:	f001 fd9b 	bl	8002bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b6:	f7ff f99d 	bl	80003f4 <main>

080010ba <LoopForever>:

LoopForever:
    b LoopForever
 80010ba:	e7fe      	b.n	80010ba <LoopForever>
  ldr   r0, =_estack
 80010bc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c8:	08002c94 	.word	0x08002c94
  ldr r2, =_sbss
 80010cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010d0:	200000f8 	.word	0x200000f8

080010d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_COMP_IRQHandler>
	...

080010d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_Init+0x24>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_Init+0x24>)
 80010e2:	2110      	movs	r1, #16
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 f809 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ee:	f7ff fe79 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_InitTick+0x5c>)
 800110a:	681c      	ldr	r4, [r3, #0]
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_InitTick+0x60>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	0019      	movs	r1, r3
 8001112:	23fa      	movs	r3, #250	; 0xfa
 8001114:	0098      	lsls	r0, r3, #2
 8001116:	f7fe fff7 	bl	8000108 <__udivsi3>
 800111a:	0003      	movs	r3, r0
 800111c:	0019      	movs	r1, r3
 800111e:	0020      	movs	r0, r4
 8001120:	f7fe fff2 	bl	8000108 <__udivsi3>
 8001124:	0003      	movs	r3, r0
 8001126:	0018      	movs	r0, r3
 8001128:	f000 f903 	bl	8001332 <HAL_SYSTICK_Config>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e00f      	b.n	8001154 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d80b      	bhi.n	8001152 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	2301      	movs	r3, #1
 800113e:	425b      	negs	r3, r3
 8001140:	2200      	movs	r2, #0
 8001142:	0018      	movs	r0, r3
 8001144:	f000 f8e0 	bl	8001308 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_InitTick+0x64>)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b003      	add	sp, #12
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x1c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	001a      	movs	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_IncTick+0x20>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	18d2      	adds	r2, r2, r3
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_IncTick+0x20>)
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	20000008 	.word	0x20000008
 8001188:	200000f4 	.word	0x200000f4

0800118c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b02      	ldr	r3, [pc, #8]	; (800119c <HAL_GetTick+0x10>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	200000f4 	.word	0x200000f4

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff fff0 	bl	800118c <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3301      	adds	r3, #1
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_Delay+0x40>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	001a      	movs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	189b      	adds	r3, r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	f7ff ffe0 	bl	800118c <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b004      	add	sp, #16
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000008 	.word	0x20000008

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	0002      	movs	r2, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b7f      	cmp	r3, #127	; 0x7f
 80011f8:	d828      	bhi.n	800124c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011fa:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <__NVIC_SetPriority+0xd4>)
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b25b      	sxtb	r3, r3
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	33c0      	adds	r3, #192	; 0xc0
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	589b      	ldr	r3, [r3, r2]
 800120a:	1dfa      	adds	r2, r7, #7
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	0011      	movs	r1, r2
 8001210:	2203      	movs	r2, #3
 8001212:	400a      	ands	r2, r1
 8001214:	00d2      	lsls	r2, r2, #3
 8001216:	21ff      	movs	r1, #255	; 0xff
 8001218:	4091      	lsls	r1, r2
 800121a:	000a      	movs	r2, r1
 800121c:	43d2      	mvns	r2, r2
 800121e:	401a      	ands	r2, r3
 8001220:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	019b      	lsls	r3, r3, #6
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	401a      	ands	r2, r3
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	2303      	movs	r3, #3
 8001232:	4003      	ands	r3, r0
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001238:	481f      	ldr	r0, [pc, #124]	; (80012b8 <__NVIC_SetPriority+0xd4>)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b25b      	sxtb	r3, r3
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	430a      	orrs	r2, r1
 8001244:	33c0      	adds	r3, #192	; 0xc0
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800124a:	e031      	b.n	80012b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <__NVIC_SetPriority+0xd8>)
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	0019      	movs	r1, r3
 8001254:	230f      	movs	r3, #15
 8001256:	400b      	ands	r3, r1
 8001258:	3b08      	subs	r3, #8
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3306      	adds	r3, #6
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	18d3      	adds	r3, r2, r3
 8001262:	3304      	adds	r3, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	1dfa      	adds	r2, r7, #7
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	0011      	movs	r1, r2
 800126c:	2203      	movs	r2, #3
 800126e:	400a      	ands	r2, r1
 8001270:	00d2      	lsls	r2, r2, #3
 8001272:	21ff      	movs	r1, #255	; 0xff
 8001274:	4091      	lsls	r1, r2
 8001276:	000a      	movs	r2, r1
 8001278:	43d2      	mvns	r2, r2
 800127a:	401a      	ands	r2, r3
 800127c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	019b      	lsls	r3, r3, #6
 8001282:	22ff      	movs	r2, #255	; 0xff
 8001284:	401a      	ands	r2, r3
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	0018      	movs	r0, r3
 800128c:	2303      	movs	r3, #3
 800128e:	4003      	ands	r3, r0
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <__NVIC_SetPriority+0xd8>)
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	001c      	movs	r4, r3
 800129c:	230f      	movs	r3, #15
 800129e:	4023      	ands	r3, r4
 80012a0:	3b08      	subs	r3, #8
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	430a      	orrs	r2, r1
 80012a6:	3306      	adds	r3, #6
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	18c3      	adds	r3, r0, r3
 80012ac:	3304      	adds	r3, #4
 80012ae:	601a      	str	r2, [r3, #0]
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b003      	add	sp, #12
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <SysTick_Config+0x40>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e010      	b.n	80012f8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <SysTick_Config+0x44>)
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	3a01      	subs	r2, #1
 80012dc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	2301      	movs	r3, #1
 80012e0:	425b      	negs	r3, r3
 80012e2:	2103      	movs	r1, #3
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff ff7d 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SysTick_Config+0x44>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SysTick_Config+0x44>)
 80012f2:	2207      	movs	r2, #7
 80012f4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	00ffffff 	.word	0x00ffffff
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	210f      	movs	r1, #15
 8001314:	187b      	adds	r3, r7, r1
 8001316:	1c02      	adds	r2, r0, #0
 8001318:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	187b      	adds	r3, r7, r1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b25b      	sxtb	r3, r3
 8001322:	0011      	movs	r1, r2
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b004      	add	sp, #16
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ffbf 	bl	80012c0 <SysTick_Config>
 8001342:	0003      	movs	r3, r0
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	b002      	add	sp, #8
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	e14f      	b.n	80015fc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4091      	lsls	r1, r2
 8001366:	000a      	movs	r2, r1
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d100      	bne.n	8001374 <HAL_GPIO_Init+0x28>
 8001372:	e140      	b.n	80015f6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d00b      	beq.n	8001394 <HAL_GPIO_Init+0x48>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d007      	beq.n	8001394 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001388:	2b11      	cmp	r3, #17
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b12      	cmp	r3, #18
 8001392:	d130      	bne.n	80013f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	409a      	lsls	r2, r3
 80013a2:	0013      	movs	r3, r2
 80013a4:	43da      	mvns	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	409a      	lsls	r2, r3
 80013b6:	0013      	movs	r3, r2
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ca:	2201      	movs	r2, #1
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	43da      	mvns	r2, r3
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	2201      	movs	r2, #1
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	2203      	movs	r2, #3
 8001402:	409a      	lsls	r2, r3
 8001404:	0013      	movs	r3, r2
 8001406:	43da      	mvns	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0xea>
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b12      	cmp	r3, #18
 8001434:	d123      	bne.n	800147e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	58d3      	ldr	r3, [r2, r3]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2207      	movs	r2, #7
 8001448:	4013      	ands	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	43da      	mvns	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2107      	movs	r1, #7
 8001462:	400b      	ands	r3, r1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	6939      	ldr	r1, [r7, #16]
 800147c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	401a      	ands	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	055b      	lsls	r3, r3, #21
 80014ba:	4013      	ands	r3, r2
 80014bc:	d100      	bne.n	80014c0 <HAL_GPIO_Init+0x174>
 80014be:	e09a      	b.n	80015f6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c0:	4b54      	ldr	r3, [pc, #336]	; (8001614 <HAL_GPIO_Init+0x2c8>)
 80014c2:	699a      	ldr	r2, [r3, #24]
 80014c4:	4b53      	ldr	r3, [pc, #332]	; (8001614 <HAL_GPIO_Init+0x2c8>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	430a      	orrs	r2, r1
 80014ca:	619a      	str	r2, [r3, #24]
 80014cc:	4b51      	ldr	r3, [pc, #324]	; (8001614 <HAL_GPIO_Init+0x2c8>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2201      	movs	r2, #1
 80014d2:	4013      	ands	r3, r2
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014d8:	4a4f      	ldr	r2, [pc, #316]	; (8001618 <HAL_GPIO_Init+0x2cc>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	589b      	ldr	r3, [r3, r2]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2203      	movs	r2, #3
 80014ea:	4013      	ands	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	409a      	lsls	r2, r3
 80014f2:	0013      	movs	r3, r2
 80014f4:	43da      	mvns	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	2390      	movs	r3, #144	; 0x90
 8001500:	05db      	lsls	r3, r3, #23
 8001502:	429a      	cmp	r2, r3
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0x1e2>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a44      	ldr	r2, [pc, #272]	; (800161c <HAL_GPIO_Init+0x2d0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d00d      	beq.n	800152a <HAL_GPIO_Init+0x1de>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a43      	ldr	r2, [pc, #268]	; (8001620 <HAL_GPIO_Init+0x2d4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d007      	beq.n	8001526 <HAL_GPIO_Init+0x1da>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a42      	ldr	r2, [pc, #264]	; (8001624 <HAL_GPIO_Init+0x2d8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d101      	bne.n	8001522 <HAL_GPIO_Init+0x1d6>
 800151e:	2303      	movs	r3, #3
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x1e4>
 8001522:	2305      	movs	r3, #5
 8001524:	e004      	b.n	8001530 <HAL_GPIO_Init+0x1e4>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_Init+0x1e4>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x1e4>
 800152e:	2300      	movs	r3, #0
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	2103      	movs	r1, #3
 8001534:	400a      	ands	r2, r1
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001540:	4935      	ldr	r1, [pc, #212]	; (8001618 <HAL_GPIO_Init+0x2cc>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154e:	4b36      	ldr	r3, [pc, #216]	; (8001628 <HAL_GPIO_Init+0x2dc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	4013      	ands	r3, r2
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_GPIO_Init+0x2dc>)
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001578:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <HAL_GPIO_Init+0x2dc>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43da      	mvns	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	029b      	lsls	r3, r3, #10
 8001590:	4013      	ands	r3, r2
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_GPIO_Init+0x2dc>)
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_GPIO_Init+0x2dc>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	035b      	lsls	r3, r3, #13
 80015ba:	4013      	ands	r3, r2
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_GPIO_Init+0x2dc>)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_GPIO_Init+0x2dc>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43da      	mvns	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	039b      	lsls	r3, r3, #14
 80015e4:	4013      	ands	r3, r2
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_GPIO_Init+0x2dc>)
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	40da      	lsrs	r2, r3
 8001604:	1e13      	subs	r3, r2, #0
 8001606:	d000      	beq.n	800160a <HAL_GPIO_Init+0x2be>
 8001608:	e6a8      	b.n	800135c <HAL_GPIO_Init+0x10>
  } 
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b006      	add	sp, #24
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	48000400 	.word	0x48000400
 8001620:	48000800 	.word	0x48000800
 8001624:	48000c00 	.word	0x48000c00
 8001628:	40010400 	.word	0x40010400

0800162c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	0008      	movs	r0, r1
 8001636:	0011      	movs	r1, r2
 8001638:	1cbb      	adds	r3, r7, #2
 800163a:	1c02      	adds	r2, r0, #0
 800163c:	801a      	strh	r2, [r3, #0]
 800163e:	1c7b      	adds	r3, r7, #1
 8001640:	1c0a      	adds	r2, r1, #0
 8001642:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001644:	1c7b      	adds	r3, r7, #1
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800164c:	1cbb      	adds	r3, r7, #2
 800164e:	881a      	ldrh	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001654:	e003      	b.n	800165e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001656:	1cbb      	adds	r3, r7, #2
 8001658:	881a      	ldrh	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e303      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d100      	bne.n	8001686 <HAL_RCC_OscConfig+0x1e>
 8001684:	e08d      	b.n	80017a2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001686:	4bc4      	ldr	r3, [pc, #784]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	220c      	movs	r2, #12
 800168c:	4013      	ands	r3, r2
 800168e:	2b04      	cmp	r3, #4
 8001690:	d00e      	beq.n	80016b0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001692:	4bc1      	ldr	r3, [pc, #772]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	220c      	movs	r2, #12
 8001698:	4013      	ands	r3, r2
 800169a:	2b08      	cmp	r3, #8
 800169c:	d116      	bne.n	80016cc <HAL_RCC_OscConfig+0x64>
 800169e:	4bbe      	ldr	r3, [pc, #760]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	025b      	lsls	r3, r3, #9
 80016a6:	401a      	ands	r2, r3
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d10d      	bne.n	80016cc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	4bb9      	ldr	r3, [pc, #740]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	029b      	lsls	r3, r3, #10
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_RCC_OscConfig+0x56>
 80016bc:	e070      	b.n	80017a0 <HAL_RCC_OscConfig+0x138>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d000      	beq.n	80016c8 <HAL_RCC_OscConfig+0x60>
 80016c6:	e06b      	b.n	80017a0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e2da      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x7c>
 80016d4:	4bb0      	ldr	r3, [pc, #704]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4baf      	ldr	r3, [pc, #700]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	0249      	lsls	r1, r1, #9
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e02f      	b.n	8001744 <HAL_RCC_OscConfig+0xdc>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_OscConfig+0x9e>
 80016ec:	4baa      	ldr	r3, [pc, #680]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4ba9      	ldr	r3, [pc, #676]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016f2:	49aa      	ldr	r1, [pc, #680]	; (800199c <HAL_RCC_OscConfig+0x334>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	4ba7      	ldr	r3, [pc, #668]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4ba6      	ldr	r3, [pc, #664]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80016fe:	49a8      	ldr	r1, [pc, #672]	; (80019a0 <HAL_RCC_OscConfig+0x338>)
 8001700:	400a      	ands	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e01e      	b.n	8001744 <HAL_RCC_OscConfig+0xdc>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b05      	cmp	r3, #5
 800170c:	d10e      	bne.n	800172c <HAL_RCC_OscConfig+0xc4>
 800170e:	4ba2      	ldr	r3, [pc, #648]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4ba1      	ldr	r3, [pc, #644]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	02c9      	lsls	r1, r1, #11
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	4b9e      	ldr	r3, [pc, #632]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b9d      	ldr	r3, [pc, #628]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	0249      	lsls	r1, r1, #9
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0xdc>
 800172c:	4b9a      	ldr	r3, [pc, #616]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b99      	ldr	r3, [pc, #612]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001732:	499a      	ldr	r1, [pc, #616]	; (800199c <HAL_RCC_OscConfig+0x334>)
 8001734:	400a      	ands	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	4b97      	ldr	r3, [pc, #604]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b96      	ldr	r3, [pc, #600]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800173e:	4998      	ldr	r1, [pc, #608]	; (80019a0 <HAL_RCC_OscConfig+0x338>)
 8001740:	400a      	ands	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d014      	beq.n	8001776 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fd1e 	bl	800118c <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001756:	f7ff fd19 	bl	800118c <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b64      	cmp	r3, #100	; 0x64
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e28c      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001768:	4b8b      	ldr	r3, [pc, #556]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	029b      	lsls	r3, r3, #10
 8001770:	4013      	ands	r3, r2
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0xee>
 8001774:	e015      	b.n	80017a2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fd09 	bl	800118c <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fd04 	bl	800118c <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e277      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b81      	ldr	r3, [pc, #516]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	029b      	lsls	r3, r3, #10
 800179a:	4013      	ands	r3, r2
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x118>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d100      	bne.n	80017ae <HAL_RCC_OscConfig+0x146>
 80017ac:	e069      	b.n	8001882 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017ae:	4b7a      	ldr	r3, [pc, #488]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	220c      	movs	r2, #12
 80017b4:	4013      	ands	r3, r2
 80017b6:	d00b      	beq.n	80017d0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017b8:	4b77      	ldr	r3, [pc, #476]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	220c      	movs	r2, #12
 80017be:	4013      	ands	r3, r2
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d11c      	bne.n	80017fe <HAL_RCC_OscConfig+0x196>
 80017c4:	4b74      	ldr	r3, [pc, #464]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	025b      	lsls	r3, r3, #9
 80017cc:	4013      	ands	r3, r2
 80017ce:	d116      	bne.n	80017fe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d0:	4b71      	ldr	r3, [pc, #452]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2202      	movs	r2, #2
 80017d6:	4013      	ands	r3, r2
 80017d8:	d005      	beq.n	80017e6 <HAL_RCC_OscConfig+0x17e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e24d      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b6c      	ldr	r3, [pc, #432]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	22f8      	movs	r2, #248	; 0xf8
 80017ec:	4393      	bics	r3, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	00da      	lsls	r2, r3, #3
 80017f6:	4b68      	ldr	r3, [pc, #416]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fc:	e041      	b.n	8001882 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d024      	beq.n	8001850 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001806:	4b64      	ldr	r3, [pc, #400]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b63      	ldr	r3, [pc, #396]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800180c:	2101      	movs	r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff fcbb 	bl	800118c <HAL_GetTick>
 8001816:	0003      	movs	r3, r0
 8001818:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181c:	f7ff fcb6 	bl	800118c <HAL_GetTick>
 8001820:	0002      	movs	r2, r0
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e229      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b5a      	ldr	r3, [pc, #360]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d0f1      	beq.n	800181c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4b57      	ldr	r3, [pc, #348]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	22f8      	movs	r2, #248	; 0xf8
 800183e:	4393      	bics	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00da      	lsls	r2, r3, #3
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	e018      	b.n	8001882 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001850:	4b51      	ldr	r3, [pc, #324]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001856:	2101      	movs	r1, #1
 8001858:	438a      	bics	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fc96 	bl	800118c <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001866:	f7ff fc91 	bl	800118c <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e204      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001878:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d1f1      	bne.n	8001866 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2208      	movs	r2, #8
 8001888:	4013      	ands	r3, r2
 800188a:	d036      	beq.n	80018fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d019      	beq.n	80018c8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001898:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800189a:	2101      	movs	r1, #1
 800189c:	430a      	orrs	r2, r1
 800189e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fc74 	bl	800118c <HAL_GetTick>
 80018a4:	0003      	movs	r3, r0
 80018a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff fc6f 	bl	800118c <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1e2      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018bc:	4b36      	ldr	r3, [pc, #216]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2202      	movs	r2, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	d0f1      	beq.n	80018aa <HAL_RCC_OscConfig+0x242>
 80018c6:	e018      	b.n	80018fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c8:	4b33      	ldr	r3, [pc, #204]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80018ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	438a      	bics	r2, r1
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fc5a 	bl	800118c <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018de:	f7ff fc55 	bl	800118c <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e1c8      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	2202      	movs	r2, #2
 80018f6:	4013      	ands	r3, r2
 80018f8:	d1f1      	bne.n	80018de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2204      	movs	r2, #4
 8001900:	4013      	ands	r3, r2
 8001902:	d100      	bne.n	8001906 <HAL_RCC_OscConfig+0x29e>
 8001904:	e0b6      	b.n	8001a74 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001906:	231f      	movs	r3, #31
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190e:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001910:	69da      	ldr	r2, [r3, #28]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	055b      	lsls	r3, r3, #21
 8001916:	4013      	ands	r3, r2
 8001918:	d111      	bne.n	800193e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	0549      	lsls	r1, r1, #21
 8001924:	430a      	orrs	r2, r1
 8001926:	61da      	str	r2, [r3, #28]
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800192a:	69da      	ldr	r2, [r3, #28]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	055b      	lsls	r3, r3, #21
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001936:	231f      	movs	r3, #31
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_OscConfig+0x33c>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4013      	ands	r3, r2
 8001948:	d11a      	bne.n	8001980 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_RCC_OscConfig+0x33c>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_RCC_OscConfig+0x33c>)
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	0049      	lsls	r1, r1, #1
 8001954:	430a      	orrs	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001958:	f7ff fc18 	bl	800118c <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7ff fc13 	bl	800118c <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e186      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_OscConfig+0x33c>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4013      	ands	r3, r2
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d10f      	bne.n	80019a8 <HAL_RCC_OscConfig+0x340>
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800198a:	6a1a      	ldr	r2, [r3, #32]
 800198c:	4b02      	ldr	r3, [pc, #8]	; (8001998 <HAL_RCC_OscConfig+0x330>)
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	621a      	str	r2, [r3, #32]
 8001994:	e036      	b.n	8001a04 <HAL_RCC_OscConfig+0x39c>
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	40021000 	.word	0x40021000
 800199c:	fffeffff 	.word	0xfffeffff
 80019a0:	fffbffff 	.word	0xfffbffff
 80019a4:	40007000 	.word	0x40007000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10c      	bne.n	80019ca <HAL_RCC_OscConfig+0x362>
 80019b0:	4bb6      	ldr	r3, [pc, #728]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019b2:	6a1a      	ldr	r2, [r3, #32]
 80019b4:	4bb5      	ldr	r3, [pc, #724]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019b6:	2101      	movs	r1, #1
 80019b8:	438a      	bics	r2, r1
 80019ba:	621a      	str	r2, [r3, #32]
 80019bc:	4bb3      	ldr	r3, [pc, #716]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	4bb2      	ldr	r3, [pc, #712]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019c2:	2104      	movs	r1, #4
 80019c4:	438a      	bics	r2, r1
 80019c6:	621a      	str	r2, [r3, #32]
 80019c8:	e01c      	b.n	8001a04 <HAL_RCC_OscConfig+0x39c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x384>
 80019d2:	4bae      	ldr	r3, [pc, #696]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019d4:	6a1a      	ldr	r2, [r3, #32]
 80019d6:	4bad      	ldr	r3, [pc, #692]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019d8:	2104      	movs	r1, #4
 80019da:	430a      	orrs	r2, r1
 80019dc:	621a      	str	r2, [r3, #32]
 80019de:	4bab      	ldr	r3, [pc, #684]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019e0:	6a1a      	ldr	r2, [r3, #32]
 80019e2:	4baa      	ldr	r3, [pc, #680]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019e4:	2101      	movs	r1, #1
 80019e6:	430a      	orrs	r2, r1
 80019e8:	621a      	str	r2, [r3, #32]
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0x39c>
 80019ec:	4ba7      	ldr	r3, [pc, #668]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019ee:	6a1a      	ldr	r2, [r3, #32]
 80019f0:	4ba6      	ldr	r3, [pc, #664]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	438a      	bics	r2, r1
 80019f6:	621a      	str	r2, [r3, #32]
 80019f8:	4ba4      	ldr	r3, [pc, #656]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019fa:	6a1a      	ldr	r2, [r3, #32]
 80019fc:	4ba3      	ldr	r3, [pc, #652]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 80019fe:	2104      	movs	r1, #4
 8001a00:	438a      	bics	r2, r1
 8001a02:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d014      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fbbe 	bl	800118c <HAL_GetTick>
 8001a10:	0003      	movs	r3, r0
 8001a12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	e009      	b.n	8001a2a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7ff fbb9 	bl	800118c <HAL_GetTick>
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	4a9b      	ldr	r2, [pc, #620]	; (8001c90 <HAL_RCC_OscConfig+0x628>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e12b      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2a:	4b98      	ldr	r3, [pc, #608]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x3ae>
 8001a34:	e013      	b.n	8001a5e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fba9 	bl	800118c <HAL_GetTick>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3e:	e009      	b.n	8001a54 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff fba4 	bl	800118c <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	4a91      	ldr	r2, [pc, #580]	; (8001c90 <HAL_RCC_OscConfig+0x628>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e116      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	4b8d      	ldr	r3, [pc, #564]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a5e:	231f      	movs	r3, #31
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a68:	4b88      	ldr	r3, [pc, #544]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	4b87      	ldr	r3, [pc, #540]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001a6e:	4989      	ldr	r1, [pc, #548]	; (8001c94 <HAL_RCC_OscConfig+0x62c>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d063      	beq.n	8001b46 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d12a      	bne.n	8001adc <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a86:	4b81      	ldr	r3, [pc, #516]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a8a:	4b80      	ldr	r3, [pc, #512]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a92:	4b7e      	ldr	r3, [pc, #504]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a96:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001a98:	2101      	movs	r1, #1
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fb75 	bl	800118c <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001aa8:	f7ff fb70 	bl	800118c <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0e3      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001aba:	4b74      	ldr	r3, [pc, #464]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0f1      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ac4:	4b71      	ldr	r3, [pc, #452]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	22f8      	movs	r2, #248	; 0xf8
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	00da      	lsls	r2, r3, #3
 8001ad4:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ada:	e034      	b.n	8001b46 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	3305      	adds	r3, #5
 8001ae2:	d111      	bne.n	8001b08 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ae4:	4b69      	ldr	r3, [pc, #420]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae8:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001aea:	2104      	movs	r1, #4
 8001aec:	438a      	bics	r2, r1
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001af0:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af4:	22f8      	movs	r2, #248	; 0xf8
 8001af6:	4393      	bics	r3, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	00da      	lsls	r2, r3, #3
 8001b00:	4b62      	ldr	r3, [pc, #392]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001b02:	430a      	orrs	r2, r1
 8001b04:	635a      	str	r2, [r3, #52]	; 0x34
 8001b06:	e01e      	b.n	8001b46 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b08:	4b60      	ldr	r3, [pc, #384]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b0c:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001b0e:	2104      	movs	r1, #4
 8001b10:	430a      	orrs	r2, r1
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b14:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b18:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	438a      	bics	r2, r1
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fb34 	bl	800118c <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b2a:	f7ff fb2f 	bl	800118c <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0a2      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d1f1      	bne.n	8001b2a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d100      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4e8>
 8001b4e:	e097      	b.n	8001c80 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b50:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	220c      	movs	r2, #12
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d100      	bne.n	8001b5e <HAL_RCC_OscConfig+0x4f6>
 8001b5c:	e06b      	b.n	8001c36 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d14c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b66:	4b49      	ldr	r3, [pc, #292]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b48      	ldr	r3, [pc, #288]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001b6c:	494a      	ldr	r1, [pc, #296]	; (8001c98 <HAL_RCC_OscConfig+0x630>)
 8001b6e:	400a      	ands	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff fb0b 	bl	800118c <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7ff fb06 	bl	800118c <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e079      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	049b      	lsls	r3, r3, #18
 8001b96:	4013      	ands	r3, r2
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	4393      	bics	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba8:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001baa:	430a      	orrs	r2, r1
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a3a      	ldr	r2, [pc, #232]	; (8001c9c <HAL_RCC_OscConfig+0x634>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	0449      	lsls	r1, r1, #17
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fad9 	bl	800118c <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff fad4 	bl	800118c <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e047      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	049b      	lsls	r3, r3, #18
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x578>
 8001bfe:	e03f      	b.n	8001c80 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001c06:	4924      	ldr	r1, [pc, #144]	; (8001c98 <HAL_RCC_OscConfig+0x630>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fabe 	bl	800118c <HAL_GetTick>
 8001c10:	0003      	movs	r3, r0
 8001c12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff fab9 	bl	800118c <HAL_GetTick>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e02c      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	049b      	lsls	r3, r3, #18
 8001c30:	4013      	ands	r3, r2
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x5ae>
 8001c34:	e024      	b.n	8001c80 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e01f      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_RCC_OscConfig+0x624>)
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	025b      	lsls	r3, r3, #9
 8001c54:	401a      	ands	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d10e      	bne.n	8001c7c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	220f      	movs	r2, #15
 8001c62:	401a      	ands	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	23f0      	movs	r3, #240	; 0xf0
 8001c70:	039b      	lsls	r3, r3, #14
 8001c72:	401a      	ands	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b008      	add	sp, #32
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	00001388 	.word	0x00001388
 8001c94:	efffffff 	.word	0xefffffff
 8001c98:	feffffff 	.word	0xfeffffff
 8001c9c:	ffc2ffff 	.word	0xffc2ffff

08001ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b3      	b.n	8001e1c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b5b      	ldr	r3, [pc, #364]	; (8001e24 <HAL_RCC_ClockConfig+0x184>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d911      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <HAL_RCC_ClockConfig+0x184>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4393      	bics	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	4b55      	ldr	r3, [pc, #340]	; (8001e24 <HAL_RCC_ClockConfig+0x184>)
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_ClockConfig+0x184>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4013      	ands	r3, r2
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e09a      	b.n	8001e1c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2202      	movs	r2, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	d015      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d006      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cfa:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001d00:	21e0      	movs	r1, #224	; 0xe0
 8001d02:	00c9      	lsls	r1, r1, #3
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	22f0      	movs	r2, #240	; 0xf0
 8001d0e:	4393      	bics	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	d040      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	029b      	lsls	r3, r3, #10
 8001d36:	4013      	ands	r3, r2
 8001d38:	d114      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e06e      	b.n	8001e1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	049b      	lsls	r3, r3, #18
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d108      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e062      	b.n	8001e1c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d56:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e05b      	b.n	8001e1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	4393      	bics	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001d74:	430a      	orrs	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d78:	f7ff fa08 	bl	800118c <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d80:	e009      	b.n	8001d96 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d82:	f7ff fa03 	bl	800118c <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <HAL_RCC_ClockConfig+0x18c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e042      	b.n	8001e1c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1ec      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da8:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_RCC_ClockConfig+0x184>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4013      	ands	r3, r2
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d211      	bcs.n	8001dda <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_RCC_ClockConfig+0x184>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_RCC_ClockConfig+0x184>)
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_RCC_ClockConfig+0x184>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4013      	ands	r3, r2
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e020      	b.n	8001e1c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2204      	movs	r2, #4
 8001de0:	4013      	ands	r3, r2
 8001de2:	d009      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_RCC_ClockConfig+0x190>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001df8:	f000 f820 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001dfc:	0001      	movs	r1, r0
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_RCC_ClockConfig+0x188>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	220f      	movs	r2, #15
 8001e06:	4013      	ands	r3, r2
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x194>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	000a      	movs	r2, r1
 8001e0e:	40da      	lsrs	r2, r3
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x198>)
 8001e12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7ff f973 	bl	8001100 <HAL_InitTick>
  
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40022000 	.word	0x40022000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	00001388 	.word	0x00001388
 8001e30:	fffff8ff 	.word	0xfffff8ff
 8001e34:	08002c7c 	.word	0x08002c7c
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b08f      	sub	sp, #60	; 0x3c
 8001e40:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e42:	2314      	movs	r3, #20
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	4a2b      	ldr	r2, [pc, #172]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e4a:	c313      	stmia	r3!, {r0, r1, r4}
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e56:	c313      	stmia	r3!, {r0, r1, r4}
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e64:	2300      	movs	r3, #0
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e70:	4b22      	ldr	r3, [pc, #136]	; (8001efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e78:	220c      	movs	r2, #12
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d002      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x4a>
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d003      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x50>
 8001e84:	e02d      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e8a:	e02d      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8e:	0c9b      	lsrs	r3, r3, #18
 8001e90:	220f      	movs	r2, #15
 8001e92:	4013      	ands	r3, r2
 8001e94:	2214      	movs	r2, #20
 8001e96:	18ba      	adds	r2, r7, r2
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e9c:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	1d3a      	adds	r2, r7, #4
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	025b      	lsls	r3, r3, #9
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eb6:	4812      	ldr	r0, [pc, #72]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001eb8:	f7fe f926 	bl	8000108 <__udivsi3>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	4353      	muls	r3, r2
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec6:	e009      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eca:	000a      	movs	r2, r1
 8001ecc:	0152      	lsls	r2, r2, #5
 8001ece:	1a52      	subs	r2, r2, r1
 8001ed0:	0193      	lsls	r3, r2, #6
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	185b      	adds	r3, r3, r1
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ee0:	e002      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ee6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b00f      	add	sp, #60	; 0x3c
 8001ef0:	bd90      	pop	{r4, r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	08002c5c 	.word	0x08002c5c
 8001ef8:	08002c6c 	.word	0x08002c6c
 8001efc:	40021000 	.word	0x40021000
 8001f00:	007a1200 	.word	0x007a1200

08001f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e01e      	b.n	8001f54 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	223d      	movs	r2, #61	; 0x3d
 8001f1a:	5c9b      	ldrb	r3, [r3, r2]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d107      	bne.n	8001f32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	223c      	movs	r2, #60	; 0x3c
 8001f26:	2100      	movs	r1, #0
 8001f28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7fe ff7d 	bl	8000e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	223d      	movs	r2, #61	; 0x3d
 8001f36:	2102      	movs	r1, #2
 8001f38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	0019      	movs	r1, r3
 8001f44:	0010      	movs	r0, r2
 8001f46:	f000 fa5b 	bl	8002400 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223d      	movs	r2, #61	; 0x3d
 8001f4e:	2101      	movs	r1, #1
 8001f50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e01e      	b.n	8001fac <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	223d      	movs	r2, #61	; 0x3d
 8001f72:	5c9b      	ldrb	r3, [r3, r2]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d107      	bne.n	8001f8a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	223c      	movs	r2, #60	; 0x3c
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7fe ff81 	bl	8000e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	223d      	movs	r2, #61	; 0x3d
 8001f8e:	2102      	movs	r1, #2
 8001f90:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	0010      	movs	r0, r2
 8001f9e:	f000 fa2f 	bl	8002400 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	223d      	movs	r2, #61	; 0x3d
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b002      	add	sp, #8
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6839      	ldr	r1, [r7, #0]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 fd30 	bl	8002a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_TIM_PWM_Start+0x88>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00e      	beq.n	8001ff4 <HAL_TIM_PWM_Start+0x40>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_TIM_PWM_Start+0x8c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d009      	beq.n	8001ff4 <HAL_TIM_PWM_Start+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_TIM_PWM_Start+0x90>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_TIM_PWM_Start+0x40>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_TIM_PWM_Start+0x94>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_TIM_PWM_Start+0x44>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_TIM_PWM_Start+0x46>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0209      	lsls	r1, r1, #8
 800200c:	430a      	orrs	r2, r1
 800200e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2207      	movs	r2, #7
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b06      	cmp	r3, #6
 8002020:	d007      	beq.n	8002032 <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b004      	add	sp, #16
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40012c00 	.word	0x40012c00
 8002040:	40014000 	.word	0x40014000
 8002044:	40014400 	.word	0x40014400
 8002048:	40014800 	.word	0x40014800

0800204c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6839      	ldr	r1, [r7, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	0018      	movs	r0, r3
 8002060:	f000 fce4 	bl	8002a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <HAL_TIM_PWM_Stop+0xac>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00e      	beq.n	800208c <HAL_TIM_PWM_Stop+0x40>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a22      	ldr	r2, [pc, #136]	; (80020fc <HAL_TIM_PWM_Stop+0xb0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_TIM_PWM_Stop+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a20      	ldr	r2, [pc, #128]	; (8002100 <HAL_TIM_PWM_Stop+0xb4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_TIM_PWM_Stop+0x40>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <HAL_TIM_PWM_Stop+0xb8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_TIM_PWM_Stop+0x44>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_TIM_PWM_Stop+0x46>
 8002090:	2300      	movs	r3, #0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d013      	beq.n	80020be <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <HAL_TIM_PWM_Stop+0xbc>)
 800209e:	4013      	ands	r3, r2
 80020a0:	d10d      	bne.n	80020be <HAL_TIM_PWM_Stop+0x72>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4a18      	ldr	r2, [pc, #96]	; (800210c <HAL_TIM_PWM_Stop+0xc0>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	d107      	bne.n	80020be <HAL_TIM_PWM_Stop+0x72>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4915      	ldr	r1, [pc, #84]	; (8002110 <HAL_TIM_PWM_Stop+0xc4>)
 80020ba:	400a      	ands	r2, r1
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_TIM_PWM_Stop+0xbc>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	d10d      	bne.n	80020e6 <HAL_TIM_PWM_Stop+0x9a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_TIM_PWM_Stop+0xc0>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	d107      	bne.n	80020e6 <HAL_TIM_PWM_Stop+0x9a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	438a      	bics	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	223d      	movs	r2, #61	; 0x3d
 80020ea:	2101      	movs	r1, #1
 80020ec:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40014000 	.word	0x40014000
 8002100:	40014400 	.word	0x40014400
 8002104:	40014800 	.word	0x40014800
 8002108:	00001111 	.word	0x00001111
 800210c:	00000444 	.word	0x00000444
 8002110:	ffff7fff 	.word	0xffff7fff

08002114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	223c      	movs	r2, #60	; 0x3c
 8002124:	5c9b      	ldrb	r3, [r3, r2]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800212a:	2302      	movs	r3, #2
 800212c:	e0a4      	b.n	8002278 <HAL_TIM_PWM_ConfigChannel+0x164>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	223c      	movs	r2, #60	; 0x3c
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	223d      	movs	r2, #61	; 0x3d
 800213a:	2102      	movs	r1, #2
 800213c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d029      	beq.n	8002198 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002144:	d802      	bhi.n	800214c <HAL_TIM_PWM_ConfigChannel+0x38>
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800214a:	e08c      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800214c:	2b08      	cmp	r3, #8
 800214e:	d046      	beq.n	80021de <HAL_TIM_PWM_ConfigChannel+0xca>
 8002150:	2b0c      	cmp	r3, #12
 8002152:	d065      	beq.n	8002220 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002154:	e087      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	0011      	movs	r1, r2
 800215e:	0018      	movs	r0, r3
 8002160:	f000 f9ce 	bl	8002500 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2108      	movs	r1, #8
 8002170:	430a      	orrs	r2, r1
 8002172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2104      	movs	r1, #4
 8002180:	438a      	bics	r2, r1
 8002182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6999      	ldr	r1, [r3, #24]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	619a      	str	r2, [r3, #24]
      break;
 8002196:	e066      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	0011      	movs	r1, r2
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 fa35 	bl	8002610 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2180      	movs	r1, #128	; 0x80
 80021b2:	0109      	lsls	r1, r1, #4
 80021b4:	430a      	orrs	r2, r1
 80021b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	492f      	ldr	r1, [pc, #188]	; (8002280 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80021c4:	400a      	ands	r2, r1
 80021c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6999      	ldr	r1, [r3, #24]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	021a      	lsls	r2, r3, #8
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	619a      	str	r2, [r3, #24]
      break;
 80021dc:	e043      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	0011      	movs	r1, r2
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 fa96 	bl	8002718 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2108      	movs	r1, #8
 80021f8:	430a      	orrs	r2, r1
 80021fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2104      	movs	r1, #4
 8002208:	438a      	bics	r2, r1
 800220a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69d9      	ldr	r1, [r3, #28]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	61da      	str	r2, [r3, #28]
      break;
 800221e:	e022      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	0011      	movs	r1, r2
 8002228:	0018      	movs	r0, r3
 800222a:	f000 fafb 	bl	8002824 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	0109      	lsls	r1, r1, #4
 800223c:	430a      	orrs	r2, r1
 800223e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	490d      	ldr	r1, [pc, #52]	; (8002280 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800224c:	400a      	ands	r2, r1
 800224e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69d9      	ldr	r1, [r3, #28]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	021a      	lsls	r2, r3, #8
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	61da      	str	r2, [r3, #28]
      break;
 8002264:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	223d      	movs	r2, #61	; 0x3d
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	223c      	movs	r2, #60	; 0x3c
 8002272:	2100      	movs	r1, #0
 8002274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}
 8002280:	fffffbff 	.word	0xfffffbff

08002284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	223c      	movs	r2, #60	; 0x3c
 8002292:	5c9b      	ldrb	r3, [r3, r2]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_TIM_ConfigClockSource+0x18>
 8002298:	2302      	movs	r3, #2
 800229a:	e0ab      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x170>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	223c      	movs	r2, #60	; 0x3c
 80022a0:	2101      	movs	r1, #1
 80022a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	223d      	movs	r2, #61	; 0x3d
 80022a8:	2102      	movs	r1, #2
 80022aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2277      	movs	r2, #119	; 0x77
 80022b8:	4393      	bics	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4a4f      	ldr	r2, [pc, #316]	; (80023fc <HAL_TIM_ConfigClockSource+0x178>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b40      	cmp	r3, #64	; 0x40
 80022d2:	d100      	bne.n	80022d6 <HAL_TIM_ConfigClockSource+0x52>
 80022d4:	e06b      	b.n	80023ae <HAL_TIM_ConfigClockSource+0x12a>
 80022d6:	d80e      	bhi.n	80022f6 <HAL_TIM_ConfigClockSource+0x72>
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d100      	bne.n	80022de <HAL_TIM_ConfigClockSource+0x5a>
 80022dc:	e077      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x14a>
 80022de:	d803      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x64>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d100      	bne.n	80022e6 <HAL_TIM_ConfigClockSource+0x62>
 80022e4:	e073      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80022e6:	e07c      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d100      	bne.n	80022ee <HAL_TIM_ConfigClockSource+0x6a>
 80022ec:	e06f      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x14a>
 80022ee:	2b30      	cmp	r3, #48	; 0x30
 80022f0:	d100      	bne.n	80022f4 <HAL_TIM_ConfigClockSource+0x70>
 80022f2:	e06c      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80022f4:	e075      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80022f6:	2b70      	cmp	r3, #112	; 0x70
 80022f8:	d00e      	beq.n	8002318 <HAL_TIM_ConfigClockSource+0x94>
 80022fa:	d804      	bhi.n	8002306 <HAL_TIM_ConfigClockSource+0x82>
 80022fc:	2b50      	cmp	r3, #80	; 0x50
 80022fe:	d036      	beq.n	800236e <HAL_TIM_ConfigClockSource+0xea>
 8002300:	2b60      	cmp	r3, #96	; 0x60
 8002302:	d044      	beq.n	800238e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002304:	e06d      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	0152      	lsls	r2, r2, #5
 800230a:	4293      	cmp	r3, r2
 800230c:	d068      	beq.n	80023e0 <HAL_TIM_ConfigClockSource+0x15c>
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	0192      	lsls	r2, r2, #6
 8002312:	4293      	cmp	r3, r2
 8002314:	d017      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002316:	e064      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6899      	ldr	r1, [r3, #8]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f000 fb60 	bl	80029ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2277      	movs	r2, #119	; 0x77
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	609a      	str	r2, [r3, #8]
      break;
 8002344:	e04d      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f000 fb49 	bl	80029ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	01c9      	lsls	r1, r1, #7
 8002368:	430a      	orrs	r2, r1
 800236a:	609a      	str	r2, [r3, #8]
      break;
 800236c:	e039      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6859      	ldr	r1, [r3, #4]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	001a      	movs	r2, r3
 800237c:	f000 fabc 	bl	80028f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2150      	movs	r1, #80	; 0x50
 8002386:	0018      	movs	r0, r3
 8002388:	f000 fb16 	bl	80029b8 <TIM_ITRx_SetConfig>
      break;
 800238c:	e029      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	001a      	movs	r2, r3
 800239c:	f000 fada 	bl	8002954 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2160      	movs	r1, #96	; 0x60
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 fb06 	bl	80029b8 <TIM_ITRx_SetConfig>
      break;
 80023ac:	e019      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6859      	ldr	r1, [r3, #4]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	001a      	movs	r2, r3
 80023bc:	f000 fa9c 	bl	80028f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2140      	movs	r1, #64	; 0x40
 80023c6:	0018      	movs	r0, r3
 80023c8:	f000 faf6 	bl	80029b8 <TIM_ITRx_SetConfig>
      break;
 80023cc:	e009      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	0019      	movs	r1, r3
 80023d8:	0010      	movs	r0, r2
 80023da:	f000 faed 	bl	80029b8 <TIM_ITRx_SetConfig>
      break;
 80023de:	e000      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80023e0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	223d      	movs	r2, #61	; 0x3d
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	223c      	movs	r2, #60	; 0x3c
 80023ee:	2100      	movs	r1, #0
 80023f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b004      	add	sp, #16
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	ffff00ff 	.word	0xffff00ff

08002400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a34      	ldr	r2, [pc, #208]	; (80024e4 <TIM_Base_SetConfig+0xe4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d008      	beq.n	800242a <TIM_Base_SetConfig+0x2a>
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	05db      	lsls	r3, r3, #23
 800241e:	429a      	cmp	r2, r3
 8002420:	d003      	beq.n	800242a <TIM_Base_SetConfig+0x2a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <TIM_Base_SetConfig+0xe8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d108      	bne.n	800243c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2270      	movs	r2, #112	; 0x70
 800242e:	4393      	bics	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <TIM_Base_SetConfig+0xe4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d018      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	05db      	lsls	r3, r3, #23
 800244a:	429a      	cmp	r2, r3
 800244c:	d013      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <TIM_Base_SetConfig+0xe8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00f      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a24      	ldr	r2, [pc, #144]	; (80024ec <TIM_Base_SetConfig+0xec>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00b      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <TIM_Base_SetConfig+0xf0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <TIM_Base_SetConfig+0xf4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d003      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <TIM_Base_SetConfig+0xf8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d108      	bne.n	8002488 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a20      	ldr	r2, [pc, #128]	; (80024fc <TIM_Base_SetConfig+0xfc>)
 800247a:	4013      	ands	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	4393      	bics	r3, r2
 800248e:	001a      	movs	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <TIM_Base_SetConfig+0xe4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00b      	beq.n	80024ce <TIM_Base_SetConfig+0xce>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a0d      	ldr	r2, [pc, #52]	; (80024f0 <TIM_Base_SetConfig+0xf0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <TIM_Base_SetConfig+0xce>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <TIM_Base_SetConfig+0xf4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d003      	beq.n	80024ce <TIM_Base_SetConfig+0xce>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <TIM_Base_SetConfig+0xf8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d103      	bne.n	80024d6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	615a      	str	r2, [r3, #20]
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b004      	add	sp, #16
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40002000 	.word	0x40002000
 80024f0:	40014000 	.word	0x40014000
 80024f4:	40014400 	.word	0x40014400
 80024f8:	40014800 	.word	0x40014800
 80024fc:	fffffcff 	.word	0xfffffcff

08002500 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	2201      	movs	r2, #1
 8002510:	4393      	bics	r3, r2
 8002512:	001a      	movs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2270      	movs	r2, #112	; 0x70
 800252e:	4393      	bics	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2203      	movs	r2, #3
 8002536:	4393      	bics	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2202      	movs	r2, #2
 8002548:	4393      	bics	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a27      	ldr	r2, [pc, #156]	; (80025f8 <TIM_OC1_SetConfig+0xf8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00b      	beq.n	8002576 <TIM_OC1_SetConfig+0x76>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a26      	ldr	r2, [pc, #152]	; (80025fc <TIM_OC1_SetConfig+0xfc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d007      	beq.n	8002576 <TIM_OC1_SetConfig+0x76>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a25      	ldr	r2, [pc, #148]	; (8002600 <TIM_OC1_SetConfig+0x100>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d003      	beq.n	8002576 <TIM_OC1_SetConfig+0x76>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a24      	ldr	r2, [pc, #144]	; (8002604 <TIM_OC1_SetConfig+0x104>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d10c      	bne.n	8002590 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2208      	movs	r2, #8
 800257a:	4393      	bics	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2204      	movs	r2, #4
 800258c:	4393      	bics	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <TIM_OC1_SetConfig+0xf8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00b      	beq.n	80025b0 <TIM_OC1_SetConfig+0xb0>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a18      	ldr	r2, [pc, #96]	; (80025fc <TIM_OC1_SetConfig+0xfc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d007      	beq.n	80025b0 <TIM_OC1_SetConfig+0xb0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a17      	ldr	r2, [pc, #92]	; (8002600 <TIM_OC1_SetConfig+0x100>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d003      	beq.n	80025b0 <TIM_OC1_SetConfig+0xb0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a16      	ldr	r2, [pc, #88]	; (8002604 <TIM_OC1_SetConfig+0x104>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d111      	bne.n	80025d4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4a15      	ldr	r2, [pc, #84]	; (8002608 <TIM_OC1_SetConfig+0x108>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4a14      	ldr	r2, [pc, #80]	; (800260c <TIM_OC1_SetConfig+0x10c>)
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	621a      	str	r2, [r3, #32]
}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b006      	add	sp, #24
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	40012c00 	.word	0x40012c00
 80025fc:	40014000 	.word	0x40014000
 8002600:	40014400 	.word	0x40014400
 8002604:	40014800 	.word	0x40014800
 8002608:	fffffeff 	.word	0xfffffeff
 800260c:	fffffdff 	.word	0xfffffdff

08002610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	2210      	movs	r2, #16
 8002620:	4393      	bics	r3, r2
 8002622:	001a      	movs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4a2e      	ldr	r2, [pc, #184]	; (80026f8 <TIM_OC2_SetConfig+0xe8>)
 800263e:	4013      	ands	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a2d      	ldr	r2, [pc, #180]	; (80026fc <TIM_OC2_SetConfig+0xec>)
 8002646:	4013      	ands	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2220      	movs	r2, #32
 800265a:	4393      	bics	r3, r2
 800265c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a24      	ldr	r2, [pc, #144]	; (8002700 <TIM_OC2_SetConfig+0xf0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10d      	bne.n	800268e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	4393      	bics	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2240      	movs	r2, #64	; 0x40
 800268a:	4393      	bics	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1b      	ldr	r2, [pc, #108]	; (8002700 <TIM_OC2_SetConfig+0xf0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00b      	beq.n	80026ae <TIM_OC2_SetConfig+0x9e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <TIM_OC2_SetConfig+0xf4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <TIM_OC2_SetConfig+0x9e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <TIM_OC2_SetConfig+0xf8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d003      	beq.n	80026ae <TIM_OC2_SetConfig+0x9e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <TIM_OC2_SetConfig+0xfc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d113      	bne.n	80026d6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4a17      	ldr	r2, [pc, #92]	; (8002710 <TIM_OC2_SetConfig+0x100>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4a16      	ldr	r2, [pc, #88]	; (8002714 <TIM_OC2_SetConfig+0x104>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	621a      	str	r2, [r3, #32]
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b006      	add	sp, #24
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	ffff8fff 	.word	0xffff8fff
 80026fc:	fffffcff 	.word	0xfffffcff
 8002700:	40012c00 	.word	0x40012c00
 8002704:	40014000 	.word	0x40014000
 8002708:	40014400 	.word	0x40014400
 800270c:	40014800 	.word	0x40014800
 8002710:	fffffbff 	.word	0xfffffbff
 8002714:	fffff7ff 	.word	0xfffff7ff

08002718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4a35      	ldr	r2, [pc, #212]	; (80027fc <TIM_OC3_SetConfig+0xe4>)
 8002728:	401a      	ands	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2270      	movs	r2, #112	; 0x70
 8002744:	4393      	bics	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2203      	movs	r2, #3
 800274c:	4393      	bics	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4a28      	ldr	r2, [pc, #160]	; (8002800 <TIM_OC3_SetConfig+0xe8>)
 800275e:	4013      	ands	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a24      	ldr	r2, [pc, #144]	; (8002804 <TIM_OC3_SetConfig+0xec>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10d      	bne.n	8002792 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	4a23      	ldr	r2, [pc, #140]	; (8002808 <TIM_OC3_SetConfig+0xf0>)
 800277a:	4013      	ands	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	4a1f      	ldr	r2, [pc, #124]	; (800280c <TIM_OC3_SetConfig+0xf4>)
 800278e:	4013      	ands	r3, r2
 8002790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <TIM_OC3_SetConfig+0xec>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00b      	beq.n	80027b2 <TIM_OC3_SetConfig+0x9a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <TIM_OC3_SetConfig+0xf8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <TIM_OC3_SetConfig+0x9a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a1b      	ldr	r2, [pc, #108]	; (8002814 <TIM_OC3_SetConfig+0xfc>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d003      	beq.n	80027b2 <TIM_OC3_SetConfig+0x9a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <TIM_OC3_SetConfig+0x100>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d113      	bne.n	80027da <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4a19      	ldr	r2, [pc, #100]	; (800281c <TIM_OC3_SetConfig+0x104>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4a18      	ldr	r2, [pc, #96]	; (8002820 <TIM_OC3_SetConfig+0x108>)
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	621a      	str	r2, [r3, #32]
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b006      	add	sp, #24
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	fffffeff 	.word	0xfffffeff
 8002800:	fffffdff 	.word	0xfffffdff
 8002804:	40012c00 	.word	0x40012c00
 8002808:	fffff7ff 	.word	0xfffff7ff
 800280c:	fffffbff 	.word	0xfffffbff
 8002810:	40014000 	.word	0x40014000
 8002814:	40014400 	.word	0x40014400
 8002818:	40014800 	.word	0x40014800
 800281c:	ffffefff 	.word	0xffffefff
 8002820:	ffffdfff 	.word	0xffffdfff

08002824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <TIM_OC4_SetConfig+0xb0>)
 8002834:	401a      	ands	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <TIM_OC4_SetConfig+0xb4>)
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <TIM_OC4_SetConfig+0xb8>)
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <TIM_OC4_SetConfig+0xbc>)
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	031b      	lsls	r3, r3, #12
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <TIM_OC4_SetConfig+0xc0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00b      	beq.n	800289c <TIM_OC4_SetConfig+0x78>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <TIM_OC4_SetConfig+0xc4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d007      	beq.n	800289c <TIM_OC4_SetConfig+0x78>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a17      	ldr	r2, [pc, #92]	; (80028ec <TIM_OC4_SetConfig+0xc8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d003      	beq.n	800289c <TIM_OC4_SetConfig+0x78>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <TIM_OC4_SetConfig+0xcc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d109      	bne.n	80028b0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <TIM_OC4_SetConfig+0xd0>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	621a      	str	r2, [r3, #32]
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b006      	add	sp, #24
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	ffffefff 	.word	0xffffefff
 80028d8:	ffff8fff 	.word	0xffff8fff
 80028dc:	fffffcff 	.word	0xfffffcff
 80028e0:	ffffdfff 	.word	0xffffdfff
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40014000 	.word	0x40014000
 80028ec:	40014400 	.word	0x40014400
 80028f0:	40014800 	.word	0x40014800
 80028f4:	ffffbfff 	.word	0xffffbfff

080028f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	2201      	movs	r2, #1
 8002910:	4393      	bics	r3, r2
 8002912:	001a      	movs	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	22f0      	movs	r2, #240	; 0xf0
 8002922:	4393      	bics	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	220a      	movs	r2, #10
 8002934:	4393      	bics	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	621a      	str	r2, [r3, #32]
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b006      	add	sp, #24
 8002952:	bd80      	pop	{r7, pc}

08002954 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	2210      	movs	r2, #16
 8002966:	4393      	bics	r3, r2
 8002968:	001a      	movs	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <TIM_TI2_ConfigInputStage+0x60>)
 800297e:	4013      	ands	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	031b      	lsls	r3, r3, #12
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	22a0      	movs	r2, #160	; 0xa0
 8002990:	4393      	bics	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b006      	add	sp, #24
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	ffff0fff 	.word	0xffff0fff

080029b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2270      	movs	r2, #112	; 0x70
 80029cc:	4393      	bics	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	2207      	movs	r2, #7
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	609a      	str	r2, [r3, #8]
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <TIM_ETR_SetConfig+0x3c>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	021a      	lsls	r2, r3, #8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	609a      	str	r2, [r3, #8]
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b006      	add	sp, #24
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	ffff00ff 	.word	0xffff00ff

08002a2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	221f      	movs	r2, #31
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2201      	movs	r2, #1
 8002a40:	409a      	lsls	r2, r3
 8002a42:	0013      	movs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	43d2      	mvns	r2, r2
 8002a4e:	401a      	ands	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a1a      	ldr	r2, [r3, #32]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	211f      	movs	r1, #31
 8002a5c:	400b      	ands	r3, r1
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4099      	lsls	r1, r3
 8002a62:	000b      	movs	r3, r1
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	621a      	str	r2, [r3, #32]
}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b006      	add	sp, #24
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	223c      	movs	r2, #60	; 0x3c
 8002a82:	5c9b      	ldrb	r3, [r3, r2]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e047      	b.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	223c      	movs	r2, #60	; 0x3c
 8002a90:	2101      	movs	r1, #1
 8002a92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	223d      	movs	r2, #61	; 0x3d
 8002a98:	2102      	movs	r1, #2
 8002a9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2270      	movs	r2, #112	; 0x70
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00f      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	05db      	lsls	r3, r3, #23
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d009      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d10c      	bne.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2280      	movs	r2, #128	; 0x80
 8002af4:	4393      	bics	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	223d      	movs	r2, #61	; 0x3d
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	223c      	movs	r2, #60	; 0x3c
 8002b16:	2100      	movs	r1, #0
 8002b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b004      	add	sp, #16
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40014000 	.word	0x40014000

08002b30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	223c      	movs	r2, #60	; 0x3c
 8002b42:	5c9b      	ldrb	r3, [r3, r2]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e03e      	b.n	8002bca <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	223c      	movs	r2, #60	; 0x3c
 8002b50:	2101      	movs	r1, #1
 8002b52:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	22ff      	movs	r2, #255	; 0xff
 8002b58:	4393      	bics	r3, r2
 8002b5a:	001a      	movs	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002b68:	401a      	ands	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002b76:	401a      	ands	r2, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002b84:	401a      	ands	r2, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002b92:	401a      	ands	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a11      	ldr	r2, [pc, #68]	; (8002be4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002bae:	401a      	ands	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	223c      	movs	r2, #60	; 0x3c
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	0018      	movs	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b004      	add	sp, #16
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	fffffcff 	.word	0xfffffcff
 8002bd8:	fffffbff 	.word	0xfffffbff
 8002bdc:	fffff7ff 	.word	0xfffff7ff
 8002be0:	ffffefff 	.word	0xffffefff
 8002be4:	ffffdfff 	.word	0xffffdfff
 8002be8:	ffffbfff 	.word	0xffffbfff

08002bec <__libc_init_array>:
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	2600      	movs	r6, #0
 8002bf0:	4d0c      	ldr	r5, [pc, #48]	; (8002c24 <__libc_init_array+0x38>)
 8002bf2:	4c0d      	ldr	r4, [pc, #52]	; (8002c28 <__libc_init_array+0x3c>)
 8002bf4:	1b64      	subs	r4, r4, r5
 8002bf6:	10a4      	asrs	r4, r4, #2
 8002bf8:	42a6      	cmp	r6, r4
 8002bfa:	d109      	bne.n	8002c10 <__libc_init_array+0x24>
 8002bfc:	2600      	movs	r6, #0
 8002bfe:	f000 f821 	bl	8002c44 <_init>
 8002c02:	4d0a      	ldr	r5, [pc, #40]	; (8002c2c <__libc_init_array+0x40>)
 8002c04:	4c0a      	ldr	r4, [pc, #40]	; (8002c30 <__libc_init_array+0x44>)
 8002c06:	1b64      	subs	r4, r4, r5
 8002c08:	10a4      	asrs	r4, r4, #2
 8002c0a:	42a6      	cmp	r6, r4
 8002c0c:	d105      	bne.n	8002c1a <__libc_init_array+0x2e>
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
 8002c10:	00b3      	lsls	r3, r6, #2
 8002c12:	58eb      	ldr	r3, [r5, r3]
 8002c14:	4798      	blx	r3
 8002c16:	3601      	adds	r6, #1
 8002c18:	e7ee      	b.n	8002bf8 <__libc_init_array+0xc>
 8002c1a:	00b3      	lsls	r3, r6, #2
 8002c1c:	58eb      	ldr	r3, [r5, r3]
 8002c1e:	4798      	blx	r3
 8002c20:	3601      	adds	r6, #1
 8002c22:	e7f2      	b.n	8002c0a <__libc_init_array+0x1e>
 8002c24:	08002c8c 	.word	0x08002c8c
 8002c28:	08002c8c 	.word	0x08002c8c
 8002c2c:	08002c8c 	.word	0x08002c8c
 8002c30:	08002c90 	.word	0x08002c90

08002c34 <memset>:
 8002c34:	0003      	movs	r3, r0
 8002c36:	1812      	adds	r2, r2, r0
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d100      	bne.n	8002c3e <memset+0xa>
 8002c3c:	4770      	bx	lr
 8002c3e:	7019      	strb	r1, [r3, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	e7f9      	b.n	8002c38 <memset+0x4>

08002c44 <_init>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr

08002c50 <_fini>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c56:	bc08      	pop	{r3}
 8002c58:	469e      	mov	lr, r3
 8002c5a:	4770      	bx	lr
